{"version":3,"sources":["main.js"],"names":["_vue","_interopRequireDefault","require","_App","_router","_elementUi","_axios","Vue","use","Element","size","zIndex","prototype","axios","config","productionTip","window","stateManage","genId","type","STATE_NAME_POOL","store","threadAry","_id","width","height","stateAry","lineAry","debug","obj","statenameIndex","push","data","stateType","name","stateData","this","stateId","inputAry","outputAry","parent","mode","getDefaultStateCfg","y","index","state","children","threadIndex","lineData","relateLine2startState","addState","deleteLine","addLine","line","i","relateLine2endState","length","lineId","splice","traverseLine","lineState","lineItem","result","startState","pop","forEach","item","endState","traverse","stateIndex","resizeThread","dh","dw","to","next","console","from","el","router","components","App","template"],"mappings":"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","file":"main.min.js","sourcesContent":["// The Vue build version to load with the `import` command\r\n// (runtime-only or standalone) has been set in webpack.base.conf with an alias.\r\nimport Vue from 'vue'\r\nimport App from './App'\r\nimport router from './router'\r\nimport Element from 'element-ui';\r\nimport 'element-ui/lib/theme-chalk/index.css';\r\nimport axios from 'axios';\r\n\r\nVue.use(Element, { size: 'small', zIndex: 3000 });\r\nVue.prototype.axios = axios;\r\n\r\nVue.config.productionTip = false\r\n\r\nwindow.stateManage = {};//状态管理  后续采用vuex实现 TODO\r\nwindow.genId = (function () {\r\n  var _id = 0;\r\n  return function (type) {\r\n    return type + '-' + +new Date();//+ ++_id\r\n  }\r\n})();\r\nconst STATE_NAME_POOL = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\r\nwindow.store = {\r\n  debug: true,\r\n  statenameIndex: 0,\r\n  stateData: {\r\n    threadAry: [\r\n      {\r\n        name: \"Main_thread\",\r\n        width: 1200,\r\n        height: 500,\r\n        stateAry: [],\r\n        lineAry: [],\r\n      },\r\n    ],\r\n  },\r\n  addThread(obj) {\r\n    this.stateData.threadAry.push(obj);\r\n  },\r\n  /**\r\n  * 获取状态组件的默认配置\r\n  * @param {index: this.threadIndex, x: e.x - threadPosInfo.x, y: e.y - threadPosInfo.y, stateType: e.dataTransfer.getData(\"stateType\")} data\r\n  */\r\n  getDefaultStateCfg(data) {\r\n    return {\r\n      width: data.stateType === \"loopDiv\" ? \"300px\" : \"76px\",\r\n      height: data.stateType === \"loopDiv\" ? \"120px\" : \"40px\",\r\n      // name: \"状态描述\" + this.statenameIndex++,\r\n      name: STATE_NAME_POOL[this.statenameIndex++],\r\n      stateType: data.stateType,\r\n      stateId: window.genId(\"state\"),\r\n      inputAry: [],\r\n      outputAry: [],\r\n      parent: null,\r\n      mode:'normal',\r\n      x: data.x,\r\n      y: data.y,\r\n      children:[],\r\n    }\r\n  },\r\n  addState(data) {\r\n    let state = this.getDefaultStateCfg(data);\r\n    this.stateData.threadAry[data.index].stateAry.push(state);\r\n  },\r\n  /**\r\n   * 在线程框内增加连线\r\n   * @param { threadIndex, lineData }data\r\n   */\r\n  addLine(data) {\r\n    this.stateData.threadAry[data.threadIndex].lineAry.push(data.lineData);\r\n    //将连线数据添加到首尾2个状态块\r\n    this.relateLine2startState(data);\r\n    this.relateLine2endState(data);\r\n  },\r\n  /**\r\n   * 删除连线 \r\n   * TODO: 需要考虑嵌套时的情况\r\n   * 参数：连线id， 线程索引（TODO:后续考虑修改为线程id）\r\n   * @param {lineId, threadIndex} data\r\n   */\r\n  deleteLine(data) {\r\n    let lineAry = this.stateData.threadAry[data.threadIndex].lineAry,\r\n      lineItem,\r\n      line,\r\n      i;\r\n    for (i = 0; i < lineAry.length; i++) {\r\n      lineItem = lineAry[i];\r\n      if (lineItem.lineId === data.lineId) {\r\n        line = lineAry.splice(i, 1)[0];\r\n        break;\r\n      }\r\n    }\r\n    //修改为深度搜索与选中连线相关的状态\r\n    function traverseLine(stateAry, lineState) {\r\n      for (var i in stateAry){\r\n          if (stateAry[i].stateId === lineState.stateId){\r\n          result.push(stateAry[i]);\r\n          return\r\n          }\r\n        traverseLine(stateAry[i].children, lineState);\r\n      } \r\n    };\r\n    let result = [];\r\n    //更新这条线的始末状态的outputAry inputAry信息\r\n    let stateAry = this.stateData.threadAry[data.threadIndex].stateAry;\r\n    traverseLine(stateAry, line.startState)\r\n    let startState = result.pop()\r\n    let outputAry = startState.outputAry;\r\n    outputAry.forEach((item, index) => {\r\n      if (item.lineId === line.lineId) {\r\n        outputAry.splice(index, 1);\r\n        return false;\r\n      }\r\n    });\r\n\r\n    traverseLine(stateAry, line.endState)\r\n    let endState = result.pop()\r\n    let inputAry = endState.inputAry;\r\n    inputAry.forEach((item, index) => {\r\n      if (item.lineId === line.lineId) {\r\n        inputAry.splice(index, 1);\r\n        return false;\r\n      }\r\n    });\r\n  },\r\n  /**\r\n   * 将连线数据和连线的首尾2个状态关联\r\n   * @param  { threadIndex, lineData }data\r\n   */\r\n\r\n  relateLine2startState(data) {\r\n    let result = []\r\n    // 用于深度搜索stateId的方法，寻找到的state存储在result内\r\n    function traverse(stateAry) {\r\n      for (var i in stateAry){\r\n        if (stateAry[i].stateId === data.lineData.startState.stateId){\r\n          result.push(stateAry[i]);\r\n          return\r\n        }\r\n        traverse(stateAry[i].children);\r\n      }\r\n    };\r\n\r\n    if (data.lineData.startState) {\r\n      traverse(this.stateData.threadAry[data.threadIndex].stateAry)\r\n      let outputAry = result[0].outputAry;\r\n      if (!outputAry) {\r\n        outputAry = [];\r\n        result[0].outputAry = outputAry;\r\n      }\r\n      outputAry.push({\r\n        lineId: data.lineData.lineId, //这里只存放连线的lineId，对连线的具体数据只保存一份，放在thread.lineAry里面，避免维护多份数据\r\n      });\r\n    }\r\n  },\r\n  /**\r\n   * \r\n   * \r\n   * \r\n   */\r\n  relateLine2endState(data) {\r\n    if (\r\n      data.lineData.endState &&\r\n      data.lineData.endState.stateIndex !== null\r\n    ) {\r\n      // 根据id来拿\r\n      let result = []\r\n      // 用于深度搜索stateId的方法，寻找到的state存储在result内\r\n      function traverse(stateAry) {\r\n        for (var i in stateAry){\r\n          if (stateAry[i].stateId === data.lineData.endState.stateId){\r\n            result.push(stateAry[i]);\r\n            return\r\n          }\r\n          traverse(stateAry[i].children);\r\n        }\r\n      };\r\n      traverse(this.stateData.threadAry[data.threadIndex].stateAry)\r\n      let inputAry = result[0].inputAry;\r\n      \r\n      if (!inputAry) {\r\n        inputAry = [];\r\n        result[0].inputAry = inputAry;\r\n      }\r\n      inputAry.push({\r\n        lineId: data.lineData.lineId,\r\n      });\r\n    }\r\n  },\r\n  /**\r\n   * 调整线程框的宽高\r\n   * @param {dw, dh} data \r\n   */\r\n  resizeThread(data) {\r\n    if (data.dh) {\r\n      this.stateData.threadAry[data.threadIndex].height += data.dh;\r\n    }\r\n    if (data.dw) {\r\n      this.stateData.threadAry[data.threadIndex].width += data.dw;\r\n    }\r\n  },\r\n}\r\n\r\nrouter.beforeEach((to, from, next)=>{\r\n  console.log(to);\r\n  if ((from.name === 'blockly' && to.name === 'state') || (to.name === 'blockly' && from.name === 'state')){\r\n    console.log('同步数据... '); //TODO\r\n  }\r\n  next();\r\n})\r\n/* eslint-disable no-new */\r\nwindow.EventObj = new Vue();\r\nnew Vue({\r\n  el: '#app',\r\n  router,\r\n  components: { App },\r\n  template: '<App/>'\r\n})\r\n"]}