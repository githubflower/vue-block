{"version":3,"sources":["main.js"],"names":["_vue","_interopRequireDefault","require","_App","_router","_elementUi","_axios","Vue","use","Element","size","zIndex","prototype","axios","config","productionTip","window","stateManage","genId","type","Date","store","debug","_id","height","stateAry","lineAry","STATE_NAME_POOL","obj","statenameIndex","threadAry","push","data","width","stateType","lineMap","addThread","this","stateData","stateId","inputAry","outputAry","parent","mode","x","getDefaultStateCfg","children","addState","name","index","state","y","threadIndex","lineData","relateLine2startState","relateLine2endState","deleteLine","addLine","i","length","lineId","line","splice","getState","startState","forEach","item","lineItem","endState","startStateId","stateIndex","endStateId","dh","dw","threadIdOrIndex","isThreadId","thread","find","resizeThread","id","console","error","getStateImplement","_this","every","flag","router","beforeEach","to","from","next","log","EventObj","components","App","template"],"mappings":"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","file":"main.min.js","sourcesContent":["// The Vue build version to load with the `import` command\r\n// (runtime-only or standalone) has been set in webpack.base.conf with an alias.\r\nimport Vue from 'vue'\r\nimport App from './App'\r\nimport router from './router'\r\nimport Element from 'element-ui';\r\nimport 'element-ui/lib/theme-chalk/index.css';\r\nimport axios from 'axios';\r\nVue.use(Element, { size: 'small', zIndex: 3000 });\r\nVue.prototype.axios = axios;\r\n\r\nVue.config.productionTip = false\r\n\r\nwindow.stateManage = {};//状态管理  后续采用vuex实现 TODO\r\nwindow.genId = (function () {\r\n  var _id = 0;\r\n  return function (type) {\r\n    return type + '-' + +new Date();//+ ++_id\r\n  }\r\n})();\r\nconst STATE_NAME_POOL = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\r\nwindow.store = {\r\n  debug: true,\r\n  statenameIndex: 0,\r\n  stateData: {\r\n    threadAry: [\r\n      {\r\n        name: \"Main_thread\",\r\n        width: 1200,\r\n        height: 500,\r\n        stateAry: [],\r\n        lineAry: [],\r\n      },\r\n    ],\r\n    lineMap: []\r\n  },\r\n  addThread(obj) {\r\n    this.stateData.threadAry.push(obj);\r\n  },\r\n  /**\r\n  * 获取状态组件的默认配置\r\n  * @param {index: this.threadIndex, x: e.x - threadPosInfo.x, y: e.y - threadPosInfo.y, stateType: e.dataTransfer.getData(\"stateType\")} data\r\n  */\r\n  getDefaultStateCfg(data) {\r\n    return {\r\n      width: data.stateType === \"loopDiv\" ? \"300px\" : \"76px\",\r\n      height: data.stateType === \"loopDiv\" ? \"120px\" : \"40px\",\r\n      // name: \"状态描述\" + this.statenameIndex++,\r\n      name: STATE_NAME_POOL[this.statenameIndex++],\r\n      stateType: data.stateType,\r\n      stateId: window.genId(\"state\"),\r\n      inputAry: [],\r\n      outputAry: [],\r\n      parent: null,\r\n      mode:'normal',\r\n      x: data.x,\r\n      y: data.y,\r\n      children:[],\r\n    }\r\n  },\r\n  addState(data) {\r\n    let state = this.getDefaultStateCfg(data);\r\n    this.stateData.threadAry[data.index].stateAry.push(state);\r\n  },\r\n  /**\r\n   * 在线程框内增加连线\r\n   * @param { threadIndex, lineData }data\r\n   */\r\n  addLine(data) {\r\n    this.stateData.threadAry[data.threadIndex].lineAry.push(data.lineData);\r\n    //将连线数据添加到首尾2个状态块\r\n    this.relateLine2startState(data);\r\n    this.relateLine2endState(data);\r\n  },\r\n  /**\r\n   * 删除连线 \r\n   * 参数：连线id， 线程索引（TODO:后续考虑修改为线程id）\r\n   * @param {lineId, threadIndex} data\r\n   */\r\n  deleteLine(data) {\r\n    let lineAry = this.stateData.threadAry[data.threadIndex].lineAry,\r\n      lineItem,\r\n      line,\r\n      i;\r\n    for (i = 0; i < lineAry.length; i++) {\r\n      lineItem = lineAry[i];\r\n      if (lineItem.lineId === data.lineId) {\r\n        line = lineAry.splice(i, 1)[0];\r\n        break;\r\n      }\r\n    }\r\n\r\n    let startState = store.getState(data.threadIndex, line.startState.stateId)\r\n    let outputAry = startState.outputAry;\r\n    outputAry.forEach((item, index) => {\r\n      if (item.lineId === line.lineId) {\r\n        outputAry.splice(index, 1);\r\n        return false;\r\n      }\r\n    });\r\n\r\n    let endState = store.getState(data.threadIndex, line.endState.stateId)\r\n    let inputAry = endState.inputAry;\r\n    inputAry.forEach((item, index) => {\r\n      if (item.lineId === line.lineId) {\r\n        inputAry.splice(index, 1);\r\n        return false;\r\n      }\r\n    });\r\n  },\r\n  /**\r\n   * 将连线数据和连线的首尾2个状态关联\r\n   * @param  { threadIndex, lineData }data\r\n   */\r\n\r\n  relateLine2startState(data) {\r\n    let startStateId = data.lineData.startState.stateId\r\n    if (data.lineData.startState) {\r\n      let outputAry = store.getState(data.threadIndex, startStateId).outputAry\r\n      if (!outputAry) {\r\n        outputAry = [];\r\n      }\r\n      outputAry.push({\r\n        lineId: data.lineData.lineId, //这里只存放连线的lineId，对连线的具体数据只保存一份，放在thread.lineAry里面，避免维护多份数据\r\n      });\r\n    }\r\n  },\r\n\r\n  relateLine2endState(data) {\r\n    if (\r\n      data.lineData.endState &&\r\n      data.lineData.endState.stateIndex !== null\r\n    ) {\r\n      let endStateId = data.lineData.endState.stateId\r\n      let inputAry = store.getState(data.threadIndex, endStateId).inputAry\r\n      if (!inputAry) {\r\n        inputAry = [];\r\n      }\r\n      inputAry.push({\r\n        lineId: data.lineData.lineId,\r\n      });\r\n    }\r\n  },\r\n  /**\r\n   * 调整线程框的宽高\r\n   * @param {dw, dh} data \r\n   */\r\n  resizeThread(data) {\r\n    if (data.dh) {\r\n      this.stateData.threadAry[data.threadIndex].height += data.dh;\r\n    }\r\n    if (data.dw) {\r\n      this.stateData.threadAry[data.threadIndex].width += data.dw;\r\n    }\r\n  },\r\n  /**\r\n   * 根据传入的线程id/index + 状态id获取状态\r\n   * @param {*} threadIdOrIndex\r\n   * @param {*} stateId \r\n   * @param {*} isThreadId 是否是线程id\r\n   */\r\n  getState(threadIdOrIndex, stateId, isThreadId){\r\n    let state;\r\n    let thread;\r\n    if (isThreadId){\r\n      thread = this.stateData.threadAry.find(item => {\r\n        return item.id === threadIdOrIndex;\r\n      });\r\n    }else{\r\n      thread = this.stateData.threadAry[threadIdOrIndex];\r\n    }\r\n    if (thread){\r\n      state = this.getStateImplement(stateId, thread.stateAry);\r\n    }\r\n    if(!state){\r\n      console.error('根据threadIdOrIndex和stateId获取状态失败---> threadId: ' + threadIdOrIndex + ' stateId: ' + stateId + ' isThreadId: ' + isThreadId);\r\n    }\r\n    return state;\r\n  },\r\n  getStateImplement(stateId, stateAry){\r\n    let state;\r\n    stateAry.every(item => {\r\n      let flag = true;\r\n      if (item.stateId === stateId) {\r\n        state = item;\r\n        flag = false\r\n      } else if (item.children && item.children.length) {\r\n        state = this.getStateImplement(stateId, item.children);\r\n        if(state){\r\n          flag = false\r\n        }\r\n      }\r\n      return flag\r\n    });\r\n    return state\r\n  }\r\n}\r\n\r\nrouter.beforeEach((to, from, next)=>{\r\n  console.log(to);\r\n  if ((from.name === 'blockly' && to.name === 'state') || (to.name === 'blockly' && from.name === 'state')){\r\n    console.log('同步数据... '); //TODO\r\n  }\r\n  next();\r\n})\r\n/* eslint-disable no-new */\r\nwindow.EventObj = new Vue();\r\nnew Vue({\r\n  el: '#app',\r\n  router,\r\n  components: { App },\r\n  template: '<App/>'\r\n})\r\n"]}