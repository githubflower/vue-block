{"version":3,"sources":["main.js"],"names":["_vue","_interopRequireDefault","require","_App","_router","_elementUi","_axios","Vue","use","Element","size","zIndex","prototype","axios","config","productionTip","window","stateManage","genId","type","store","threadAry","_id","width","height","stateAry","lineAry","statenameIndex","name","push","obj","getDefaultStateCfg","data","demoStateData","stateType","addThread","stateData","stateId","inputAry","outputAry","parent","mode","y","index","state","children","this","threadIndex","lineData","addState","deleteLine","addLine","line","i","relateLine2endState","length","lineId","splice","lineItem","startState","forEach","item","find","endState","relateLine2startState","result","traverse","stateIndex","resizeThread","dh","dw","to","from","next","console","log","EventObj","el","router","components","App","template"],"mappings":"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","file":"main.min.js","sourcesContent":["// The Vue build version to load with the `import` command\r\n// (runtime-only or standalone) has been set in webpack.base.conf with an alias.\r\nimport Vue from 'vue'\r\nimport App from './App'\r\nimport router from './router'\r\nimport Element from 'element-ui';\r\nimport 'element-ui/lib/theme-chalk/index.css';\r\nimport axios from 'axios';\r\n\r\nVue.use(Element, { size: 'small', zIndex: 3000 });\r\nVue.prototype.axios = axios;\r\n\r\nVue.config.productionTip = false\r\n\r\nwindow.stateManage = {};//状态管理  后续采用vuex实现 TODO\r\nwindow.genId = (function () {\r\n  var _id = 0;\r\n  return function (type) {\r\n    return type + '-' + +new Date();//+ ++_id\r\n  }\r\n})();\r\n\r\nwindow.store = {\r\n  debug: true,\r\n  statenameIndex: 0,\r\n  stateData: {\r\n    threadAry: [\r\n      {\r\n        name: \"线程1\",\r\n        width: 1200,\r\n        height: 500,\r\n        stateAry: [],\r\n        lineAry: [],\r\n      },\r\n    ],\r\n  //用于DEMO\r\n  demoStateData: {}\r\n  },\r\n  addThread(obj) {\r\n    this.stateData.threadAry.push(obj);\r\n  },\r\n  /**\r\n  * 获取状态组件的默认配置\r\n  * @param {index: this.threadIndex, x: e.x - threadPosInfo.x, y: e.y - threadPosInfo.y, stateType: e.dataTransfer.getData(\"stateType\")} data\r\n  */\r\n  getDefaultStateCfg(data) {\r\n    return {\r\n      width: data.stateType === \"loopDiv\" ? \"300px\" : \"76px\",\r\n      height: data.stateType === \"loopDiv\" ? \"120px\" : \"40px\",\r\n      name: \"状态描述\" + this.statenameIndex++,\r\n      stateType: data.stateType,\r\n      stateId: window.genId(\"state\"),\r\n      inputAry: [],\r\n      outputAry: [],\r\n      parent: null,\r\n      mode:'normal',\r\n      x: data.x,\r\n      y: data.y,\r\n      children:[],\r\n    }\r\n  },\r\n  addState(data) {\r\n    let state = this.getDefaultStateCfg(data);\r\n    this.stateData.threadAry[data.index].stateAry.push(state);\r\n  },\r\n  /**\r\n   * 在线程框内增加连线\r\n   * @param { threadIndex, lineData }data\r\n   */\r\n  addLine(data) {\r\n    this.stateData.threadAry[data.threadIndex].lineAry.push(data.lineData);\r\n    //将连线数据添加到首尾2个状态块\r\n    this.relateLine2startState(data);\r\n    this.relateLine2endState(data);\r\n  },\r\n  /**\r\n   * 删除连线 \r\n   * 参数：连线id， 线程索引（TODO:后续考虑修改为线程id）\r\n   * @param {lineId, threadIndex} data\r\n   */\r\n  deleteLine(data) {\r\n    let lineAry = this.stateData.threadAry[data.threadIndex].lineAry,\r\n      lineItem,\r\n      line,\r\n      i;\r\n    for (i = 0; i < lineAry.length; i++) {\r\n      lineItem = lineAry[i];\r\n      if (lineItem.lineId === data.lineId) {\r\n        line = lineAry.splice(i, 1)[0];\r\n        break;\r\n      }\r\n    }\r\n    //更新这条线的始末状态的outputAry inputAry信息\r\n    let stateAry = this.stateData.threadAry[data.threadIndex].stateAry;\r\n    let startState = stateAry.find((item) => {\r\n      return item.stateId === line.startState.stateId;\r\n    });\r\n    let outputAry = startState.outputAry;\r\n    outputAry.forEach((item, index) => {\r\n      if (item.lineId === line.lineId) {\r\n        outputAry.splice(index, 1);\r\n        return false;\r\n      }\r\n    });\r\n\r\n    let endState = stateAry.find((item) => {\r\n      return item.stateId === line.endState.stateId;\r\n    });\r\n    let inputAry = endState.inputAry;\r\n    inputAry.forEach((item, index) => {\r\n      if (item.lineId === line.lineId) {\r\n        inputAry.splice(index, 1);\r\n        return false;\r\n      }\r\n    });\r\n  },\r\n  /**\r\n   * 将连线数据和连线的首尾2个状态关联\r\n   * @param  { threadIndex, lineData }data\r\n   */\r\n\r\n  relateLine2startState(data) {\r\n    let result = []\r\n    // 用于深度搜索stateId的方法，寻找到的state存储在result内\r\n    function traverse(stateAry) {\r\n      for (var i in stateAry){\r\n        if (stateAry[i].stateId === data.lineData.startState.stateId){\r\n          result.push(stateAry[i]);\r\n          return\r\n        }\r\n        traverse(stateAry[i].children);\r\n      }\r\n    };\r\n\r\n    if (data.lineData.startState) {\r\n      traverse(this.stateData.threadAry[data.threadIndex].stateAry)\r\n      let outputAry = result[0].outputAry;\r\n      if (!outputAry) {\r\n        outputAry = [];\r\n        result[0].outputAry = outputAry;\r\n      }\r\n      outputAry.push({\r\n        lineId: data.lineData.lineId, //这里只存放连线的lineId，对连线的具体数据只保存一份，放在thread.lineAry里面，避免维护多份数据\r\n      });\r\n    }\r\n  },\r\n  /**\r\n   * \r\n   * \r\n   * \r\n   */\r\n  relateLine2endState(data) {\r\n    if (\r\n      data.lineData.endState &&\r\n      data.lineData.endState.stateIndex !== null\r\n    ) {\r\n      // 根据id来拿\r\n      let result = []\r\n      // 用于深度搜索stateId的方法，寻找到的state存储在result内\r\n      function traverse(stateAry) {\r\n        for (var i in stateAry){\r\n          if (stateAry[i].stateId === data.lineData.endState.stateId){\r\n            result.push(stateAry[i]);\r\n            return\r\n          }\r\n          traverse(stateAry[i].children);\r\n        }\r\n      };\r\n      traverse(this.stateData.threadAry[data.threadIndex].stateAry)\r\n      let inputAry = result[0].inputAry;\r\n      \r\n      if (!inputAry) {\r\n        inputAry = [];\r\n        result[0].inputAry = inputAry;\r\n      }\r\n      inputAry.push({\r\n        lineId: data.lineData.lineId,\r\n      });\r\n    }\r\n  },\r\n  /**\r\n   * 调整线程框的宽高\r\n   * @param {dw, dh} data \r\n   */\r\n  resizeThread(data) {\r\n    if (data.dh) {\r\n      this.stateData.threadAry[data.threadIndex].height += data.dh;\r\n    }\r\n    if (data.dw) {\r\n      this.stateData.threadAry[data.threadIndex].width += data.dw;\r\n    }\r\n  },\r\n}\r\n\r\nrouter.beforeEach((to, from, next)=>{\r\n  console.log(to);\r\n  if ((from.name === 'blockly' && to.name === 'state') || (to.name === 'blockly' && from.name === 'state')){\r\n    console.log('同步数据... '); //TODO\r\n  }\r\n  next();\r\n})\r\n/* eslint-disable no-new */\r\nwindow.EventObj = new Vue();\r\nnew Vue({\r\n  el: '#app',\r\n  router,\r\n  components: { App },\r\n  template: '<App/>'\r\n})\r\n"]}