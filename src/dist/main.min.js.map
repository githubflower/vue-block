{"version":3,"sources":["main.js"],"names":["_vue","_interopRequireDefault","require","_App","_router","_elementUi","_axios","Vue","use","Element","size","zIndex","prototype","axios","config","productionTip","window","stateManage","genId","type","Date","stateData","_id","name","width","height","stateAry","stateId","stateType","statenameIndex","inputAry","threadAry","children","x","y","outputAry","lineAry","this","push","obj","getDefaultStateCfg","data","addState","state","index","addLine","threadIndex","lineData","relateLine2startState","relateLine2endState","deleteLine","line","i","length","lineId","lineItem","find","item","startState","splice","endState","forEach","stateIndex","resizeThread","dh","dw","el","router","components","App","template"],"mappings":"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","file":"main.min.js","sourcesContent":["// The Vue build version to load with the `import` command\r\n// (runtime-only or standalone) has been set in webpack.base.conf with an alias.\r\nimport Vue from 'vue'\r\nimport App from './App'\r\nimport router from './router'\r\nimport Element from 'element-ui';\r\nimport 'element-ui/lib/theme-chalk/index.css';\r\nimport axios from 'axios';\r\n\r\n\r\nVue.use(Element, { size: 'small', zIndex: 3000 });\r\nVue.prototype.axios = axios;\r\n\r\nVue.config.productionTip = false\r\n\r\nwindow.stateManage = {};//状态管理  后续采用vuex实现 TODO\r\nwindow.genId = (function () {\r\n  var _id = 0;\r\n  return function (type) {\r\n    return type + '-' + +new Date();//+ ++_id\r\n  }\r\n})();\r\n\r\nwindow.store = {\r\n  debug: true,\r\n  statenameIndex: 0,\r\n  stateData: {\r\n    threadAry: [\r\n      {\r\n        name: \"线程1\",\r\n        width: 1600,\r\n        height: 500,\r\n        stateAry: [\r\n          {\r\n            stateId: \"custom-state-id\",\r\n            stateType: \"stateDiv\",\r\n            name: \"默认状态名称1\",\r\n            inputAry: [],\r\n            outputAry: [],\r\n            children: [],\r\n            x: 5,\r\n            y: 0,\r\n          },\r\n          {\r\n            width: \"302px\",\r\n            height: \"122px\",\r\n            name: \"状态描述99\",\r\n            stateType: \"loopDiv\",\r\n            stateId: window.genId(\"state\"),\r\n            inputAry: [],\r\n            outputAry: [],\r\n            x: 200,\r\n            y: 100,\r\n            children: [\r\n              {\r\n                name: \"child1\",\r\n                stateId: \"state-child1\",\r\n                stateType: \"stateDiv\",\r\n                inputAry: [],\r\n                outputAry: [],\r\n                x: 50,\r\n                y: 50,\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n        lineAry: [],\r\n      },\r\n\r\n    ],\r\n  },\r\n  addThread(obj) {\r\n    this.stateData.threadAry.push(obj);\r\n  },\r\n  /**\r\n  * 获取状态组件的默认配置\r\n  * @param {index: this.threadIndex, x: e.x - threadPosInfo.x, y: e.y - threadPosInfo.y, stateType: e.dataTransfer.getData(\"stateType\")} data\r\n  */\r\n  getDefaultStateCfg(data) {\r\n    return {\r\n      width: data.stateType === \"loopDiv\" ? \"300px\" : \"76px\",\r\n      height: data.stateType === \"loopDiv\" ? \"120px\" : \"40px\",\r\n      name: \"状态描述\" + this.statenameIndex++,\r\n      stateType: data.stateType,\r\n      stateId: window.genId(\"state\"),\r\n      inputAry: [],\r\n      outputAry: [],\r\n      x: data.x,\r\n      y: data.y,\r\n      children:\r\n        data.stateType === \"loopDiv\"\r\n          ? [\r\n            {\r\n              name: \"child1\",\r\n              stateId: \"state-child1\",\r\n              // stateType: \"loopBlock\",\r\n              inputAry: [],\r\n              outputAry: [],\r\n              x: 50,\r\n              y: 50,\r\n            },\r\n          ]\r\n          : [],\r\n    }\r\n  },\r\n  addState(data) {\r\n    let state = this.getDefaultStateCfg(data);\r\n    this.stateData.threadAry[data.index].stateAry.push(state);\r\n  },\r\n  /**\r\n   * 在线程框内增加连线\r\n   * @param { threadIndex, lineData }data\r\n   */\r\n  addLine(data) {\r\n    this.stateData.threadAry[data.threadIndex].lineAry.push(data.lineData);\r\n    //将连线数据添加到首尾2个状态块\r\n    this.relateLine2startState(data);\r\n    this.relateLine2endState(data);\r\n  },\r\n  /**\r\n   * 删除连线 \r\n   * 参数：连线id， 线程索引（TODO:后续考虑修改为线程id）\r\n   * @param {lineId, threadIndex} data\r\n   */\r\n  deleteLine(data) {\r\n    let lineAry = this.stateData.threadAry[data.threadIndex].lineAry,\r\n      lineItem,\r\n      line,\r\n      i;\r\n    for (i = 0; i < lineAry.length; i++) {\r\n      lineItem = lineAry[i];\r\n      if (lineItem.lineId === data.lineId) {\r\n        line = lineAry.splice(i, 1)[0];\r\n        break;\r\n      }\r\n    }\r\n    //更新这条线的始末状态的outputAry inputAry信息\r\n    let stateAry = this.stateData.threadAry[data.threadIndex].stateAry;\r\n    let startState = stateAry.find((item) => {\r\n      return item.stateId === line.startState.stateId;\r\n    });\r\n    let outputAry = startState.outputAry;\r\n    outputAry.forEach((item, index) => {\r\n      if (item.lineId === line.lineId) {\r\n        outputAry.splice(index, 1);\r\n        return false;\r\n      }\r\n    });\r\n\r\n    let endState = stateAry.find((item) => {\r\n      return item.stateId === line.endState.stateId;\r\n    });\r\n    let inputAry = endState.inputAry;\r\n    inputAry.forEach((item, index) => {\r\n      if (item.lineId === line.lineId) {\r\n        inputAry.splice(index, 1);\r\n        return false;\r\n      }\r\n    });\r\n  },\r\n  /**\r\n   * 将连线数据和连线的首尾2个状态关联\r\n   * @param  { threadIndex, lineData }data\r\n   */\r\n  relateLine2startState(data) {\r\n    if (data.lineData.startState) {\r\n      let outputAry = this.stateData.threadAry[data.threadIndex].stateAry[\r\n        data.lineData.startState.stateIndex\r\n      ].outputAry;\r\n      if (!outputAry) {\r\n        outputAry = [];\r\n        this.stateData.threadAry[data.threadIndex].stateAry[\r\n          data.lineData.startState.stateIndex\r\n        ].outputAry = outputAry;\r\n      }\r\n      outputAry.push({\r\n        lineId: data.lineData.lineId, //这里只存放连线的lineId，对连线的具体数据只保存一份，放在thread.lineAry里面，避免维护多份数据\r\n      });\r\n    }\r\n  },\r\n  relateLine2endState(data) {\r\n    if (\r\n      data.lineData.endState &&\r\n      data.lineData.endState.stateIndex !== null\r\n    ) {\r\n      let inputAry = this.stateData.threadAry[data.threadIndex].stateAry[\r\n        data.lineData.endState.stateIndex\r\n      ].inputAry;\r\n      if (!inputAry) {\r\n        inputAry = [];\r\n        this.stateData.threadAry[data.threadIndex].stateAry[\r\n          data.lineData.endState.stateIndex\r\n        ].inputAry = inputAry;\r\n      }\r\n      inputAry.push({\r\n        lineId: data.lineData.lineId,\r\n      });\r\n    }\r\n  },\r\n  /**\r\n   * 调整线程框的宽高\r\n   * @param {dw, dh} data \r\n   */\r\n  resizeThread(data) {\r\n    if (data.dh) {\r\n      this.stateData.threadAry[data.threadIndex].height += data.dh;\r\n    }\r\n    if (data.dw) {\r\n      this.stateData.threadAry[data.threadIndex].width += data.dw;\r\n    }\r\n  },\r\n}\r\n\r\n\r\n/* eslint-disable no-new */\r\nwindow.EventObj = new Vue();\r\nnew Vue({\r\n  el: '#app',\r\n  router,\r\n  components: { App },\r\n  template: '<App/>'\r\n})\r\n"]}