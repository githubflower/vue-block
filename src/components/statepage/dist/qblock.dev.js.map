{"version":3,"sources":["qblock.js"],"names":["LINE_H","lineCfg","line_h","LINE_RADIUS","line_radius","QBlock","store","window","Thread","State","getXY2CanvasWithStateRendered","state","threadIndex","threadPos","document","getElementsByClassName","getBoundingClientRect","statePos","Util","getDomByStateId","stateId","x","left","y","top","getXY2Canvas","xy","parent","getState","parentXY","getStateHeight","translatePX2Num","height","getStateHeightByStateId","getStateWidth","width","Line","getStartPoint","line","startState","threadTitleHeight","getEndPoint","endState","redrawLine","drawLine","startPoint","endPoint","stateHeight","linepath","isDynamicRadiusFlag","Math","abs","path","drawStraightConnectLine","drawLine5ByStateAndPoint","radius","drawLine3ByPoint","console","log"],"mappings":"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","sourcesContent":["import Util from './util.js'\r\nimport { lineCfg } from \"./graphCfg.js\";\r\nconst LINE_H = lineCfg.line_h;\r\nconst LINE_RADIUS = lineCfg.line_radius;\r\nvar QBlock = {\r\n    store: window.store,\r\n    Thread: {\r\n\r\n    },\r\n    State: {\r\n        /**\r\n         * 获取状态相对于线程框的坐标信息  此方法依赖状态组件的dom，不推荐使用\r\n         * @param {*} state\r\n         */\r\n        getXY2CanvasWithStateRendered(state, threadIndex) {\r\n            let threadPos = document.getElementsByClassName(\"thread\")[threadIndex].getBoundingClientRect();\r\n            let statePos = Util.getDomByStateId(state.stateId).getBoundingClientRect();\r\n            return {\r\n                x: statePos.left - threadPos.left,\r\n                y: statePos.top - threadPos.top\r\n            }\r\n        },\r\n        /**\r\n         * 根据状态及其父状态信息计算出相对于线程框的绝对位置  不依赖dom\r\n         * @param {*} state \r\n         * @param {*} threadIndex \r\n         */\r\n        getXY2Canvas(state, threadIndex){\r\n            let xy = {\r\n                x: state.x,\r\n                y: state.y\r\n            };\r\n            if(state.parent){\r\n                let parent = store.getState(threadIndex, state.stateId, false/**isThreadId: false */);\r\n                let parentXY = this.getXY2Canvas(parent, threadIndex);\r\n                xy.x += parentXY.x;\r\n                xy.y += parentXY.y;\r\n            }\r\n            return xy;\r\n        },\r\n        getStateHeight(state) {\r\n            return Util.translatePX2Num(state.height);\r\n        },\r\n        getStateHeightByStateId(threadIndex, stateId) {\r\n            let state = store.getState(threadIndex, stateId, false);\r\n            return Util.translatePX2Num(state.height);\r\n        },\r\n        getStateWidth(state) {\r\n            return Util.translatePX2Num(state.width);\r\n        }\r\n    },\r\n    Line: {\r\n        getStartPoint(line, threadIndex) {\r\n            /* if (\r\n                !line.startPoint ||\r\n                line.startPoint.x === null ||\r\n                typeof line.startPoint.x === \"undefined\" ||\r\n                isNaN(line.startPoint.x)\r\n            ) {\r\n                \r\n            } */\r\n            let startState = store.getState(threadIndex, line.startState.stateId, false/**isThreadId: false */);\r\n            let xy = QBlock.State.getXY2Canvas(startState, threadIndex);\r\n            return {\r\n                x: xy.x + Util.translatePX2Num(startState.width),\r\n                y: xy.y + Util.translatePX2Num(startState.height) / 2 + lineCfg.threadTitleHeight,\r\n            };\r\n            // return line.startPoint;\r\n        },\r\n        getEndPoint(line, threadIndex) {\r\n            let endState = store.getState(threadIndex, line.endState.stateId, false/**isThreadId: false */);\r\n            let xy = QBlock.State.getXY2Canvas(endState, threadIndex);\r\n            return {\r\n                x: xy.x,\r\n                y: xy.y + Util.translatePX2Num(endState.height) / 2 + lineCfg.threadTitleHeight,\r\n            };\r\n            // return line.endPoint;\r\n        },\r\n        redrawLine(line, threadIndex) {\r\n            this.drawLine(line, line.startState, line.endState, threadIndex);\r\n        },\r\n        drawLine(line, startState, endState, threadIndex) {\r\n            let startPoint, endPoint, stateHeight, linepath;\r\n            startPoint = QBlock.Line.getStartPoint(line, threadIndex);\r\n            endPoint = QBlock.Line.getEndPoint(line, threadIndex);\r\n\r\n\r\n            let isDynamicRadiusFlag =\r\n                Math.abs(startPoint.y - endPoint.y) < 2 * LINE_RADIUS;\r\n            let path;\r\n            if (endPoint.y === startPoint.y && endPoint.x > startPoint.x) {\r\n                path = this.drawStraightConnectLine(startPoint, endPoint, LINE_RADIUS);\r\n            } else if (startPoint.x > endPoint.x - LINE_H - LINE_RADIUS) {\r\n                path = this.drawLine5ByStateAndPoint(\r\n                    startState,\r\n                    startPoint,\r\n                    endState,\r\n                    endPoint\r\n                );\r\n            } else {\r\n                //若两个状态块之间的y轴距离小于2个预设拐角半径，则需要动态计算连线拐角的半径，并绘制连线\r\n                var radius = LINE_RADIUS;\r\n                if (isDynamicRadiusFlag) {\r\n                    radius = Math.abs(startPoint.y - endPoint.y) / 2;\r\n                }\r\n                path = this.drawLine3ByPoint(startPoint, endPoint, radius);\r\n            }\r\n            console.log('>>> ' + path);\r\n            return path;\r\n        },\r\n    }\r\n}\r\nexport default QBlock;"],"file":"qblock.dev.js"}