{"version":3,"sources":["qblock.js"],"names":["LINE_H","lineCfg","line_h","LINE_RADIUS","line_radius","QBlock","store","window","Thread","State","getXY2Canvas","state","threadIndex","threadPos","document","getElementsByClassName","getBoundingClientRect","statePos","Util","getDomByStateId","stateId","x","left","y","top","getStateHeight","translatePX2Num","height","getStateHeightByStateId","getState","getStateWidth","width","Line","getStartPoint","line","startState","xy","startPoint","getEndPoint","endState","endPoint","redrawLine","drawLine","tempRadius","stateHeight","linepath","Math","max","drawStraightConnectLine","d","drawUpperBackConnectLine","drawLowerBackConnectLine","doubleRadius","drawLowerConnectLine","drawUpperConnectLine"],"mappings":"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","sourcesContent":["import Util from './util.js'\r\nimport { lineCfg } from \"./graphCfg.js\";\r\nconst LINE_H = lineCfg.line_h;\r\nconst LINE_RADIUS = lineCfg.line_radius;\r\nvar QBlock = {\r\n    store: window.store,\r\n    Thread: {\r\n\r\n    },\r\n    State: {\r\n        /**\r\n         * 获取状态相对于线程框的坐标信息\r\n         * @param {*} state\r\n         */\r\n        getXY2Canvas(state, threadIndex){\r\n            let threadPos = document.getElementsByClassName(\"thread\")[threadIndex].getBoundingClientRect();\r\n            let statePos = Util.getDomByStateId(state.stateId).getBoundingClientRect();\r\n            return {\r\n                x: statePos.left - threadPos.left,\r\n                y: statePos.top - threadPos.top\r\n            }\r\n        },\r\n        getStateHeight(state){\r\n            return Util.translatePX2Num(state.height);\r\n        },\r\n        getStateHeightByStateId(threadIndex, stateId){\r\n            let state = store.getState(threadIndex, stateId, false);\r\n            return Util.translatePX2Num(state.height);\r\n        },\r\n        getStateWidth(state){\r\n            return Util.translatePX2Num(state.width);\r\n        }\r\n    },\r\n    Line: {\r\n        getStartPoint(line, threadIndex){\r\n            /* if (\r\n                !line.startPoint ||\r\n                line.startPoint.x === null ||\r\n                typeof line.startPoint.x === \"undefined\" ||\r\n                isNaN(line.startPoint.x)\r\n            ) {\r\n                \r\n            } */\r\n            let startState = store.getState(threadIndex, line.startState.stateId, false/**isThreadId: false */);\r\n            let xy = QBlock.State.getXY2Canvas(startState, threadIndex);\r\n            line.startPoint = {\r\n                x: xy.x + Util.translatePX2Num(startState.width),\r\n                y: xy.y + Util.translatePX2Num(startState.height) / 2,\r\n            };\r\n            return line.startPoint;\r\n        },\r\n        getEndPoint(line, threadIndex) {\r\n            let endState = store.getState(threadIndex, line.endState.stateId, false/**isThreadId: false */);\r\n            let xy = QBlock.State.getXY2Canvas(endState, threadIndex);\r\n            line.endPoint = {\r\n                x: xy.x,\r\n                y: xy.y + Util.translatePX2Num(endState.height) / 2,\r\n            };\r\n            return line.endPoint;\r\n        },\r\n        redrawLine(line, threadIndex){\r\n            this.drawLine(line, line.startState, line.endState, threadIndex);\r\n        },\r\n        drawLine(line, startState, endState, threadIndex) {\r\n            let tempRadius = LINE_RADIUS;\r\n            let startPoint, endPoint, stateHeight, linepath;\r\n            startPoint = QBlock.Line.getStartPoint(line, threadIndex);\r\n            endPoint = QBlock.Line.getEndPoint(line, threadIndex);\r\n            stateHeight = Math.max(\r\n                QBlock.State.getStateHeightByStateId(threadIndex, startState.stateId) / 2,\r\n                QBlock.State.getStateHeightByStateId(threadIndex, endState.stateId) / 2\r\n            );\r\n\r\n            // y坐标相同，绘制直线\r\n            if (\r\n                endPoint.x > startPoint.x + LINE_H + LINE_RADIUS &&\r\n                endPoint.y == startPoint.y\r\n            ) {\r\n                linepath = this.drawStraightConnectLine(\r\n                    startPoint,\r\n                    endPoint,\r\n                    LINE_RADIUS\r\n                );\r\n                line.endPoint = endPoint;\r\n                line.d = linepath;\r\n                return line;\r\n            }\r\n\r\n            // 当结束点的x坐标小于起始点且y坐标相等时或小于起始点时\r\n            else if (\r\n                (endPoint.x - LINE_H - LINE_RADIUS < startPoint.x &&\r\n                    endPoint.y < startPoint.y) ||\r\n                (endPoint.x < startPoint.x && endPoint.y == startPoint.y)\r\n            ) {\r\n                linepath = this.drawUpperBackConnectLine(\r\n                    startPoint,\r\n                    endPoint,\r\n                    LINE_RADIUS,\r\n                    stateHeight\r\n                );\r\n                line.endPoint = endPoint;\r\n                line.d = linepath;\r\n                return line;\r\n            }\r\n            // 当结束点的x坐标小于起始点时且y坐标大于起始点时\r\n            else if (\r\n                endPoint.x - LINE_H - LINE_RADIUS < startPoint.x &&\r\n                endPoint.y > startPoint.y\r\n            ) {\r\n                linepath = this.drawLowerBackConnectLine(\r\n                    startPoint,\r\n                    endPoint,\r\n                    LINE_RADIUS,\r\n                    stateHeight\r\n                );\r\n                line.endPoint = endPoint;\r\n                line.d = linepath;\r\n                return line;\r\n            }\r\n\r\n            // 当结束点的x, y坐标均大于起始点的时候\r\n            else if (\r\n                endPoint.x > startPoint.x + LINE_H + LINE_RADIUS &&\r\n                endPoint.y > startPoint.y\r\n            ) {\r\n                // 当结束点与起始点的y坐标差距小于两个拐角半径时，根据结束点和起始点的y坐标的差动态决定拐角半径\r\n                if (endPoint.y - startPoint.y < 2 * tempRadius) {\r\n                    let doubleRadius = endPoint.y - startPoint.y;\r\n                    tempRadius = doubleRadius / 2;\r\n                    linepath = this.drawLowerConnectLine(\r\n                        startPoint,\r\n                        endPoint,\r\n                        tempRadius\r\n                    );\r\n                    line.endPoint = endPoint;\r\n                    line.d = linepath;\r\n                    return line;\r\n                } else {\r\n                    linepath = this.drawLowerConnectLine(\r\n                        startPoint,\r\n                        endPoint,\r\n                        LINE_RADIUS\r\n                    );\r\n                    line.endPoint = endPoint;\r\n                    line.d = linepath;\r\n                    return line;\r\n                }\r\n            }\r\n            //当结束点的x坐标大于起始点，y坐标小于起始点时\r\n            else if (\r\n                endPoint.x > startPoint.x + LINE_H + LINE_RADIUS &&\r\n                endPoint.y < startPoint.y\r\n            ) {\r\n                // 当结束点与起始点的y坐标差距小于两个拐角半径时，根据结束点和起始点的y坐标的差动态决定拐角半径\r\n                if (startPoint.y - endPoint.y < 2 * tempRadius) {\r\n                    let doubleRadius = startPoint.y - endPoint.y;\r\n                    tempRadius = doubleRadius / 2;\r\n                    (linepath = this.drawUpperConnectLine(\r\n                        startPoint,\r\n                        endPoint,\r\n                        tempRadius\r\n                    )),\r\n                        (line.endPoint = endPoint);\r\n                    line.d = linepath;\r\n                    return line;\r\n                } else {\r\n                    (linepath = this.drawUpperConnectLine(\r\n                        startPoint,\r\n                        endPoint,\r\n                        LINE_RADIUS\r\n                    )),\r\n                        (line.endPoint = endPoint);\r\n                    line.d = linepath;\r\n                    return line;\r\n                }\r\n            }\r\n        },\r\n    }\r\n}\r\nexport default QBlock;"],"file":"qblock.dev.js"}