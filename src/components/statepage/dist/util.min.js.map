{"version":3,"sources":["util.js"],"names":["NAME_SPACE","Util","createEl","tagName","document","createElementNS","createFieldDom","field","this","container","setAttribute","name","id","textContent","value","createCommentDom","comment","commentDom","pinned","state","stateId","createStateDefBlock","stateDom","fieldDom","nextDom","outputDom","length","createNextStatesDom","outputAry","mutation","outputItem","index","outputStateDom","_this","lineId","line","thread","lineAry","find","item","forEach","stateAry","appendChild","state2dom","error","createNextStatesDom2","triggerEventDom","_this2","triggerEventStatement","nextStatesDom","desc","endState","parentDom","ret","console","rootState","threadData","rootEl","stateType","genBlockType"],"mappings":"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","file":"util.min.js","sourcesContent":["const NAME_SPACE = \"https://developers.google.com/blockly/xml\";\r\nvar Util = {\r\n    createEl(tagName) {\r\n        return document.createElementNS(NAME_SPACE, tagName);\r\n    },\r\n    createFieldDom(field) {\r\n        let container = this.createEl(\"field\");\r\n        container.setAttribute(\"name\", field.name);\r\n        if (field.id){\r\n            container.setAttribute('id', field.id);\r\n        }\r\n        container.textContent = field.value;\r\n        return container;\r\n    },\r\n\r\n    createCommentDom(comment) {\r\n        let commentDom = this.createEl('comment');\r\n        commentDom.setAttribute('pinned', comment.pinned || false);\r\n        commentDom.textContent = comment.value;\r\n        return commentDom;\r\n    },\r\n\r\n    createStateDefBlock(state) {\r\n        var stateDom = this.createEl('block');\r\n        stateDom.setAttribute('type', 'state_def');\r\n        stateDom.setAttribute('id', state.stateId);\r\n        var fieldDom = this.createFieldDom({\r\n            name: 'NAME',\r\n            value: state.name\r\n        });\r\n        stateDom.appendChild(fieldDom);\r\n        return stateDom;\r\n    },\r\n\r\n    createNextStatesDom(state, thread){\r\n        let nextDom, outputDom;\r\n\r\n        if (state.outputAry.length) {\r\n            nextDom = this.createEl(\"next\");\r\n            outputDom = this.createEl(\"block\");\r\n            outputDom.setAttribute(\"type\", \"controls_if\");\r\n            if (state.outputAry.length > 1) {\r\n                let mutation = this.createEl(\"mutation\");\r\n                mutation.setAttribute(\"elseif\", state.outputAry.length - 1);\r\n                outputDom.appendChild(mutation);\r\n            }\r\n            state.outputAry.forEach((outputItem, index) => {\r\n                let outputStateDom;\r\n                outputStateDom = this.createEl(\"statement\");\r\n                outputStateDom.setAttribute(\"name\", `DO${index}`);\r\n                outputStateDom.setAttribute(\"id\", `${outputItem.lineId}`);\r\n                //outputAry里面只存放了lineId 所以我们需要做以下事情：\r\n                //1 根据lineId找到对应的line数据\r\n                //2 根据line里面的endState的stateId找到对应的state数据\r\n                let line = thread.lineAry.find((item) => {\r\n                    return item.lineId === outputItem.lineId;\r\n                });\r\n                if (line) {\r\n                    let state = thread.stateAry.find((item) => {\r\n                        return item.stateId === line.endState.stateId;\r\n                    });\r\n                    if (state) {\r\n                        outputStateDom.appendChild(Util.state2dom(state, thread));\r\n                    } else {\r\n                        console.error(\"data error -^- \");\r\n                    }\r\n                }\r\n                if (outputStateDom) {\r\n                    outputDom.appendChild(outputStateDom);\r\n                }\r\n            });\r\n            nextDom.appendChild(outputDom);\r\n        }\r\n        return nextDom;\r\n    },\r\n\r\n    // 触发事件描述采用独立的结构\r\n    createNextStatesDom2(state, thread) {\r\n        let triggerEventDom;\r\n        let nextStatesDom;\r\n        if (state.outputAry.length) {\r\n            /* if (state.outputAry.length > 1) {\r\n                let mutation = this.createEl(\"mutation\");\r\n                mutation.setAttribute(\"elseif\", state.outputAry.length - 1);\r\n                triggerEventDom.appendChild(mutation);\r\n            } */\r\n            let parentDom;\r\n            \r\n            state.outputAry.forEach((outputItem, index) => {\r\n                let nextDom = this.createEl(\"next\");\r\n                if (!nextStatesDom){\r\n                    nextStatesDom = nextDom;\r\n                }\r\n                triggerEventDom = this.createEl(\"block\");\r\n                triggerEventDom.setAttribute(\"type\", \"state_trigger_event\");\r\n                triggerEventDom.setAttribute(\"id\", outputItem.lineId);\r\n\r\n                let triggerEventStatement;\r\n                triggerEventStatement = this.createEl(\"statement\");\r\n                triggerEventStatement.setAttribute(\"name\", `DO0`);\r\n                // triggerEventStatement.setAttribute(\"id\", `${outputItem.lineId}`);\r\n                //outputAry里面只存放了lineId 所以我们需要做以下事情：\r\n                //1 根据lineId找到对应的line数据\r\n                //2 根据line里面的endState的stateId找到对应的state数据\r\n                let line = thread.lineAry.find((item) => {\r\n                    return item.lineId === outputItem.lineId;\r\n                });\r\n                if (line) {\r\n                    if (line.desc){\r\n                        let commentDom = this.createCommentDom({\r\n                            value: line.desc\r\n                        });\r\n                        triggerEventDom.appendChild(commentDom);\r\n                    }\r\n                    let state = thread.stateAry.find((item) => {\r\n                        return item.stateId === line.endState.stateId;\r\n                    });\r\n                    if (state) {\r\n                        triggerEventStatement.appendChild(Util.state2dom(state, thread));\r\n                    } else {\r\n                        console.error(\"data error -^- \");\r\n                    }\r\n                }\r\n                if (triggerEventStatement) {\r\n                    triggerEventDom.appendChild(triggerEventStatement);\r\n                }\r\n                nextDom.appendChild(triggerEventDom);\r\n                if (parentDom){\r\n                    parentDom.appendChild(nextDom);\r\n                }\r\n                parentDom = triggerEventDom;\r\n                \r\n            });\r\n        }\r\n        return nextStatesDom;\r\n    },\r\n\r\n    genBlockType(type) {\r\n        let ret = \"state_opr\";\r\n        if (type === \"loopDiv\") {\r\n            ret = \"controls_whileUntil\";\r\n        }\r\n        return ret;\r\n    },\r\n\r\n    state2dom(rootState, threadData){\r\n        let rootEl = this.createEl(\"block\");\r\n        console.log(\r\n            rootState.stateId +\r\n            \" --- \" +\r\n            rootState.name +\r\n            \" --- \" +\r\n            rootState.stateType\r\n        );\r\n        rootEl.setAttribute(\"id\", rootState.stateId);\r\n        // rootEl.setAttribute('type', rootState.type || 'state_run');\r\n        rootEl.setAttribute(\"type\", this.genBlockType(rootState.stateType));\r\n        \r\n        let fieldDom = this.createFieldDom({\r\n            id: rootState.stateId,\r\n            name: \"field_state\",\r\n            value: rootState.name,\r\n        });\r\n        rootEl.appendChild(fieldDom);\r\n\r\n        let nextStatesDom = this.createNextStatesDom2(rootState, threadData);\r\n        if (nextStatesDom) {\r\n            rootEl.appendChild(nextStatesDom);\r\n        }\r\n        return rootEl;\r\n    }\r\n}\r\nexport default Util;"]}