{"version":3,"sources":["util.js"],"names":["_dagre","_interopRequireDefault","require","_qblock","_graphCfg","NAME_SPACE","SOUP","RANKSEP","lineCfg","rankSep","Util","isDefined","a","createEl","tagName","attrs","dom","document","createElementNS","_typeof","key","setAttribute","field","container","this","name","id","textContent","value","createCommentDom","comment","createFieldDom","pinned","commentDom","createStateDefBlock","state","index","thread","valueDom","stateDom","appendChild","fieldDom","children","length","startChild","find","item","inputAry","state2dom","statementDom","childrenDom","createNextStatesDom","nextDom","outputDom","_this","outputAry","mutation","forEach","outputItem","outputStateDom","concat","lineId","lineAry","line","store","getStateImplement","endState","stateId","stateAry","createNextStatesDom2","console","nextStatesDom","_this2","triggerEventStatement","triggerEventDom","saveLineData","desc","parentDom","genBlockType","type","ret","saveStateXY","el","x","y","width","height","saveStateMode","mode","saveStateBlockDataInDom","stateType","saveStateWidthHeight","rootState","threadData","rootEl","createThreadDefDom","threadProcedureId","threadDefDom","procedureSelectBlockDom","fieldProcedureDom","createThreadProcedureDom","statesDom","log","threadProcedureDom","i","charAt","Math","random","soupLength","join","getDomChildren","ary","Array","prototype","slice","toNum","str","parseInt","translatePX2Num","replace","parent","parentNode","getAttribute","getStateXY","existStates","getLineDom","getPrevStateDom","prevStateDom","prevX","prevY","getEntityStateId","prevLineId","gap_x","gap_y","threadAry","statePageData","blocklyXml","firstState","listsDom","mutationDom","stateDefBlock","prevState","procedureDefId","outerHTML","blockly2state","xmlDom","DOMParser","parseFromString","getListStateDom","stateLogicDom","listStateDom","STATE_BLOCK","stateObj","bx","by","nodeHeight","dom2State","findOutputLinesOfStateDom","outputLines","child","lineDom","newLine","d","startState","getStartStateDomOfLine","push","extractStateAndLine","inputLines","existLineOfLineAry","getEndStateDomOfLine","updateChildrenOfState","existLineOfInputLines","childNodes","subStatesDom","call","element","existThisStateObj","stateAry2","result","getProceduresDefDom","findInputLinesOfStateDom","getStateById","childrenData","endStateDom","statement","nodeName","ary2","error","hiddenInput","createElement","select","body","removeChild","workspace2dom","xmlText","iframeDom","getElementById","win","contentWindow","Blockly","Xml","workspaceToDom","Code","workspace","domToPrettyText","autoLayout","findFirstState","virtualHeight","getVirtualHeight","lineObj","outputStates","endStateOfLine","sum","getAutoXY","doms","genGraphByLayer","g","setGraph","rankdir","edgesep","ranksep","setDefaultEdgeLabel","layer","setNode","State","getStateWidth","QBlock","getStateHeight","setEdge","setStateXYbyNode","halfStateWidth","halfStateHeight","node","setStateXYbyLayer","threadIndex","graphlib","nodeId","getState","stateData","lineMap","refresh","JSON","stringify","stateInCurrentLayer"],"mappings":"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","file":"util.min.js","sourcesContent":["const NAME_SPACE = \"https://developers.google.com/blockly/xml\";\r\nconst SOUP = '!#$%()*+,-./:;=?@[]^_`{|}~ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\nimport dagre from 'dagre'\r\nimport QBlock from './qblock.js'\r\nimport { lineCfg } from \"./graphCfg.js\";\r\nconst RANKSEP = lineCfg.rankSep\r\nvar Util = {\r\n    isDefined(a) {\r\n        return !((a === '') || (a === null) || (typeof a === 'undefined'));\r\n    },\r\n    createEl(tagName, attrs) {\r\n        var dom = document.createElementNS(NAME_SPACE, tagName);\r\n        if (typeof attrs === 'object') {\r\n            for (var key in attrs) {\r\n                dom.setAttribute(key, attrs[key]);\r\n            }\r\n        }\r\n        return dom;\r\n    },\r\n    createFieldDom(field) {\r\n        let container = this.createEl(\"field\");\r\n        container.setAttribute(\"name\", field.name);\r\n        if (field.id) {\r\n            container.setAttribute('id', field.id);\r\n        }\r\n        container.textContent = field.value;\r\n        return container;\r\n    },\r\n\r\n    /**\r\n     * 创建注释块Dom\r\n     * @param {*} comment \r\n     */\r\n    createCommentDom(comment) {\r\n        let commentDom = this.createEl('comment');\r\n        commentDom.setAttribute('pinned', comment.pinned || false);\r\n        commentDom.textContent = comment.value;\r\n        return commentDom;\r\n    },\r\n\r\n    /**\r\n     * 创建状态定义块Dom\r\n     * @param {*} state \r\n     * @param {Number} index \r\n     * @param {*} thread \r\n     */\r\n    createStateDefBlock(state, index, thread) {\r\n        var valueDom = this.createEl('value');\r\n        valueDom.setAttribute('name', 'ADD' + index);\r\n\r\n        var stateDom = this.createEl('block');\r\n        stateDom.setAttribute('type', 'state_def');\r\n        stateDom.setAttribute('id', state.stateId);\r\n        var fieldDom = this.createFieldDom({\r\n            name: 'NAME',\r\n            value: state.name\r\n        });\r\n        stateDom.appendChild(fieldDom);\r\n\r\n        //如果children不为空则说明是嵌套状态，此时需要将子状态逻辑放到“状态定义块”内部\r\n        if (state.children && state.children.length) {\r\n            //找到第一个子状态（inputAry为空）\r\n            var startChild = state.children.find(item => {\r\n                return (!item.inputAry || item.inputAry.length === 0);\r\n            })\r\n            var childrenDom = Util.state2dom(startChild, thread);\r\n            var statementDom = this.createEl(\"statement\");\r\n            statementDom.setAttribute(\"name\", 'STACK');\r\n            statementDom.appendChild(childrenDom);\r\n            stateDom.appendChild(statementDom);\r\n\r\n            // valueDom.appendChild(childrenDom);\r\n        }\r\n\r\n        valueDom.appendChild(stateDom);\r\n\r\n        return valueDom;\r\n    },\r\n\r\n    /**\r\n     * 创建连线Dom以及其连接的状态块的Dom - 触发事件描述采用通用的if-else结构 controls_if \r\n     * ！此方法没有用到，代码暂时先放着\r\n     * @param {*} state \r\n     * @param {*} thread \r\n     */\r\n    createNextStatesDom(state, thread) {\r\n        let nextDom, outputDom;\r\n\r\n        if (state.outputAry.length) {\r\n            nextDom = this.createEl(\"next\");\r\n            outputDom = this.createEl(\"block\");\r\n            outputDom.setAttribute(\"type\", \"controls_if\");\r\n            if (state.outputAry.length > 1) {\r\n                let mutation = this.createEl(\"mutation\");\r\n                mutation.setAttribute(\"elseif\", state.outputAry.length - 1);\r\n                outputDom.appendChild(mutation);\r\n            }\r\n            state.outputAry.forEach((outputItem, index) => {\r\n                let outputStateDom;\r\n                outputStateDom = this.createEl(\"statement\");\r\n                outputStateDom.setAttribute(\"name\", `DO${index}`);\r\n                outputStateDom.setAttribute(\"id\", `${outputItem.lineId}`);\r\n                //outputAry里面只存放了lineId 所以我们需要做以下事情：\r\n                //1 根据lineId找到对应的line数据\r\n                //2 根据line里面的endState的stateId找到对应的state数据\r\n                let line = thread.lineAry.find((item) => {\r\n                    return item.lineId === outputItem.lineId;\r\n                });\r\n                if (line) {\r\n                    /* let state = thread.stateAry.find((item) => {\r\n                        return item.stateId === line.endState.stateId;\r\n                    }); */\r\n                    let state = store.getStateImplement(line.endState.stateId, thread.stateAry);\r\n                    if (state) {\r\n                        outputStateDom.appendChild(Util.state2dom(state, thread));\r\n                    } else {\r\n                        console.error(\"data error -^- \");\r\n                    }\r\n                }\r\n                if (outputStateDom) {\r\n                    outputDom.appendChild(outputStateDom);\r\n                }\r\n            });\r\n            nextDom.appendChild(outputDom);\r\n        }\r\n        return nextDom;\r\n    },\r\n\r\n    /**\r\n     * 创建连线Dom以及其连接的状态块的Dom - 触发事件描述采用独立的结构 state_trigger_event\r\n     * @param {*} state \r\n     * @param {*} thread \r\n     */\r\n    createNextStatesDom2(state, thread) {\r\n        let triggerEventDom;\r\n        let nextStatesDom;\r\n        if (state.outputAry.length) {\r\n            /* if (state.outputAry.length > 1) {\r\n                let mutation = this.createEl(\"mutation\");\r\n                mutation.setAttribute(\"elseif\", state.outputAry.length - 1);\r\n                triggerEventDom.appendChild(mutation);\r\n            } */\r\n            let parentDom;\r\n\r\n            state.outputAry.forEach((outputItem, index) => {\r\n                let nextDom = this.createEl(\"next\");\r\n                if (!nextStatesDom) {\r\n                    nextStatesDom = nextDom;\r\n                }\r\n                triggerEventDom = this.createEl(\"block\");\r\n                triggerEventDom.setAttribute(\"type\", \"state_trigger_event\");\r\n                triggerEventDom.setAttribute(\"id\", outputItem.lineId);\r\n                // triggerEventDom.setAttribute(\"start_state\", JSON.stringify(state)); // TODO 按需简化存储的start_state数据\r\n\r\n                let triggerEventStatement;\r\n                triggerEventStatement = this.createEl(\"statement\");\r\n                triggerEventStatement.setAttribute(\"name\", `DO0`);\r\n                // triggerEventStatement.setAttribute(\"id\", `${outputItem.lineId}`);\r\n                //outputAry里面只存放了lineId 所以我们需要做以下事情：\r\n                //1 根据lineId找到对应的line数据\r\n                //2 根据line里面的endState的stateId找到对应的state数据\r\n                let line = thread.lineAry.find((item) => {\r\n                    return item.lineId === outputItem.lineId;\r\n                });\r\n                if (line) {\r\n                    Util.saveLineData(triggerEventDom, line);\r\n                    if (line.desc) {\r\n                        let commentDom = this.createCommentDom({\r\n                            value: line.desc\r\n                        });\r\n                        triggerEventDom.appendChild(commentDom);\r\n                    }\r\n                    let state = store.getStateImplement(line.endState.stateId, thread.stateAry);\r\n                    if (state) {\r\n                        // triggerEventDom.setAttribute(\"end_state\", JSON.stringify(state)); // TODO 按需简化存储的end_state数据\r\n                        triggerEventStatement.appendChild(Util.state2dom(state, thread));\r\n                    } else {\r\n                        console.error(\"data error -^- \");\r\n                    }\r\n                }\r\n                if (triggerEventStatement) {\r\n                    triggerEventDom.appendChild(triggerEventStatement);\r\n                }\r\n                nextDom.appendChild(triggerEventDom);\r\n                if (parentDom) {\r\n                    parentDom.appendChild(nextDom);\r\n                }\r\n                parentDom = triggerEventDom;\r\n\r\n            });\r\n        }\r\n        return nextStatesDom;\r\n    },\r\n\r\n    genBlockType(type) {\r\n        let ret = \"state_opr\";\r\n        if (type === \"loopDiv\") {\r\n            ret = \"controls_whileUntil\";\r\n        }\r\n        return ret;\r\n    },\r\n    /**\r\n     * 保存状态块的位置信息到Dom中\r\n     * @param {*} el 新建的和状态对应的Dom节点\r\n     * @param {*} state 当前操作的状态\r\n     */\r\n    saveStateXY(el, state) {\r\n        el.setAttribute(\"sx\", state.x);\r\n        el.setAttribute(\"sy\", state.y);\r\n    },\r\n    saveStateWidthHeight(el, state) {\r\n        el.setAttribute(\"s_width\", state.width);\r\n        el.setAttribute(\"s_height\", state.height);\r\n    },\r\n    saveStateMode(el, state) {\r\n        el.setAttribute(\"mode\", state.mode);\r\n    },\r\n    /**\r\n     * 保存状态块的数据到Dom中\r\n     * @param {*} el 新建的和状态对应的Dom节点\r\n     * @param {*} state 当前操作的状态\r\n     */\r\n    saveStateBlockDataInDom(el, state) {\r\n        console.log(state);\r\n        switch (state.stateType) {\r\n            case 'stateDiv': //状态执行\r\n                this.saveStateXY(el, state);\r\n                this.saveStateWidthHeight(el, state);\r\n                this.saveStateMode(el, state);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    },\r\n    /**\r\n     * 保存连线数据到Dom\r\n     * @param {*} el 新建的和状态对应的Dom节点\r\n     * @param {*} state 当前操作的状态\r\n     */\r\n    saveLineData(el, line) {\r\n        el.setAttribute(\"s_type\", line.type);\r\n    },\r\n    /**\r\n     * 将一个状态块转为Dom节点\r\n     * @param {*} rootState \r\n     * @param {*} threadData \r\n     */\r\n    state2dom(rootState, threadData) {\r\n        let rootEl = this.createEl(\"block\");\r\n        // rootEl.setAttribute(\"id\", rootState.stateId);\r\n        rootEl.setAttribute(\"type\", this.genBlockType(rootState.stateType));\r\n        this.saveStateBlockDataInDom(rootEl, rootState);\r\n\r\n\r\n        let fieldDom = this.createFieldDom({\r\n            id: rootState.stateId,\r\n            name: \"field_state\",\r\n            value: rootState.name,\r\n        });\r\n        rootEl.appendChild(fieldDom);\r\n\r\n        let nextStatesDom = this.createNextStatesDom2(rootState, threadData);\r\n        if (nextStatesDom) {\r\n            rootEl.appendChild(nextStatesDom);\r\n        }\r\n        return rootEl;\r\n    },\r\n    /**\r\n     * 创建线程定义块的Dom\r\n     * @param {*} thread \r\n     * @param {*} threadProcedureId 线程的函数id\r\n     */\r\n    createThreadDefDom(thread, threadProcedureId) {\r\n        /* <block type=\"thread_def\" id=\"ISJ:}kp8l):hy~wr5{x5\" x=\"-187\" y=\"-87\">\r\n            <field name=\"NAME\">thread</field>\r\n            <statement name=\"CALLBACK\">\r\n                <block type=\"procedure_select\" id=\"IK`|)2n6nVKsvFJ4VlXC\">\r\n                    <field name=\"field_procedure\" id=\"aewyJ+/)D`VHlrJ$BgFT\">thread_p</field>\r\n                </block>\r\n            </statement>\r\n        </block> */\r\n        // const procedureDefId = this.genUid();\r\n        let threadDefDom = this.createEl('block', {\r\n            type: \"thread_def\"\r\n        });\r\n        let fieldDom = this.createEl('field', {\r\n            name: 'NAME',\r\n            textContent: thread.name\r\n        });\r\n        fieldDom.textContent = thread.name;\r\n\r\n        let statementDom = this.createEl('statement', {\r\n            name: 'CALLBACK'\r\n        });\r\n        let procedureSelectBlockDom = this.createEl('block', {\r\n            type: 'procedure_select'\r\n        });\r\n        let fieldProcedureDom = this.createEl('field', {\r\n            name: 'field_procedure',\r\n            id: threadProcedureId,\r\n        });\r\n        fieldProcedureDom.textContent = thread.name + \"_function\";\r\n        procedureSelectBlockDom.appendChild(fieldProcedureDom);\r\n        statementDom.appendChild(procedureSelectBlockDom);\r\n        threadDefDom.appendChild(fieldDom);\r\n        threadDefDom.appendChild(statementDom);\r\n\r\n        return threadDefDom;\r\n    },\r\n    /**\r\n     * 创建线程函数定义块的Dom\r\n     * @param {*} thread \r\n     * @param {*} threadProcedureId \r\n     * @param {*} statesDom 所有连接的状态\r\n     */\r\n    createThreadProcedureDom(thread, threadProcedureId, statesDom) {\r\n        console.log('---thread.name---' + thread.name);\r\n        /* <block type=\"procedures_defnoreturn\" id=\"aewyJ+/)D`VHlrJ$BgFT\" x=\"463\" y=\"-113\">\r\n            <field name=\"NAME\">thread_p</field>\r\n            <comment pinned=\"false\" h=\"80\" w=\"160\">Describe this function...</comment>\r\n            <statement name=\"STACK\">\r\n            </statement>\r\n        </block> */\r\n        let threadProcedureDom = this.createEl('block', {\r\n            type: 'procedures_defnoreturn',\r\n            id: threadProcedureId\r\n        });\r\n        let fieldDom = this.createEl('field', {\r\n            name: 'NAME',\r\n\r\n        });\r\n        fieldDom.textContent = thread.name + \"_function\";\r\n        let statementDom = this.createEl('statement', {\r\n            name: 'STACK'\r\n        });\r\n        statementDom.appendChild(statesDom);\r\n        threadProcedureDom.appendChild(fieldDom);\r\n        threadProcedureDom.appendChild(statementDom);\r\n        return threadProcedureDom;\r\n    },\r\n    /**\r\n     * 获取唯一id，同google blockly产生唯一id的方法\r\n     */\r\n    genUid() {\r\n        var length = 20;\r\n        var soupLength = SOUP.length;\r\n        var id = [];\r\n        for (var i = 0; i < length; i++) {\r\n            id[i] = SOUP.charAt(Math.random() * soupLength);\r\n        }\r\n        return id.join('');\r\n    },\r\n    getDomChildren(dom) {\r\n        var ary = [];\r\n        if (dom.children) {\r\n            ary = Array.prototype.slice.call(dom.children);\r\n        }\r\n        return ary;\r\n    },\r\n    toNum(str) {\r\n        return parseInt(str, 10);\r\n    },\r\n    translatePX2Num(str) {\r\n        if (/px/.test(str)) {\r\n            str = str.replace(\"px\", \"\");\r\n        }\r\n        return +str;\r\n    },\r\n    getPrevStateDom(dom) {\r\n        var parent = dom.parentNode;\r\n        if (parent) {\r\n            if (parent.getAttribute('type') === 'state_opr') {\r\n                return parent;\r\n            } else {\r\n                parent = this.getPrevStateDom(parent);\r\n            }\r\n        }\r\n        return parent;\r\n    },\r\n    getStateXY(stateDom, existStates) {\r\n        /**\r\n         * 1.获取这个Dom节点的sx, sy值，如果存在就使用这个值，如果不存在，则获取上一个状态的sx, sy值，然后查看这个stateDom处于上一个状态的outputAry中的第几个元素，假设是第3个，则\r\n         * XY的值为：  x: targetDom.sx + gap_x(水平方向间隔)  y: targetDom.sx + index * gap_y\r\n         */\r\n        const gap_x = 150;\r\n        const gap_y = 100;\r\n        let x = this.toNum(stateDom.getAttribute('sx'));\r\n        let y = this.toNum(stateDom.getAttribute('sy'));\r\n\r\n        function getLineDom(dom) {\r\n            var parent = dom.parentNode;\r\n            if (parent) {\r\n                if (parent.getAttribute && parent.getAttribute('type') === 'state_trigger_event') {\r\n                    return parent;\r\n                } else {\r\n                    parent = getLineDom(parent);\r\n                }\r\n            }\r\n            return parent;\r\n        }\r\n\r\n        let prevLineId = getLineDom(stateDom) && getLineDom(stateDom).getAttribute('id');\r\n        // 正常拼接的情况下这个prevLineId是一定存在的\r\n        if (!x || x === 'undefined') { // x是未定义的则 y也是未定义的\r\n            let prevStateDom = Util.getPrevStateDom(stateDom);\r\n            if (!prevStateDom) {\r\n                return {\r\n                    x: 0,\r\n                    y: 0\r\n                }\r\n            }\r\n            let prevX = this.toNum(prevStateDom.getAttribute('sx'));\r\n            let prevY = this.toNum(prevStateDom.getAttribute('sy'));\r\n            if (!prevX || prevX === 'undefined') {\r\n                prevX = 0;\r\n                prevY = 0;\r\n            }\r\n            x = prevX + gap_x;\r\n            var index = 0;\r\n            var prevState = existStates.find(item => {\r\n                return item.stateId === Util.getEntityStateId(prevStateDom);\r\n            })\r\n\r\n            prevState.outputAry.forEach((item, i) => {\r\n                if (item.lineId === prevLineId) {\r\n                    index = i;\r\n                    return false; // return false 结束forEach\r\n                }\r\n            })\r\n            y = prevY + index * gap_y;\r\n        }\r\n        return {\r\n            x: x,\r\n            y: y\r\n        }\r\n    },\r\n    getEntityStateId(stateDom) {\r\n        return stateDom.children[0].getAttribute('id');\r\n    },\r\n    /**\r\n     * 将所有线程的数据（包括了状态和连线）转为Blockly可识别的xml数据\r\n     * @param {*} threadAry 线程数据\r\n     */\r\n    state2blockly(threadAry) {\r\n        /**\r\n         * 1.找到线程中有开始标记的根状态\r\n         * 2.遍历根状态的output，生成特殊的if-else if 结构，注意：默认不采用else\r\n         *\r\n         */\r\n        let statePageData = threadAry;\r\n\r\n        let blocklyXml = Util.createEl(\"xml\");\r\n        blocklyXml.setAttribute(\r\n            \"xmlns\",\r\n            \"https://developers.google.com/blockly/xml\"\r\n        );\r\n\r\n        statePageData.forEach((thread, index) => {\r\n            let firstState = thread.stateAry[0];\r\n            let listsDom = Util.createEl('block');\r\n            listsDom.setAttribute('type', 'lists_state');\r\n            listsDom.setAttribute('x', 300 + (700 * index));\r\n            listsDom.setAttribute('y', 150);\r\n\r\n            let mutationDom = Util.createEl('mutation');\r\n            mutationDom.setAttribute('items', thread.stateAry.length);\r\n            listsDom.appendChild(mutationDom);\r\n\r\n            thread.stateAry.forEach((state, i) => {\r\n                let stateDefBlock = Util.createStateDefBlock(state, i, thread);\r\n                listsDom.appendChild(stateDefBlock);\r\n                // blocklyXml.appendChild(stateDefBlock);\r\n            })\r\n            var statesDom = Util.state2dom(firstState, thread);\r\n            const procedureDefId = Util.genUid();\r\n            let threadDefDom = Util.createThreadDefDom(thread, procedureDefId);\r\n            let threadProcedureDom = Util.createThreadProcedureDom(thread, procedureDefId, statesDom);\r\n            if (Util.isDefined(thread.x)) {\r\n                threadDefDom.setAttribute('x', thread.x);\r\n            } else {\r\n                threadDefDom.setAttribute('x', index * 700);\r\n            }\r\n            if (Util.isDefined(thread.y)) {\r\n                threadDefDom.setAttribute('y', thread.y);\r\n            } else {\r\n                threadDefDom.setAttribute('y', 10);\r\n            }\r\n            threadProcedureDom.setAttribute('x', index * 700);\r\n            threadProcedureDom.setAttribute('y', 200);\r\n            //这个添加的顺序很重要！！！\r\n            blocklyXml.appendChild(listsDom);\r\n            blocklyXml.appendChild(threadProcedureDom);\r\n            blocklyXml.appendChild(threadDefDom);\r\n        });\r\n\r\n        return blocklyXml.outerHTML;\r\n    },\r\n    /**\r\n     * 将Blockly数据转为状态图可识别的数据\r\n     */\r\n    blockly2state(xmlDom) {\r\n        if (typeof xmlDom === 'string') {\r\n            xmlDom = new DOMParser().parseFromString(xmlDom, 'text/xml');\r\n        }\r\n\r\n        var stateLogicDom = Util.getProceduresDefDom(xmlDom);\r\n        var listStateDom = Util.getListStateDom(xmlDom);\r\n\r\n        let stateAry = []; //所有的状态数据集合\r\n        let lineAry = []; //所有的连线数据集合\r\n        Util.extractStateAndLine(stateLogicDom, stateAry, lineAry);\r\n\r\n        Util.updateChildrenOfState(stateAry, listStateDom, lineAry);\r\n        return {\r\n            stateAry: stateAry,\r\n            lineAry: lineAry\r\n        }\r\n    },\r\n    extractStateAndLine(stateDom, stateAry, lineAry) {\r\n        /* <block type=\"state_opr\" id=\"0eRjWo`*LW!O%5)$3!bj\" sx=\"394\" sy=\"201\">\r\n            <field name=\"field_state\" id=\"state-1607658086399\">状态描述0</field>\r\n        </block> */\r\n        const STATE_BLOCK = 'state_opr';\r\n        if (stateDom && stateDom.tagName === 'block' && stateDom.getAttribute('type') === STATE_BLOCK) {\r\n            let stateId = Util.getEntityStateId(stateDom);\r\n            let existThisStateObj = false;\r\n            // 这个stateId有可能已经存在 看一下xml数据就能明白了\r\n            let stateObj = stateAry.find(item => {\r\n                return item.stateId === stateId;\r\n            });\r\n\r\n            if (!stateObj) {\r\n                stateObj = {\r\n                    stateId: Util.getEntityStateId(stateDom), //!!!这里的id不是block.state_opr的 id 哟，而是它下面的field.field_state的id\r\n                    stateType: stateDom.getAttribute('type') === STATE_BLOCK ? 'stateDiv' : 'loopDiv',\r\n                    bx: parseInt(stateDom.getAttribute('x'), 10), // blockly中与此对应的图形块的x\r\n                    by: parseInt(stateDom.getAttribute('y'), 10), // blockly中与此对应的图形块的y\r\n                    x: Util.getStateXY(stateDom, stateAry).x, //stateDom.getAttribute('sx'),\r\n                    y: Util.getStateXY(stateDom, stateAry).y,\r\n                    width: stateDom.getAttribute('s_width') || '76px',\r\n                    height: stateDom.getAttribute('s_height') || '40px',\r\n                    // virtualHeight: Util.getVirtualHeight(outputAry), //TODO 开始状态为这个stateDom的所有状态高度之和\r\n                    name: stateDom.children[0].textContent,\r\n                    mode: stateDom.getAttribute('mode') || 'default',\r\n                    inputAry: [],\r\n                    outputAry: [],\r\n                    children: [],\r\n                    parent: null,\r\n                    nodeHeight: 0 // 如果该节点有2个分支，且分支是叶子节点，则这个节点的nodeHeight = 2; 总之，nodeHeight = 各分支nodeHeight之和 - 这个参数为自动布局所用\r\n                }\r\n                \r\n            }else{\r\n                //如果stateAry里面已经有了这个stateObj且stateObj.outputAry非空  则说明分析过了，不用再调用findOutputLinesOfStateDom进行分析\r\n                /* if (!stateObj.outputAry.length){\r\n                    findOutputLinesOfStateDom(stateDom, stateObj.outputAry);\r\n                }\r\n                if (!stateObj.inputAry.length) {\r\n                    findInputLinesOfStateDom(stateDom, stateObj.inputAry);\r\n                }    */             \r\n                \r\n            }\r\n            findOutputLinesOfStateDom(stateDom, stateObj.outputAry);\r\n            findInputLinesOfStateDom(stateDom, stateObj.inputAry);\r\n\r\n            function dom2State(dom) {\r\n                let stateId = dom.getAttribute('id');\r\n                if (dom.getAttribute('type') === STATE_BLOCK) {\r\n                    stateId = Util.getEntityStateId(dom);\r\n                }\r\n                return {\r\n                    stateId: stateId,\r\n                    stateType: STATE_BLOCK\r\n                };\r\n            }\r\n\r\n            function findOutputLinesOfStateDom(stateDom, outputLines) {\r\n                // 如果stateDom中有next节点 且 next节点的children中有block.state_trigger_event 则将这个block.state_trigger_event push 到 outputLines\r\n                // 然后将这个block.state_trigger_event作为新的stateDom，查找其包含的block.state_trigger_event 这样遍历查找所有的block.state_trigger_event就找到了outputLines\r\n                let children = Util.getDomChildren(stateDom);\r\n                children.forEach(child => {\r\n                    if (child.tagName === 'next') { //所有next节点的children都只有1个\r\n                        if (child.children && child.children[0] && child.children[0].getAttribute('type') === 'state_trigger_event') {\r\n                            let lineDom = child.children[0];\r\n                            let newLine = {\r\n                                lineId: lineDom.getAttribute('id'),\r\n                                d: lineDom.getAttribute('d'),\r\n                                type: lineDom.getAttribute('s_type'),\r\n                                startState: dom2State(Util.getStartStateDomOfLine(lineDom)),\r\n                                endState: dom2State(Util.getEndStateDomOfLine(lineDom)),\r\n                            };\r\n                            let existLineOfOutputLines = outputLines.find(item => {\r\n                                return (item.lineId === lineDom.getAttribute('id')) || ((item.startState.stateId === newLine.startState.stateId) && (item.endState.stateId === newLine.endState.stateId))\r\n                            })\r\n                            if (!existLineOfOutputLines) {\r\n                                outputLines.push(newLine);\r\n                            }\r\n\r\n                            let existLineOfLineAry = lineAry.find(item => {\r\n                                return (item.lineId === lineDom.getAttribute('id')) || ((item.startState.stateId === newLine.startState.stateId) && (item.endState.stateId === newLine.endState.stateId) )\r\n                            })\r\n                            if (!existLineOfLineAry) {\r\n                                lineAry.push(newLine);\r\n                            }\r\n                            findOutputLinesOfStateDom(lineDom, outputLines);\r\n                        }\r\n                    }\r\n                })\r\n                return outputLines;\r\n            }\r\n\r\n            function findInputLinesOfStateDom(stateDom, inputLines) {\r\n                //逐级往上寻找type === 'state_opr'的块即inputLines    //  block.state_trigger_event > statement > block.state_opr\r\n                let lineDom = stateDom.parentNode && stateDom.parentNode.parentNode;\r\n                if (lineDom && lineDom.getAttribute('type') === 'state_trigger_event') {\r\n                    let newLine = {\r\n                        lineId: lineDom.getAttribute('id'),\r\n                        d: lineDom.getAttribute('d'),\r\n                        type: lineDom.getAttribute('s_type'),\r\n                        startState: dom2State(Util.getPrevStateDom(lineDom)),\r\n                        endState: dom2State(Util.getEndStateDomOfLine(lineDom))\r\n                    };\r\n                    let existLineOfInputLines = inputLines.find(item => {\r\n                        return (item.lineId === newLine.lineId) || ((item.startState.stateId === newLine.startState.stateId) && (item.endState.stateId === newLine.endState.stateId))\r\n                    })\r\n                    if (!existLineOfInputLines) {\r\n                        inputLines.push(newLine);\r\n                    }\r\n\r\n                    let existLineOfLineAry = lineAry.find(item => {\r\n                        return (item.lineId === lineDom.getAttribute('id')) || ((item.startState.stateId === newLine.startState.stateId) && (item.endState.stateId === newLine.endState.stateId))\r\n                    })\r\n                    if (!existLineOfLineAry) {\r\n                        lineAry.push(newLine);\r\n                    }\r\n                }\r\n                return inputLines;\r\n            }\r\n\r\n            let existStateInStateAry = stateAry.find(state => {\r\n                return state.stateId === stateObj.stateId;\r\n            })\r\n            if (!existStateInStateAry) {\r\n                stateAry.push(stateObj);\r\n            }\r\n        }\r\n\r\n        if (stateDom && stateDom.children && stateDom.children.length) {\r\n            for (let j = 0; j < stateDom.children.length; j++) {\r\n                let child = stateDom.children[j];\r\n                Util.extractStateAndLine(child, stateAry, lineAry);\r\n            }\r\n        }\r\n    },\r\n    updateChildrenOfState(stateAry, xmlDom, lineAry) {\r\n        if (xmlDom && xmlDom.tagName === 'block' && xmlDom.getAttribute('type') === 'state_def') {\r\n            if (xmlDom.childNodes) {\r\n                var ary = Array.prototype.slice.call(xmlDom.childNodes);\r\n                var subStatesDom = ary.find(element => {\r\n                    return element.tagName === 'statement'\r\n                });\r\n                if (subStatesDom) {\r\n                    var stateAry2 = [];\r\n                    var childrenData = Util.extractStateAndLine(subStatesDom, stateAry2, lineAry);\r\n                    var state = Util.getStateById(stateAry, xmlDom.getAttribute('id'));\r\n                    if (state) {\r\n                        state.children = stateAry2;\r\n                        stateAry2.forEach(item => {\r\n                            item.parent = state.stateId;\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (xmlDom) {\r\n                var ary2 = Array.prototype.slice.call(xmlDom.childNodes);\r\n                ary2.forEach(item => {\r\n                    Util.updateChildrenOfState(stateAry, item, lineAry);\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n    },\r\n    getProceduresDefDom(dom) {\r\n        var result;\r\n        if (dom.tagName === 'block' && dom.getAttribute('type') === 'procedures_defnoreturn') {\r\n            result = dom;\r\n        } else {\r\n            var children = Array.prototype.slice.call(dom.childNodes);\r\n            for (var i = 0; i < children.length; i++) {\r\n                result = Util.getProceduresDefDom(children[i]);\r\n                if (result) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    },\r\n    getListStateDom(dom) {\r\n        var result;\r\n        if (dom && dom.tagName && dom.tagName === 'block' && dom.getAttribute('type') === 'lists_state') {\r\n            result = dom;\r\n        } else {\r\n            var children = Array.prototype.slice.call(dom.childNodes);\r\n            for (var i = 0; i < children.length; i++) {\r\n                result = Util.getListStateDom(children[i]);\r\n                if (result) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    },\r\n    getStateById(stateAry, stateId) {\r\n        var item, result;\r\n        for (var i = 0; i < stateAry.length; i++) {\r\n            item = stateAry[i];\r\n            if (item.stateId === stateId) {\r\n                return item;\r\n            } else {\r\n                if (item.children && item.children.length) {\r\n                    result = Util.getStateById(item.children, stateId);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    },\r\n    getStartStateDomOfLine(lineDom) {\r\n        return this.getPrevStateDom(lineDom);\r\n    },\r\n    getEndStateDomOfLine(lineDom) {\r\n        let children = Array.prototype.slice.call(lineDom.childNodes);\r\n        let statement = children.find(dom => {\r\n            return dom.nodeName === 'statement'\r\n        })\r\n        let statementChildren = Array.prototype.slice.call(statement.childNodes);\r\n        let endStateDom = statementChildren.find(dom => {\r\n            return dom.nodeName === 'block'\r\n        })\r\n        if (!endStateDom) {\r\n            console.error('数据错误：触发事件连线没有连接正确的状态');\r\n        }\r\n        return endStateDom;\r\n    },\r\n    /**\r\n     * 将Blockly数据复制到剪切板 - 调试时用\r\n     * @param {*} blocklyXml \r\n     */\r\n    copyBlocklyXml2Clipboard(blocklyXml) {\r\n        // window.stateDataXml = blocklyXml.outerHTML;\r\n        let hiddenInput = document.createElement(\"input\");\r\n        hiddenInput.setAttribute(\"type\", \"text\");\r\n        hiddenInput.setAttribute(\"value\", blocklyXml);\r\n        hiddenInput.setAttribute(\"style\", \"height: 0; overflow: hidden;\");\r\n        document.body.appendChild(hiddenInput);\r\n        //hiddenInput.focus();\r\n        hiddenInput.select();\r\n        document.execCommand(\"copy\");\r\n        document.body.removeChild(hiddenInput);\r\n    },\r\n    workspace2dom() {\r\n        var xmlText = '';\r\n        var iframeDom = document.getElementById('blocklyIframe');\r\n        if (iframeDom) {\r\n            var win = iframeDom.contentWindow;\r\n            var xmlDom = win.Blockly.Xml.workspaceToDom(win.Code.workspace);\r\n            xmlText = win.Blockly.Xml.domToPrettyText(xmlDom);\r\n\r\n        } else {\r\n            console.error('当前页面没有嵌入blockly');\r\n        }\r\n        return xmlText;\r\n    },\r\n    /**\r\n     * 在自动布局前重置所有状态的x,y坐标\r\n     */\r\n    resetAllStateData(thread) {\r\n        if (thread) {\r\n            thread.stateAry.forEach(state => {\r\n                state.x = 0;\r\n                state.y = 0;\r\n            })\r\n        }\r\n    },\r\n    autoLayout(thread) {\r\n        if (thread) {\r\n            let firstState = Util.findFirstState(thread.stateAry);\r\n            thread.stateAry.forEach(state => {\r\n                let prevState; //TODO 当前状态的前一个兄弟节点\r\n                state.virtualHeight = Util.getVirtualHeight(state);\r\n                state.y = prevState.y + prevState.virtualHeight;\r\n            })\r\n        }\r\n    },\r\n    /**\r\n     * 找到“开始状态”\r\n     */\r\n    findFirstState(stateAry) {\r\n        return stateAry[0]; //TODO 后续根据特定标记查找\r\n    },\r\n    getVirtualHeight(state) {\r\n        let outputStates = [];\r\n        state.outputAry.forEach(line => {\r\n            let lineObj = thread.lineAry.find(item => {\r\n                return item.lineId === line.lineId;\r\n            })\r\n            let endStateOfLine = thread.stateAry.find(item => {\r\n                return item.stateId === lineObj.endState.stateId;\r\n            })\r\n            outputStates.push(endStateOfLine);\r\n        })\r\n\r\n        let sum = 0;\r\n        outputStates.forEach(state => {\r\n            if (!state.virtualHeight) {\r\n                state.virtualHeight = Util.getVirtualHeight(state);\r\n                sum += state.virtualHeight;\r\n            }\r\n        })\r\n        return sum;\r\n    },\r\n    getAutoXY(state) {\r\n        //x,y是同时设置的，所以只需判断其中一个即可\r\n        if (state.y) {\r\n            return {\r\n                x: state.x,\r\n                y: state.y\r\n            }\r\n        } else {\r\n            state.y = prevState.y + prevState.virtualHeight;\r\n        }\r\n    },\r\n    getDomByStateId(stateId) {\r\n        let doms = document.getElementsByClassName('state-wrap');\r\n        return Array.prototype.slice.call(doms).find(item => {\r\n            return item.getAttribute('stateid') === stateId;\r\n        })\r\n    },\r\n    /**\r\n     * 根据当前所在的层级生成用于自动布局的graphlib图\r\n     * NOTE: 当前寻找state的代码为hardcode，需要讨论如何在statePage内获取当前线程的Index后修改\r\n     * @param {*} layer \r\n     * @param {*} lineAry \r\n     * \r\n     */\r\n    genGraphByLayer(threadIndex, layer, lineAry) {\r\n        var g = new dagre.graphlib.Graph({\r\n            //multigraph: true,\r\n        });\r\n        g.setGraph({\r\n            rankdir: 'LR',\r\n            align: 'UL',\r\n            edgesep: 0,\r\n            ranksep: RANKSEP,\r\n        });\r\n        g.setDefaultEdgeLabel(function () {\r\n            return {};\r\n        });\r\n        let stateInCurrentLayer\r\n        //获取处于当前所在层级内的状态\r\n        if (layer.stateAry) {\r\n            stateInCurrentLayer = layer.stateAry\r\n        } else {\r\n            stateInCurrentLayer = layer.children\r\n        }\r\n        stateInCurrentLayer.forEach(state => {\r\n            g.setNode(state.stateId, {\r\n                label: state.name,\r\n                width: QBlock.State.getStateWidth(state),\r\n                height: QBlock.State.getStateHeight(state)\r\n            });\r\n            /*\r\n            state.inputAry.forEach(line => {\r\n                let lineObj = lineAry.find(item => {\r\n                    return item.lineId === line.lineId\r\n                })\r\n                let startState = store.getState(threadIndex, lineObj.startState.stateId)\r\n                \r\n                //处理可能存在的从循环状态内连接至循环状态外的连线，若存在这种连线，则将连线起始点模拟到与被连入状态处在同一层级的父状态上\r\n                if (startState.parent !== state.parent) {\r\n                    while (startState.parent !== state.parent) {\r\n                        if (startState.parent === null && startState.parent !== state.parent) {\r\n                            return\r\n                        } else {\r\n                            startState = store.getState(threadIndex, startState.parent)\r\n                        }\r\n                    }\r\n                    g.setEdge(startState.stateId, state.stateId, {\r\n                        label: line.lineId\r\n                    })\r\n                }\r\n            })*/\r\n\r\n            state.outputAry.forEach(line => {\r\n                let lineObj = lineAry.find(item => {\r\n                    return item.lineId === line.lineId;\r\n                })\r\n                let endState = store.getState(threadIndex, lineObj.endState.stateId)\r\n                /*\r\n                if (endState.parent !== state.parent) {\r\n                    //处理可能存在的从循环状态外连接至循环状态内的连线，若存在这种连线，则将连线结束点模拟到与被连入状态处在同一层级的父状态上\r\n                    while (endState.parent !== state.parent) {\r\n                        if (endState.parent === null && endState.parent !== state.parent) {\r\n                            return\r\n                        } else {\r\n                            endState = store.getState(threadIndex, endState.parent)\r\n                        }\r\n                    }\r\n                }*/\r\n                // g.setEdge(state.stateId, endState.stateId, line.lineId, lineObj.desc); //这种设置方式会报错 可能是dagre对graphlib的封装接口未同步\r\n                g.setEdge(state.stateId, endState.stateId, {\r\n                    label: line.lineId\r\n                });\r\n            })\r\n        })\r\n        return g\r\n    },\r\n    setStateXYbyNode(state, node) {\r\n        let halfStateWidth = QBlock.State.getStateWidth(state) / 2\r\n        let halfStateHeight = QBlock.State.getStateHeight(state) / 2\r\n        state.x = node.x - halfStateWidth + 20\r\n        state.y = node.y - halfStateHeight + 20\r\n        return\r\n    },\r\n    setStateXYbyLayer(threadIndex, g, layer) {\r\n        let stateInCurrentLayer\r\n        if (layer.stateAry) {\r\n            stateInCurrentLayer = layer.stateAry\r\n        } else {\r\n            stateInCurrentLayer = layer.children\r\n        }\r\n        g.nodes().forEach(function (nodeId) {\r\n            let node = g.node(nodeId);\r\n            let state = store.getState(threadIndex, nodeId)\r\n            if (state) {\r\n                Util.setStateXYbyNode(state, node) //重设状态位置信息\r\n                if (state.inputAry && state.inputAry.length) {\r\n                    state.inputAry.forEach(item => {\r\n                        store.stateData.lineMap[item.lineId].refresh();\r\n                    })\r\n                }\r\n            }\r\n            console.log(\"Node \" + nodeId + \": \" + JSON.stringify(g.node(nodeId)));\r\n        });\r\n    },\r\n    testLayout(threadIndex, thread, lineAry) {\r\n        //处理在自动布局前被用户所调整过的连线\r\n        let g = this.genGraphByLayer(threadIndex, thread, lineAry)\r\n        dagre.layout(g); //布局分析\r\n        this.setStateXYbyLayer(threadIndex, g, thread)\r\n    },\r\n}\r\nexport default Util;"]}