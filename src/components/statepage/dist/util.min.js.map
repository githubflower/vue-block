{"version":3,"sources":["util.js"],"names":["NAME_SPACE","SOUP","Util","isDefined","a","attrs","dom","document","createElementNS","tagName","_typeof","key","setAttribute","createFieldDom","container","createEl","field","name","id","textContent","value","commentDom","this","comment","pinned","createStateDefBlock","state","index","valueDom","createCommentDom","stateDom","stateId","fieldDom","appendChild","createNextStatesDom","thread","nextDom","_this","length","outputAry","outputDom","mutation","outputItem","outputStateDom","lineId","line","lineAry","find","item","forEach","stateAry","state2dom","error","createNextStatesDom2","triggerEventDom","_this2","triggerEventStatement","nextStatesDom","desc","endState","parentDom","ret","console","rootState","threadData","rootEl","stateType","genBlockType","fieldX","threadProcedureId","type","statementDom","procedureSelectBlockDom","fieldProcedureDom","threadDefDom","statesDom","log","createThreadProcedureDom","threadProcedureDom","genUid","soupLength","i","charAt","Math","random","state2blockly","statePageData","threadAry","blocklyXml","firstState","listsDom","stateDefBlock","mutationDom","procedureDefId","x","createThreadDefDom","y","copyBlocklyXml2Clipboard","outerHTML","blockly2state","createElement","hiddenInput","execCommand","focus","removeChild"],"mappings":"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","file":"util.min.js","sourcesContent":["const NAME_SPACE = \"https://developers.google.com/blockly/xml\";\r\nconst SOUP = '!#$%()*+,-./:;=?@[]^_`{|}~ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\n\r\n\r\nvar Util = {\r\n    isDefined(a){\r\n        return !((a === '') || (a === null) || (typeof a === 'undefined'));\r\n    },\r\n    createEl(tagName, attrs) {\r\n        var dom = document.createElementNS(NAME_SPACE, tagName);\r\n        if(typeof attrs === 'object'){\r\n            for(var key in attrs){\r\n                dom.setAttribute(key, attrs[key]);\r\n            }\r\n        }\r\n        return dom;\r\n    },\r\n    createFieldDom(field) {\r\n        let container = this.createEl(\"field\");\r\n        container.setAttribute(\"name\", field.name);\r\n        if (field.id){\r\n            container.setAttribute('id', field.id);\r\n        }\r\n        container.textContent = field.value;\r\n        return container;\r\n    },\r\n\r\n    createCommentDom(comment) {\r\n        let commentDom = this.createEl('comment');\r\n        commentDom.setAttribute('pinned', comment.pinned || false);\r\n        commentDom.textContent = comment.value;\r\n        return commentDom;\r\n    },\r\n\r\n    createStateDefBlock(state, index) {\r\n        var valueDom = this.createEl('value');\r\n        valueDom.setAttribute('name', 'ADD' + index);\r\n\r\n        var stateDom = this.createEl('block');\r\n        stateDom.setAttribute('type', 'state_def');\r\n        stateDom.setAttribute('id', state.stateId);\r\n        var fieldDom = this.createFieldDom({\r\n            name: 'NAME',\r\n            value: state.name\r\n        });\r\n        stateDom.appendChild(fieldDom);\r\n        \r\n        valueDom.appendChild(stateDom);\r\n        return valueDom;\r\n    },\r\n\r\n    createNextStatesDom(state, thread){\r\n        let nextDom, outputDom;\r\n\r\n        if (state.outputAry.length) {\r\n            nextDom = this.createEl(\"next\");\r\n            outputDom = this.createEl(\"block\");\r\n            outputDom.setAttribute(\"type\", \"controls_if\");\r\n            if (state.outputAry.length > 1) {\r\n                let mutation = this.createEl(\"mutation\");\r\n                mutation.setAttribute(\"elseif\", state.outputAry.length - 1);\r\n                outputDom.appendChild(mutation);\r\n            }\r\n            state.outputAry.forEach((outputItem, index) => {\r\n                let outputStateDom;\r\n                outputStateDom = this.createEl(\"statement\");\r\n                outputStateDom.setAttribute(\"name\", `DO${index}`);\r\n                outputStateDom.setAttribute(\"id\", `${outputItem.lineId}`);\r\n                //outputAry里面只存放了lineId 所以我们需要做以下事情：\r\n                //1 根据lineId找到对应的line数据\r\n                //2 根据line里面的endState的stateId找到对应的state数据\r\n                let line = thread.lineAry.find((item) => {\r\n                    return item.lineId === outputItem.lineId;\r\n                });\r\n                if (line) {\r\n                    let state = thread.stateAry.find((item) => {\r\n                        return item.stateId === line.endState.stateId;\r\n                    });\r\n                    if (state) {\r\n                        outputStateDom.appendChild(Util.state2dom(state, thread));\r\n                    } else {\r\n                        console.error(\"data error -^- \");\r\n                    }\r\n                }\r\n                if (outputStateDom) {\r\n                    outputDom.appendChild(outputStateDom);\r\n                }\r\n            });\r\n            nextDom.appendChild(outputDom);\r\n        }\r\n        return nextDom;\r\n    },\r\n\r\n    // 触发事件描述采用独立的结构\r\n    createNextStatesDom2(state, thread) {\r\n        let triggerEventDom;\r\n        let nextStatesDom;\r\n        if (state.outputAry.length) {\r\n            /* if (state.outputAry.length > 1) {\r\n                let mutation = this.createEl(\"mutation\");\r\n                mutation.setAttribute(\"elseif\", state.outputAry.length - 1);\r\n                triggerEventDom.appendChild(mutation);\r\n            } */\r\n            let parentDom;\r\n            \r\n            state.outputAry.forEach((outputItem, index) => {\r\n                let nextDom = this.createEl(\"next\");\r\n                if (!nextStatesDom){\r\n                    nextStatesDom = nextDom;\r\n                }\r\n                triggerEventDom = this.createEl(\"block\");\r\n                triggerEventDom.setAttribute(\"type\", \"state_trigger_event\");\r\n                triggerEventDom.setAttribute(\"id\", outputItem.lineId);\r\n\r\n                let triggerEventStatement;\r\n                triggerEventStatement = this.createEl(\"statement\");\r\n                triggerEventStatement.setAttribute(\"name\", `DO0`);\r\n                // triggerEventStatement.setAttribute(\"id\", `${outputItem.lineId}`);\r\n                //outputAry里面只存放了lineId 所以我们需要做以下事情：\r\n                //1 根据lineId找到对应的line数据\r\n                //2 根据line里面的endState的stateId找到对应的state数据\r\n                let line = thread.lineAry.find((item) => {\r\n                    return item.lineId === outputItem.lineId;\r\n                });\r\n                if (line) {\r\n                    if (line.desc){\r\n                        let commentDom = this.createCommentDom({\r\n                            value: line.desc\r\n                        });\r\n                        triggerEventDom.appendChild(commentDom);\r\n                    }\r\n                    let state = thread.stateAry.find((item) => {\r\n                        return item.stateId === line.endState.stateId;\r\n                    });\r\n                    if (state) {\r\n                        triggerEventStatement.appendChild(Util.state2dom(state, thread));\r\n                    } else {\r\n                        console.error(\"data error -^- \");\r\n                    }\r\n                }\r\n                if (triggerEventStatement) {\r\n                    triggerEventDom.appendChild(triggerEventStatement);\r\n                }\r\n                nextDom.appendChild(triggerEventDom);\r\n                if (parentDom){\r\n                    parentDom.appendChild(nextDom);\r\n                }\r\n                parentDom = triggerEventDom;\r\n                \r\n            });\r\n        }\r\n        return nextStatesDom;\r\n    },\r\n\r\n    genBlockType(type) {\r\n        let ret = \"state_opr\";\r\n        if (type === \"loopDiv\") {\r\n            ret = \"controls_whileUntil\";\r\n        }\r\n        return ret;\r\n    },\r\n\r\n    state2dom(rootState, threadData){\r\n        let rootEl = this.createEl(\"block\");\r\n        console.log(\r\n            rootState.stateId +\r\n            \" --- \" +\r\n            rootState.name +\r\n            \" --- \" +\r\n            rootState.stateType\r\n        );\r\n        rootEl.setAttribute(\"id\", rootState.stateId);\r\n        // rootEl.setAttribute('type', rootState.type || 'state_run');\r\n        rootEl.setAttribute(\"type\", this.genBlockType(rootState.stateType));\r\n        rootEl.setAttribute(\"SX\", 9999);\r\n        \r\n        let fieldDom = this.createFieldDom({\r\n            id: rootState.stateId,\r\n            name: \"field_state\",\r\n            value: rootState.name,\r\n        });\r\n        rootEl.appendChild(fieldDom);\r\n\r\n        let fieldX = this.createFieldDom({\r\n            id: rootState.stateId,\r\n            name: \"SX_FIELD\",\r\n            value: 8888//rootState.x,\r\n        });\r\n        rootEl.appendChild(fieldX);\r\n\r\n        let nextStatesDom = this.createNextStatesDom2(rootState, threadData);\r\n        if (nextStatesDom) {\r\n            rootEl.appendChild(nextStatesDom);\r\n        }\r\n        return rootEl;\r\n    },\r\n\r\n    createThreadDefDom(thread, threadProcedureId){\r\n        /* <block type=\"thread_def\" id=\"ISJ:}kp8l):hy~wr5{x5\" x=\"-187\" y=\"-87\">\r\n            <field name=\"NAME\">thread</field>\r\n            <statement name=\"CALLBACK\">\r\n                <block type=\"procedure_select\" id=\"IK`|)2n6nVKsvFJ4VlXC\">\r\n                    <field name=\"field_procedure\" id=\"aewyJ+/)D`VHlrJ$BgFT\">thread_p</field>\r\n                </block>\r\n            </statement>\r\n        </block> */\r\n        // const procedureDefId = this.genUid();\r\n        let threadDefDom = this.createEl('block', {\r\n            type: \"thread_def\"\r\n        });\r\n        let fieldDom = this.createEl('field', {\r\n            name: 'NAME',\r\n            textContent: thread.name\r\n        });\r\n        fieldDom.textContent = thread.name;\r\n\r\n        let statementDom = this.createEl('statement', {\r\n            name: 'CALLBACK'\r\n        });\r\n        let procedureSelectBlockDom = this.createEl('block', {\r\n            type: 'procedure_select'\r\n        });\r\n        let fieldProcedureDom = this.createEl('field', {\r\n            name: 'field_procedure',\r\n            id: threadProcedureId,\r\n        });\r\n        fieldProcedureDom.textContent = thread.name + \"_function\";\r\n        procedureSelectBlockDom.appendChild(fieldProcedureDom);\r\n        statementDom.appendChild(procedureSelectBlockDom);\r\n        threadDefDom.appendChild(fieldDom);\r\n        threadDefDom.appendChild(statementDom);\r\n\r\n        return threadDefDom;\r\n    },\r\n\r\n    createThreadProcedureDom(thread, threadProcedureId, statesDom){\r\n        console.log('---thread.name---' + thread.name);\r\n        /* <block type=\"procedures_defnoreturn\" id=\"aewyJ+/)D`VHlrJ$BgFT\" x=\"463\" y=\"-113\">\r\n            <field name=\"NAME\">thread_p</field>\r\n            <comment pinned=\"false\" h=\"80\" w=\"160\">Describe this function...</comment>\r\n            <statement name=\"STACK\">\r\n            </statement>\r\n        </block> */\r\n        let threadProcedureDom = this.createEl('block', {\r\n            type: 'procedures_defnoreturn',\r\n            id: threadProcedureId\r\n        });\r\n        let fieldDom = this.createEl('field', {\r\n            name: 'NAME',\r\n            \r\n        });\r\n        fieldDom.textContent= thread.name + \"_function\";\r\n        let statementDom = this.createEl('statement', {\r\n            name: 'STACK'\r\n        });\r\n        statementDom.appendChild(statesDom);\r\n        threadProcedureDom.appendChild(fieldDom);\r\n        threadProcedureDom.appendChild(statementDom);\r\n        return threadProcedureDom;\r\n    },\r\n\r\n    genUid() {\r\n        var length = 20;\r\n        var soupLength = SOUP.length;\r\n        var id = [];\r\n        for (var i = 0; i < length; i++) {\r\n            id[i] = SOUP.charAt(Math.random() * soupLength);\r\n        }\r\n        return id.join('');\r\n    },\r\n\r\n    state2blockly(threadAry) {\r\n        /**\r\n         * 1.找到线程中有开始标记的根状态\r\n         * 2.遍历根状态的output，生成特殊的if-else if 结构，注意：默认不采用else\r\n         *\r\n         */\r\n        let statePageData = threadAry;\r\n\r\n        let blocklyXml = Util.createEl(\"xml\");\r\n        blocklyXml.setAttribute(\r\n            \"xmlns\",\r\n            \"https://developers.google.com/blockly/xml\"\r\n        );\r\n\r\n        statePageData.forEach((thread, index) => {\r\n            let firstState = thread.stateAry[0];\r\n            let listsDom = Util.createEl('block');\r\n            listsDom.setAttribute('type', 'lists_state');\r\n            listsDom.setAttribute('x', 300 + (700 * index));\r\n            listsDom.setAttribute('y', 150);\r\n\r\n            let mutationDom = Util.createEl('mutation');\r\n            mutationDom.setAttribute('items', thread.stateAry.length);\r\n            listsDom.appendChild(mutationDom);\r\n\r\n            thread.stateAry.forEach((state, i) => {\r\n                let stateDefBlock = Util.createStateDefBlock(state, i);\r\n                listsDom.appendChild(stateDefBlock);\r\n                // blocklyXml.appendChild(stateDefBlock);\r\n            })\r\n            var statesDom = Util.state2dom(firstState, thread);\r\n            const procedureDefId = Util.genUid();\r\n            let threadDefDom = Util.createThreadDefDom(thread, procedureDefId);\r\n            let threadProcedureDom = Util.createThreadProcedureDom(thread, procedureDefId, statesDom);\r\n            if (Util.isDefined(thread.x)) {\r\n                threadDefDom.setAttribute('x', thread.x);\r\n            } else {\r\n                threadDefDom.setAttribute('x', index * 700);\r\n            }\r\n            if (Util.isDefined(thread.y)) {\r\n                threadDefDom.setAttribute('y', thread.y);\r\n            } else {\r\n                threadDefDom.setAttribute('y', 10);\r\n            }\r\n            threadProcedureDom.setAttribute('x', index * 700);\r\n            threadProcedureDom.setAttribute('y', 200);\r\n            //这个添加的顺序很重要！！！\r\n            blocklyXml.appendChild(listsDom);\r\n            blocklyXml.appendChild(threadProcedureDom);\r\n            blocklyXml.appendChild(threadDefDom);\r\n        });\r\n\r\n        return blocklyXml.outerHTML;\r\n    },\r\n\r\n    blockly2state(){\r\n\r\n    },\r\n\r\n    copyBlocklyXml2Clipboard(blocklyXml){\r\n        // window.stateDataXml = blocklyXml.outerHTML;\r\n        let hiddenInput = document.createElement(\"input\");\r\n        hiddenInput.setAttribute(\"type\", \"text\");\r\n        hiddenInput.setAttribute(\"value\", blocklyXml);\r\n        hiddenInput.setAttribute(\"style\", \"height: 0; overflow: hidden;\");\r\n        document.body.appendChild(hiddenInput);\r\n        hiddenInput.focus();\r\n        hiddenInput.select();\r\n        document.execCommand(\"copy\");\r\n        document.body.removeChild(hiddenInput);\r\n    }\r\n\r\n}\r\nexport default Util;"]}