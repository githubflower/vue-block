{"version":3,"sources":["util.js"],"names":["NAME_SPACE","SOUP","Util","isDefined","a","attrs","dom","document","createElementNS","tagName","_typeof","key","setAttribute","createFieldDom","container","createEl","field","name","id","textContent","value","createCommentDom","comment","commentDom","this","pinned","index","valueDom","stateDom","state","stateId","fieldDom","appendChild","createNextStatesDom","thread","nextDom","outputDom","_this","outputAry","length","mutation","forEach","outputItem","outputStateDom","concat","lineId","lineAry","line","stateAry","item","endState","console","error","createNextStatesDom2","parentDom","_this2","triggerEventStatement","nextStatesDom","triggerEventDom","JSON","stringify","find","d","desc","state2dom","genBlockType","ret","type","saveStateXY","el","x","saveStateBlockDataInDom","stateType","saveLineData","startState","rootState","threadData","rootEl","log","fieldX","createThreadDefDom","threadProcedureId","threadDefDom","procedureSelectBlockDom","fieldProcedureDom","statementDom","createThreadProcedureDom","statesDom","genUid","soupLength","i","charAt","Math","random","join","getDomChildren","ary","children","Array","prototype","slice","call","getStateXY","existStates","getAttribute","threadProcedureDom","parent","getLineDom","prevStateDom","getPrevStateDom","y","prevX","prevY","prevLineId","state2blockly","threadAry","statePageData","blocklyXml","firstState","listsDom","mutationDom","gap_x","createStateDefBlock","stateDefBlock","procedureDefId","gap_y","outerHTML","blockly2state","xmlDom","DOMParser","STATE_BLOCK","by","parseInt","nodeHeight","outputLines","findOutputLinesOfStateDom","child","lineDom","newLine","dom2State","push","stateObj","inputLines","inputAry","j","existLineOfInputLines","copyBlocklyXml2Clipboard","existLineOfLineAry","hiddenInput","createElement","body","focus","select","removeChild","workspace2dom","bx","iframeDom","win","contentWindow","Code","workspace","xmlText","Blockly","Xml","domToPrettyText","height"],"mappings":"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","file":"util.min.js","sourcesContent":["const NAME_SPACE = \"https://developers.google.com/blockly/xml\";\r\nconst SOUP = '!#$%()*+,-./:;=?@[]^_`{|}~ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\n\r\n\r\nvar Util = {\r\n    isDefined(a) {\r\n        return !((a === '') || (a === null) || (typeof a === 'undefined'));\r\n    },\r\n    createEl(tagName, attrs) {\r\n        var dom = document.createElementNS(NAME_SPACE, tagName);\r\n        if (typeof attrs === 'object') {\r\n            for (var key in attrs) {\r\n                dom.setAttribute(key, attrs[key]);\r\n            }\r\n        }\r\n        return dom;\r\n    },\r\n    createFieldDom(field) {\r\n        let container = this.createEl(\"field\");\r\n        container.setAttribute(\"name\", field.name);\r\n        if (field.id) {\r\n            container.setAttribute('id', field.id);\r\n        }\r\n        container.textContent = field.value;\r\n        return container;\r\n    },\r\n\r\n    /**\r\n     * 创建注释块Dom\r\n     * @param {*} comment \r\n     */\r\n    createCommentDom(comment) {\r\n        let commentDom = this.createEl('comment');\r\n        commentDom.setAttribute('pinned', comment.pinned || false);\r\n        commentDom.textContent = comment.value;\r\n        return commentDom;\r\n    },\r\n\r\n    /**\r\n     * 创建状态定义块Dom\r\n     * @param {*} state \r\n     * @param {*} index \r\n     */\r\n    createStateDefBlock(state, index) {\r\n        var valueDom = this.createEl('value');\r\n        valueDom.setAttribute('name', 'ADD' + index);\r\n\r\n        var stateDom = this.createEl('block');\r\n        stateDom.setAttribute('type', 'state_def');\r\n        stateDom.setAttribute('id', state.stateId);\r\n        var fieldDom = this.createFieldDom({\r\n            name: 'NAME',\r\n            value: state.name\r\n        });\r\n        stateDom.appendChild(fieldDom);\r\n\r\n        valueDom.appendChild(stateDom);\r\n        return valueDom;\r\n    },\r\n\r\n    /**\r\n     * 创建连线Dom以及其连接的状态块的Dom - 触发事件描述采用通用的if-else结构 controls_if \r\n     * ！此方法没有用到，代码暂时先放着\r\n     * @param {*} state \r\n     * @param {*} thread \r\n     */\r\n    createNextStatesDom(state, thread) {\r\n        let nextDom, outputDom;\r\n\r\n        if (state.outputAry.length) {\r\n            nextDom = this.createEl(\"next\");\r\n            outputDom = this.createEl(\"block\");\r\n            outputDom.setAttribute(\"type\", \"controls_if\");\r\n            if (state.outputAry.length > 1) {\r\n                let mutation = this.createEl(\"mutation\");\r\n                mutation.setAttribute(\"elseif\", state.outputAry.length - 1);\r\n                outputDom.appendChild(mutation);\r\n            }\r\n            state.outputAry.forEach((outputItem, index) => {\r\n                let outputStateDom;\r\n                outputStateDom = this.createEl(\"statement\");\r\n                outputStateDom.setAttribute(\"name\", `DO${index}`);\r\n                outputStateDom.setAttribute(\"id\", `${outputItem.lineId}`);\r\n                //outputAry里面只存放了lineId 所以我们需要做以下事情：\r\n                //1 根据lineId找到对应的line数据\r\n                //2 根据line里面的endState的stateId找到对应的state数据\r\n                let line = thread.lineAry.find((item) => {\r\n                    return item.lineId === outputItem.lineId;\r\n                });\r\n                if (line) {\r\n                    let state = thread.stateAry.find((item) => {\r\n                        return item.stateId === line.endState.stateId;\r\n                    });\r\n                    if (state) {\r\n                        outputStateDom.appendChild(Util.state2dom(state, thread));\r\n                    } else {\r\n                        console.error(\"data error -^- \");\r\n                    }\r\n                }\r\n                if (outputStateDom) {\r\n                    outputDom.appendChild(outputStateDom);\r\n                }\r\n            });\r\n            nextDom.appendChild(outputDom);\r\n        }\r\n        return nextDom;\r\n    },\r\n\r\n    /**\r\n     * 创建连线Dom以及其连接的状态块的Dom - 触发事件描述采用独立的结构 state_trigger_event\r\n     * @param {*} state \r\n     * @param {*} thread \r\n     */\r\n    createNextStatesDom2(state, thread) {\r\n        let triggerEventDom;\r\n        let nextStatesDom;\r\n        if (state.outputAry.length) {\r\n            /* if (state.outputAry.length > 1) {\r\n                let mutation = this.createEl(\"mutation\");\r\n                mutation.setAttribute(\"elseif\", state.outputAry.length - 1);\r\n                triggerEventDom.appendChild(mutation);\r\n            } */\r\n            let parentDom;\r\n\r\n            state.outputAry.forEach((outputItem, index) => {\r\n                let nextDom = this.createEl(\"next\");\r\n                if (!nextStatesDom) {\r\n                    nextStatesDom = nextDom;\r\n                }\r\n                triggerEventDom = this.createEl(\"block\");\r\n                triggerEventDom.setAttribute(\"type\", \"state_trigger_event\");\r\n                triggerEventDom.setAttribute(\"id\", outputItem.lineId);\r\n                triggerEventDom.setAttribute(\"start_state\", JSON.stringify(state)); // TODO 按需简化存储的start_state数据\r\n\r\n                let triggerEventStatement;\r\n                triggerEventStatement = this.createEl(\"statement\");\r\n                triggerEventStatement.setAttribute(\"name\", `DO0`);\r\n                // triggerEventStatement.setAttribute(\"id\", `${outputItem.lineId}`);\r\n                //outputAry里面只存放了lineId 所以我们需要做以下事情：\r\n                //1 根据lineId找到对应的line数据\r\n                //2 根据line里面的endState的stateId找到对应的state数据\r\n                let line = thread.lineAry.find((item) => {\r\n                    return item.lineId === outputItem.lineId;\r\n                });\r\n                if (line) {\r\n                    triggerEventDom.setAttribute(\"d\", line.d);\r\n                    if (line.desc) {\r\n                        let commentDom = this.createCommentDom({\r\n                            value: line.desc\r\n                        });\r\n                        triggerEventDom.appendChild(commentDom);\r\n                    }\r\n                    let state = thread.stateAry.find((item) => {\r\n                        return item.stateId === line.endState.stateId;\r\n                    });\r\n                    if (state) {\r\n                        triggerEventDom.setAttribute(\"end_state\", JSON.stringify(state)); // TODO 按需简化存储的end_state数据\r\n                        triggerEventStatement.appendChild(Util.state2dom(state, thread));\r\n                    } else {\r\n                        console.error(\"data error -^- \");\r\n                    }\r\n                }\r\n                if (triggerEventStatement) {\r\n                    triggerEventDom.appendChild(triggerEventStatement);\r\n                }\r\n                nextDom.appendChild(triggerEventDom);\r\n                if (parentDom) {\r\n                    parentDom.appendChild(nextDom);\r\n                }\r\n                parentDom = triggerEventDom;\r\n\r\n            });\r\n        }\r\n        return nextStatesDom;\r\n    },\r\n\r\n    genBlockType(type) {\r\n        let ret = \"state_opr\";\r\n        if (type === \"loopDiv\") {\r\n            ret = \"controls_whileUntil\";\r\n        }\r\n        return ret;\r\n    },\r\n    /**\r\n     * 保存状态块的位置信息到Dom中\r\n     * @param {*} el 新建的和状态对应的Dom节点\r\n     * @param {*} state 当前操作的状态\r\n     */\r\n    saveStateXY(el, state) {\r\n        el.setAttribute(\"sx\", state.x);\r\n        el.setAttribute(\"sy\", state.y);\r\n    },\r\n    /**\r\n     * 保存状态块的数据到Dom中\r\n     * @param {*} el 新建的和状态对应的Dom节点\r\n     * @param {*} state 当前操作的状态\r\n     */\r\n    saveStateBlockDataInDom(el, state) {\r\n        switch (state.stateType) {\r\n            case 'stateDiv': //状态执行\r\n                this.saveStateXY(el, state);\r\n                break;\r\n            case 'state_trigger_event': //连线\r\n                this.saveLineData(el, state);\r\n            default:\r\n                break;\r\n        }\r\n    },\r\n    /**\r\n     * 保存连线数据到Dom\r\n     * @param {*} el 新建的和状态对应的Dom节点\r\n     * @param {*} state 当前操作的状态\r\n     */\r\n    saveLineData(el, state) {\r\n        el.setAttribute(\"d\", state.d);\r\n        el.setAttribute(\"start_state\", JSON.stringify(state.startState));\r\n        el.setAttribute(\"end_state\", JSON.stringify(state.startState));\r\n    },\r\n    /**\r\n     * 将一个状态块转为Dom节点\r\n     * @param {*} rootState \r\n     * @param {*} threadData \r\n     */\r\n    state2dom(rootState, threadData) {\r\n        let rootEl = this.createEl(\"block\");\r\n        console.log(\r\n            rootState.stateId +\r\n            \" --- \" +\r\n            rootState.name +\r\n            \" --- \" +\r\n            rootState.stateType\r\n        );\r\n        rootEl.setAttribute(\"id\", rootState.stateId);\r\n        // rootEl.setAttribute('type', rootState.type || 'state_run');\r\n        rootEl.setAttribute(\"type\", this.genBlockType(rootState.stateType));\r\n        this.saveStateBlockDataInDom(rootEl, rootState);\r\n\r\n\r\n        let fieldDom = this.createFieldDom({\r\n            id: rootState.stateId,\r\n            name: \"field_state\",\r\n            value: rootState.name,\r\n        });\r\n        rootEl.appendChild(fieldDom);\r\n\r\n        let fieldX = this.createFieldDom({\r\n            id: rootState.stateId,\r\n            name: \"SX_FIELD\",\r\n            value: 8888//rootState.x,\r\n        });\r\n        rootEl.appendChild(fieldX);\r\n\r\n        let nextStatesDom = this.createNextStatesDom2(rootState, threadData);\r\n        if (nextStatesDom) {\r\n            rootEl.appendChild(nextStatesDom);\r\n        }\r\n        return rootEl;\r\n    },\r\n    /**\r\n     * 创建线程定义块的Dom\r\n     * @param {*} thread \r\n     * @param {*} threadProcedureId 线程的函数id\r\n     */\r\n    createThreadDefDom(thread, threadProcedureId) {\r\n        /* <block type=\"thread_def\" id=\"ISJ:}kp8l):hy~wr5{x5\" x=\"-187\" y=\"-87\">\r\n            <field name=\"NAME\">thread</field>\r\n            <statement name=\"CALLBACK\">\r\n                <block type=\"procedure_select\" id=\"IK`|)2n6nVKsvFJ4VlXC\">\r\n                    <field name=\"field_procedure\" id=\"aewyJ+/)D`VHlrJ$BgFT\">thread_p</field>\r\n                </block>\r\n            </statement>\r\n        </block> */\r\n        // const procedureDefId = this.genUid();\r\n        let threadDefDom = this.createEl('block', {\r\n            type: \"thread_def\"\r\n        });\r\n        let fieldDom = this.createEl('field', {\r\n            name: 'NAME',\r\n            textContent: thread.name\r\n        });\r\n        fieldDom.textContent = thread.name;\r\n\r\n        let statementDom = this.createEl('statement', {\r\n            name: 'CALLBACK'\r\n        });\r\n        let procedureSelectBlockDom = this.createEl('block', {\r\n            type: 'procedure_select'\r\n        });\r\n        let fieldProcedureDom = this.createEl('field', {\r\n            name: 'field_procedure',\r\n            id: threadProcedureId,\r\n        });\r\n        fieldProcedureDom.textContent = thread.name + \"_function\";\r\n        procedureSelectBlockDom.appendChild(fieldProcedureDom);\r\n        statementDom.appendChild(procedureSelectBlockDom);\r\n        threadDefDom.appendChild(fieldDom);\r\n        threadDefDom.appendChild(statementDom);\r\n\r\n        return threadDefDom;\r\n    },\r\n    /**\r\n     * 创建线程函数定义块的Dom\r\n     * @param {*} thread \r\n     * @param {*} threadProcedureId \r\n     * @param {*} statesDom 所有连接的状态\r\n     */\r\n    createThreadProcedureDom(thread, threadProcedureId, statesDom) {\r\n        console.log('---thread.name---' + thread.name);\r\n        /* <block type=\"procedures_defnoreturn\" id=\"aewyJ+/)D`VHlrJ$BgFT\" x=\"463\" y=\"-113\">\r\n            <field name=\"NAME\">thread_p</field>\r\n            <comment pinned=\"false\" h=\"80\" w=\"160\">Describe this function...</comment>\r\n            <statement name=\"STACK\">\r\n            </statement>\r\n        </block> */\r\n        let threadProcedureDom = this.createEl('block', {\r\n            type: 'procedures_defnoreturn',\r\n            id: threadProcedureId\r\n        });\r\n        let fieldDom = this.createEl('field', {\r\n            name: 'NAME',\r\n\r\n        });\r\n        fieldDom.textContent = thread.name + \"_function\";\r\n        let statementDom = this.createEl('statement', {\r\n            name: 'STACK'\r\n        });\r\n        statementDom.appendChild(statesDom);\r\n        threadProcedureDom.appendChild(fieldDom);\r\n        threadProcedureDom.appendChild(statementDom);\r\n        return threadProcedureDom;\r\n    },\r\n    /**\r\n     * 获取唯一id，同google blockly产生唯一id的方法\r\n     */\r\n    genUid() {\r\n        var length = 20;\r\n        var soupLength = SOUP.length;\r\n        var id = [];\r\n        for (var i = 0; i < length; i++) {\r\n            id[i] = SOUP.charAt(Math.random() * soupLength);\r\n        }\r\n        return id.join('');\r\n    },\r\n    getDomChildren(dom){\r\n        var ary = [];\r\n        if(dom.children){\r\n            ary = Array.prototype.slice.call(dom.children);\r\n        }\r\n        return ary;\r\n    },\r\n    getStateXY(stateDom, existStates){\r\n        /**\r\n         * 1.获取这个Dom节点的sx, sy值，如果存在就使用这个值，如果不存在，则获取上一个状态的sx, sy值，然后查看这个stateDom处于上一个状态的outputAry中的第几个元素，假设是第3个，则\r\n         * XY的值为：  x: targetDom.sx + gap_x(水平方向间隔)  y: targetDom.sx + index * gap_y\r\n         */\r\n        const gap_x = 150;\r\n        const gap_y = 100;\r\n        let x = stateDom.getAttribute('sx');\r\n        let y = stateDom.getAttribute('sy');\r\n        function getLineDom(dom){\r\n            var parent = dom.parent;\r\n            if (parent){\r\n                if (parent.type === 'state_trigger_event'){\r\n                    return parent;\r\n                } else {\r\n                    parent = getLineDom(parent);\r\n                }\r\n            }\r\n            return parent;\r\n        }\r\n        function getPrevStateDom(dom){\r\n            var parent = dom.parent;\r\n            if (parent) {\r\n                if (parent.type === 'state_opr'){\r\n\r\n                    return parent;\r\n                } else {\r\n                    parent = getPrevStateDom(parent);\r\n                }\r\n            }\r\n            return parent;\r\n        }\r\n        let prevLineId = getLineDom(stateDom) && getLineDom(stateDom).getAttribute('id');\r\n        if(!x || x === 'undefined'){ // x是未定义的则 y也是未定义的\r\n            let prevStateDom = getPrevStateDom(stateDom);\r\n            if (!prevStateDom){\r\n                return {\r\n                    x: 0,\r\n                    y: 0\r\n                }\r\n            }\r\n            let prevX = prevStateDom.getAttribute('sx');\r\n            let prevY = prevStateDom.getAttribute('sy');\r\n            if (!prevX || prevX === 'undefined'){\r\n                prevX = 0;\r\n                prevY = 0;\r\n            }\r\n            x = prevX + gap_x;\r\n            var index = 0;\r\n            var prevState = existStates.find(item => {\r\n                return item.stateId === prevStateDom.getAttribute('id')\r\n            })\r\n\r\n            prevState.outputAry.forEach((item, i) => {\r\n                if (item.lineId === prevLineId){\r\n                    index = i;\r\n                    return false; // return false 结束forEach\r\n                }\r\n            })\r\n            y = prevY + index * gap_y;\r\n        }\r\n        return {\r\n            x: x,\r\n            y: y\r\n        }\r\n    },\r\n    /**\r\n     * 将所有线程的数据（包括了状态和连线）转为Blockly可识别的xml数据\r\n     * @param {*} threadAry 线程数据\r\n     */\r\n    state2blockly(threadAry) {\r\n        /**\r\n         * 1.找到线程中有开始标记的根状态\r\n         * 2.遍历根状态的output，生成特殊的if-else if 结构，注意：默认不采用else\r\n         *\r\n         */\r\n        let statePageData = threadAry;\r\n\r\n        let blocklyXml = Util.createEl(\"xml\");\r\n        blocklyXml.setAttribute(\r\n            \"xmlns\",\r\n            \"https://developers.google.com/blockly/xml\"\r\n        );\r\n\r\n        statePageData.forEach((thread, index) => {\r\n            let firstState = thread.stateAry[0];\r\n            let listsDom = Util.createEl('block');\r\n            listsDom.setAttribute('type', 'lists_state');\r\n            listsDom.setAttribute('x', 300 + (700 * index));\r\n            listsDom.setAttribute('y', 150);\r\n\r\n            let mutationDom = Util.createEl('mutation');\r\n            mutationDom.setAttribute('items', thread.stateAry.length);\r\n            listsDom.appendChild(mutationDom);\r\n\r\n            thread.stateAry.forEach((state, i) => {\r\n                let stateDefBlock = Util.createStateDefBlock(state, i);\r\n                listsDom.appendChild(stateDefBlock);\r\n                // blocklyXml.appendChild(stateDefBlock);\r\n            })\r\n            var statesDom = Util.state2dom(firstState, thread);\r\n            const procedureDefId = Util.genUid();\r\n            let threadDefDom = Util.createThreadDefDom(thread, procedureDefId);\r\n            let threadProcedureDom = Util.createThreadProcedureDom(thread, procedureDefId, statesDom);\r\n            if (Util.isDefined(thread.x)) {\r\n                threadDefDom.setAttribute('x', thread.x);\r\n            } else {\r\n                threadDefDom.setAttribute('x', index * 700);\r\n            }\r\n            if (Util.isDefined(thread.y)) {\r\n                threadDefDom.setAttribute('y', thread.y);\r\n            } else {\r\n                threadDefDom.setAttribute('y', 10);\r\n            }\r\n            threadProcedureDom.setAttribute('x', index * 700);\r\n            threadProcedureDom.setAttribute('y', 200);\r\n            //这个添加的顺序很重要！！！\r\n            blocklyXml.appendChild(listsDom);\r\n            blocklyXml.appendChild(threadProcedureDom);\r\n            blocklyXml.appendChild(threadDefDom);\r\n        });\r\n\r\n        return blocklyXml.outerHTML;\r\n    },\r\n    /**\r\n     * 将Blockly数据转为状态图可识别的数据\r\n     */\r\n    blockly2state(xmlDom) {\r\n        if(typeof xmlDom === 'string'){\r\n            xmlDom = new DOMParser().parseFromString(xmlDom, 'text/xml');\r\n        }\r\n\r\n        const STATE_BLOCK = 'state_opr';\r\n        let stateAry = []; //所有的状态数据集合\r\n        let lineAry = []; //所有的连线数据集合\r\n        function extractStateAndLine(stateDom) {\r\n            if (stateDom.tagName === 'block' && stateDom.getAttribute('type') === STATE_BLOCK) {\r\n                let stateObj = {\r\n                    stateId: stateDom.getAttribute('id'),\r\n                    stateType: stateDom.getAttribute('type') === STATE_BLOCK ? 'stateDiv' : 'loopDiv',\r\n                    bx: parseInt(stateDom.getAttribute('x'), 10), // blockly中与此对应的图形块的x\r\n                    by: parseInt(stateDom.getAttribute('y'), 10), // blockly中与此对应的图形块的y\r\n                    x: Util.getStateXY(stateDom).x, //stateDom.getAttribute('sx'),\r\n                    y: Util.getStateXY(stateDom).y,\r\n                    width: '76px',\r\n                    height: '40px',\r\n                    name: stateDom.children[0].textContent,\r\n                    inputAry: [],\r\n                    outputAry: [],\r\n                    children: [],\r\n                    nodeHeight: 0 // 如果该节点有2个分支，且分支是叶子节点，则这个节点的nodeHeight = 2; 总之，nodeHeight = 各分支nodeHeight之和 - 这个参数为自动布局所用\r\n                }\r\n\r\n                function dom2State(dom) {\r\n                    return {\r\n                        stateId: dom.getAttribute('id'),\r\n                        stateType: STATE_BLOCK\r\n                    };\r\n                }\r\n                function findOutputLinesOfStateDom(stateDom, outputLines) {\r\n                    // 如果stateDom中有next节点 且 next节点的children中有block.state_trigger_event 则将这个block.state_trigger_event push 到 outputLines\r\n                    // 然后将这个block.state_trigger_event作为新的stateDom，查找其包含的block.state_trigger_event 这样遍历查找所有的block.state_trigger_event就找到了outputLines\r\n                    let children = Util.getDomChildren(stateDom);\r\n                    children.forEach(child => {\r\n                        if (child.tagName === 'next') { //所有next节点的children都只有1个\r\n                            if (child.children && child.children[0] && child.children[0].getAttribute('type') === 'state_trigger_event') {\r\n                                let lineDom = child.children[0];\r\n                                let newLine = {\r\n                                    lineId: lineDom.getAttribute('id'),\r\n                                    d: lineDom.getAttribute('d'),\r\n                                    startState: dom2State(stateDom),\r\n                                    endState: dom2State(lineDom.children[0].children[0]), //TODO 需保证代码健壮性\r\n                                };\r\n\r\n                                let existLineOfOutputLines = outputLines.find(item => {\r\n                                    return item.lineId === lineDom.getAttribute('id');\r\n                                })\r\n                                if (!existLineOfOutputLines) {\r\n                                    outputLines.push(newLine);\r\n                                }\r\n\r\n                                let existLineOfLineAry = lineAry.find(item => {\r\n                                    return item.lineId === lineDom.getAttribute('id')\r\n                                })\r\n                                if (!existLineOfLineAry) {\r\n                                    lineAry.push(newLine);\r\n                                }\r\n                                findOutputLinesOfStateDom(lineDom.children[0].children[0], outputLines);\r\n                            }\r\n                        }\r\n                    })\r\n                    return outputLines;\r\n                }\r\n\r\n                function findInputLinesOfStateDom(stateDom, inputLines) {\r\n                    //逐级往上寻找type === 'state_opr'的块即inputLines    //  block.state_trigger_event > statement > block.state_opr\r\n                    let parent = stateDom.parent && stateDom.parent.parent;\r\n                    if (parent && parent.getAttribute('type') === 'state_trigger_event') {\r\n                        let newLine = {\r\n                            lineId: lineDom.getAttribute('id'),\r\n                            d: lineDom.getAttribute('d'),\r\n                            startState: dom2State(parent),\r\n                            endState: dom2State(stateDom)\r\n                        };\r\n\r\n                        let existLineOfInputLines = inputLines.find(item => {\r\n                            return item.lineId === newLine.lineId;\r\n                        })\r\n                        if (!existLineOfInputLines) {\r\n                            inputLines.push(newLine);\r\n                        }\r\n\r\n                        let existLineOfLineAry = lineAry.find(item => {\r\n                            return item.lineId === newLine.lineId;\r\n                        })\r\n                        if (!existLineOfLineAry) {\r\n                            lineAry.push(newLine);\r\n                        }\r\n                    }\r\n                    return inputLines;\r\n                }\r\n\r\n                findOutputLinesOfStateDom(stateDom, stateObj.outputAry);\r\n                findInputLinesOfStateDom(stateDom, stateObj.inputAry);\r\n\r\n                let existStateInStateAry = stateAry.find(state => {\r\n                    return state.stateId === stateObj.stateId;\r\n                })\r\n                if (!existStateInStateAry) {\r\n                    stateAry.push(stateObj);\r\n                }\r\n            }\r\n            if (stateDom.children && stateDom.children.length) {\r\n                for (let j = 0; j < stateDom.children.length; j++) {\r\n                    let child = stateDom.children[j];\r\n                    extractStateAndLine(child);\r\n                }\r\n            }\r\n        }\r\n        extractStateAndLine(xmlDom);\r\n        return {\r\n            stateAry: stateAry,\r\n            lineAry: lineAry\r\n        }\r\n    },\r\n    /**\r\n     * 将Blockly数据复制到剪切板 - 调试时用\r\n     * @param {*} blocklyXml \r\n     */\r\n    copyBlocklyXml2Clipboard(blocklyXml) {\r\n        // window.stateDataXml = blocklyXml.outerHTML;\r\n        let hiddenInput = document.createElement(\"input\");\r\n        hiddenInput.setAttribute(\"type\", \"text\");\r\n        hiddenInput.setAttribute(\"value\", blocklyXml);\r\n        hiddenInput.setAttribute(\"style\", \"height: 0; overflow: hidden;\");\r\n        document.body.appendChild(hiddenInput);\r\n        hiddenInput.focus();\r\n        hiddenInput.select();\r\n        document.execCommand(\"copy\");\r\n        document.body.removeChild(hiddenInput);\r\n    },\r\n    workspace2dom(){\r\n        var xmlText = '';\r\n        var iframeDom = document.getElementById('blocklyIframe');\r\n        if (iframeDom) {\r\n            var win = iframeDom.contentWindow;\r\n            var xmlDom = win.Blockly.Xml.workspaceToDom(win.Code.workspace);\r\n            xmlText = win.Blockly.Xml.domToPrettyText(xmlDom);\r\n            \r\n        }else{\r\n            console.error('当前页面没有嵌入blockly');\r\n        }\r\n        return xmlText;\r\n    }\r\n\r\n}\r\nexport default Util;"]}