{"version":3,"sources":["util.js"],"names":["_dagre","_interopRequireDefault","require","NAME_SPACE","SOUP","Util","isDefined","a","createEl","tagName","attrs","dom","document","createElementNS","_typeof","key","setAttribute","createFieldDom","field","container","this","id","commentDom","comment","pinned","createStateDefBlock","state","index","valueDom","createCommentDom","textContent","value","stateDom","stateId","fieldDom","name","appendChild","createNextStatesDom","thread","nextDom","_this","length","outputDom","outputAry","mutation","forEach","outputItem","outputStateDom","concat","lineId","lineAry","find","item","line","stateAry","endState","console","createNextStatesDom2","nextStatesDom","_this2","triggerEventStatement","triggerEventDom","d","desc","JSON","stringify","state2dom","parentDom","ret","type","error","el","x","y","saveStateBlockDataInDom","stateType","saveStateXY","saveLineData","startState","rootState","threadData","genBlockType","rootEl","fieldX","createThreadDefDom","threadProcedureId","statementDom","fieldProcedureDom","procedureSelectBlockDom","threadDefDom","createThreadProcedureDom","statesDom","log","genUid","soupLength","i","charAt","Math","random","getDomChildren","ary","children","Array","prototype","slice","call","toNum","threadProcedureDom","parseInt","str","getPrevStateDom","parent","getAttribute","getStateXY","getLineDom","prevLineId","prevStateDom","prevX","prevY","existStates","getEntityStateId","state2blockly","threadAry","blocklyXml","statePageData","firstState","listsDom","mutationDom","gap_x","prevState","stateDefBlock","procedureDefId","outerHTML","blockly2state","xmlDom","DOMParser","STATE_BLOCK","height","inputAry","nodeHeight","findOutputLinesOfStateDom","outputLines","parseFromString","child","lineDom","newLine","dom2State","getEndStateDomOfLine","push","stateObj","inputLines","existLineOfLineAry","findInputLinesOfStateDom","parentNode","j","extractStateAndLine","existLineOfInputLines","statement","childNodes","nodeName","endStateDom","copyBlocklyXml2Clipboard","hiddenInput","createElement","width","body","focus","select","removeChild","iframeDom","getElementById","workspaceToDom","Code","workspace","existStateInStateAry","Xml","resetAllStateData","autoLayout","virtualHeight","getVirtualHeight","findFirstState","outputStates","endStateOfLine","lineObj","execCommand","getAutoXY","xmlText","win","Blockly","domToPrettyText","testLayout","g","dagre","graphlib","Graph","directed","compound","multigraph","rankdir","setNode","setEdge","label","layout","nodeId","node","edges","sum","v","w","edge"],"mappings":"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","file":"util.min.js","sourcesContent":["const NAME_SPACE = \"https://developers.google.com/blockly/xml\";\r\nconst SOUP = '!#$%()*+,-./:;=?@[]^_`{|}~ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\nimport dagre from 'dagre'\r\n\r\nvar Util = {\r\n    isDefined(a) {\r\n        return !((a === '') || (a === null) || (typeof a === 'undefined'));\r\n    },\r\n    createEl(tagName, attrs) {\r\n        var dom = document.createElementNS(NAME_SPACE, tagName);\r\n        if (typeof attrs === 'object') {\r\n            for (var key in attrs) {\r\n                dom.setAttribute(key, attrs[key]);\r\n            }\r\n        }\r\n        return dom;\r\n    },\r\n    createFieldDom(field) {\r\n        let container = this.createEl(\"field\");\r\n        container.setAttribute(\"name\", field.name);\r\n        if (field.id) {\r\n            container.setAttribute('id', field.id);\r\n        }\r\n        container.textContent = field.value;\r\n        return container;\r\n    },\r\n\r\n    /**\r\n     * 创建注释块Dom\r\n     * @param {*} comment \r\n     */\r\n    createCommentDom(comment) {\r\n        let commentDom = this.createEl('comment');\r\n        commentDom.setAttribute('pinned', comment.pinned || false);\r\n        commentDom.textContent = comment.value;\r\n        return commentDom;\r\n    },\r\n\r\n    /**\r\n     * 创建状态定义块Dom\r\n     * @param {*} state \r\n     * @param {*} index \r\n     */\r\n    createStateDefBlock(state, index) {\r\n        var valueDom = this.createEl('value');\r\n        valueDom.setAttribute('name', 'ADD' + index);\r\n\r\n        var stateDom = this.createEl('block');\r\n        stateDom.setAttribute('type', 'state_def');\r\n        stateDom.setAttribute('id', state.stateId);\r\n        var fieldDom = this.createFieldDom({\r\n            name: 'NAME',\r\n            value: state.name\r\n        });\r\n        stateDom.appendChild(fieldDom);\r\n\r\n        valueDom.appendChild(stateDom);\r\n        return valueDom;\r\n    },\r\n\r\n    /**\r\n     * 创建连线Dom以及其连接的状态块的Dom - 触发事件描述采用通用的if-else结构 controls_if \r\n     * ！此方法没有用到，代码暂时先放着\r\n     * @param {*} state \r\n     * @param {*} thread \r\n     */\r\n    createNextStatesDom(state, thread) {\r\n        let nextDom, outputDom;\r\n\r\n        if (state.outputAry.length) {\r\n            nextDom = this.createEl(\"next\");\r\n            outputDom = this.createEl(\"block\");\r\n            outputDom.setAttribute(\"type\", \"controls_if\");\r\n            if (state.outputAry.length > 1) {\r\n                let mutation = this.createEl(\"mutation\");\r\n                mutation.setAttribute(\"elseif\", state.outputAry.length - 1);\r\n                outputDom.appendChild(mutation);\r\n            }\r\n            state.outputAry.forEach((outputItem, index) => {\r\n                let outputStateDom;\r\n                outputStateDom = this.createEl(\"statement\");\r\n                outputStateDom.setAttribute(\"name\", `DO${index}`);\r\n                outputStateDom.setAttribute(\"id\", `${outputItem.lineId}`);\r\n                //outputAry里面只存放了lineId 所以我们需要做以下事情：\r\n                //1 根据lineId找到对应的line数据\r\n                //2 根据line里面的endState的stateId找到对应的state数据\r\n                let line = thread.lineAry.find((item) => {\r\n                    return item.lineId === outputItem.lineId;\r\n                });\r\n                if (line) {\r\n                    let state = thread.stateAry.find((item) => {\r\n                        return item.stateId === line.endState.stateId;\r\n                    });\r\n                    if (state) {\r\n                        outputStateDom.appendChild(Util.state2dom(state, thread));\r\n                    } else {\r\n                        console.error(\"data error -^- \");\r\n                    }\r\n                }\r\n                if (outputStateDom) {\r\n                    outputDom.appendChild(outputStateDom);\r\n                }\r\n            });\r\n            nextDom.appendChild(outputDom);\r\n        }\r\n        return nextDom;\r\n    },\r\n\r\n    /**\r\n     * 创建连线Dom以及其连接的状态块的Dom - 触发事件描述采用独立的结构 state_trigger_event\r\n     * @param {*} state \r\n     * @param {*} thread \r\n     */\r\n    createNextStatesDom2(state, thread) {\r\n        let triggerEventDom;\r\n        let nextStatesDom;\r\n        if (state.outputAry.length) {\r\n            /* if (state.outputAry.length > 1) {\r\n                let mutation = this.createEl(\"mutation\");\r\n                mutation.setAttribute(\"elseif\", state.outputAry.length - 1);\r\n                triggerEventDom.appendChild(mutation);\r\n            } */\r\n            let parentDom;\r\n\r\n            state.outputAry.forEach((outputItem, index) => {\r\n                let nextDom = this.createEl(\"next\");\r\n                if (!nextStatesDom) {\r\n                    nextStatesDom = nextDom;\r\n                }\r\n                triggerEventDom = this.createEl(\"block\");\r\n                triggerEventDom.setAttribute(\"type\", \"state_trigger_event\");\r\n                triggerEventDom.setAttribute(\"id\", outputItem.lineId);\r\n                // triggerEventDom.setAttribute(\"start_state\", JSON.stringify(state)); // TODO 按需简化存储的start_state数据\r\n\r\n                let triggerEventStatement;\r\n                triggerEventStatement = this.createEl(\"statement\");\r\n                triggerEventStatement.setAttribute(\"name\", `DO0`);\r\n                // triggerEventStatement.setAttribute(\"id\", `${outputItem.lineId}`);\r\n                //outputAry里面只存放了lineId 所以我们需要做以下事情：\r\n                //1 根据lineId找到对应的line数据\r\n                //2 根据line里面的endState的stateId找到对应的state数据\r\n                let line = thread.lineAry.find((item) => {\r\n                    return item.lineId === outputItem.lineId;\r\n                });\r\n                if (line) {\r\n                    triggerEventDom.setAttribute(\"d\", line.d);\r\n                    if (line.desc) {\r\n                        let commentDom = this.createCommentDom({\r\n                            value: line.desc\r\n                        });\r\n                        triggerEventDom.appendChild(commentDom);\r\n                    }\r\n                    let state = thread.stateAry.find((item) => {\r\n                        return item.stateId === line.endState.stateId;\r\n                    });\r\n                    if (state) {\r\n                        triggerEventDom.setAttribute(\"end_state\", JSON.stringify(state)); // TODO 按需简化存储的end_state数据\r\n                        triggerEventStatement.appendChild(Util.state2dom(state, thread));\r\n                    } else {\r\n                        console.error(\"data error -^- \");\r\n                    }\r\n                }\r\n                if (triggerEventStatement) {\r\n                    triggerEventDom.appendChild(triggerEventStatement);\r\n                }\r\n                nextDom.appendChild(triggerEventDom);\r\n                if (parentDom) {\r\n                    parentDom.appendChild(nextDom);\r\n                }\r\n                parentDom = triggerEventDom;\r\n\r\n            });\r\n        }\r\n        return nextStatesDom;\r\n    },\r\n\r\n    genBlockType(type) {\r\n        let ret = \"state_opr\";\r\n        if (type === \"loopDiv\") {\r\n            ret = \"controls_whileUntil\";\r\n        }\r\n        return ret;\r\n    },\r\n    /**\r\n     * 保存状态块的位置信息到Dom中\r\n     * @param {*} el 新建的和状态对应的Dom节点\r\n     * @param {*} state 当前操作的状态\r\n     */\r\n    saveStateXY(el, state) {\r\n        el.setAttribute(\"sx\", state.x);\r\n        el.setAttribute(\"sy\", state.y);\r\n    },\r\n    /**\r\n     * 保存状态块的数据到Dom中\r\n     * @param {*} el 新建的和状态对应的Dom节点\r\n     * @param {*} state 当前操作的状态\r\n     */\r\n    saveStateBlockDataInDom(el, state) {\r\n        switch (state.stateType) {\r\n            case 'stateDiv': //状态执行\r\n                this.saveStateXY(el, state);\r\n                break;\r\n            case 'state_trigger_event': //连线\r\n                this.saveLineData(el, state);\r\n            default:\r\n                break;\r\n        }\r\n    },\r\n    /**\r\n     * 保存连线数据到Dom\r\n     * @param {*} el 新建的和状态对应的Dom节点\r\n     * @param {*} state 当前操作的状态\r\n     */\r\n    saveLineData(el, state) {\r\n        el.setAttribute(\"d\", state.d);\r\n        el.setAttribute(\"start_state\", JSON.stringify(state.startState));\r\n        el.setAttribute(\"end_state\", JSON.stringify(state.startState));\r\n    },\r\n    /**\r\n     * 将一个状态块转为Dom节点\r\n     * @param {*} rootState \r\n     * @param {*} threadData \r\n     */\r\n    state2dom(rootState, threadData) {\r\n        let rootEl = this.createEl(\"block\");\r\n        console.log(\r\n            rootState.stateId +\r\n            \" --- \" +\r\n            rootState.name +\r\n            \" --- \" +\r\n            rootState.stateType\r\n        );\r\n        // rootEl.setAttribute(\"id\", rootState.stateId);\r\n        rootEl.setAttribute(\"type\", this.genBlockType(rootState.stateType));\r\n        this.saveStateBlockDataInDom(rootEl, rootState);\r\n\r\n\r\n        let fieldDom = this.createFieldDom({\r\n            id: rootState.stateId,\r\n            name: \"field_state\",\r\n            value: rootState.name,\r\n        });\r\n        rootEl.appendChild(fieldDom);\r\n\r\n        let fieldX = this.createFieldDom({\r\n            id: rootState.stateId,\r\n            name: \"SX_FIELD\",\r\n            value: 8888 //rootState.x,\r\n        });\r\n        rootEl.appendChild(fieldX);\r\n\r\n        let nextStatesDom = this.createNextStatesDom2(rootState, threadData);\r\n        if (nextStatesDom) {\r\n            rootEl.appendChild(nextStatesDom);\r\n        }\r\n        return rootEl;\r\n    },\r\n    /**\r\n     * 创建线程定义块的Dom\r\n     * @param {*} thread \r\n     * @param {*} threadProcedureId 线程的函数id\r\n     */\r\n    createThreadDefDom(thread, threadProcedureId) {\r\n        /* <block type=\"thread_def\" id=\"ISJ:}kp8l):hy~wr5{x5\" x=\"-187\" y=\"-87\">\r\n            <field name=\"NAME\">thread</field>\r\n            <statement name=\"CALLBACK\">\r\n                <block type=\"procedure_select\" id=\"IK`|)2n6nVKsvFJ4VlXC\">\r\n                    <field name=\"field_procedure\" id=\"aewyJ+/)D`VHlrJ$BgFT\">thread_p</field>\r\n                </block>\r\n            </statement>\r\n        </block> */\r\n        // const procedureDefId = this.genUid();\r\n        let threadDefDom = this.createEl('block', {\r\n            type: \"thread_def\"\r\n        });\r\n        let fieldDom = this.createEl('field', {\r\n            name: 'NAME',\r\n            textContent: thread.name\r\n        });\r\n        fieldDom.textContent = thread.name;\r\n\r\n        let statementDom = this.createEl('statement', {\r\n            name: 'CALLBACK'\r\n        });\r\n        let procedureSelectBlockDom = this.createEl('block', {\r\n            type: 'procedure_select'\r\n        });\r\n        let fieldProcedureDom = this.createEl('field', {\r\n            name: 'field_procedure',\r\n            id: threadProcedureId,\r\n        });\r\n        fieldProcedureDom.textContent = thread.name + \"_function\";\r\n        procedureSelectBlockDom.appendChild(fieldProcedureDom);\r\n        statementDom.appendChild(procedureSelectBlockDom);\r\n        threadDefDom.appendChild(fieldDom);\r\n        threadDefDom.appendChild(statementDom);\r\n\r\n        return threadDefDom;\r\n    },\r\n    /**\r\n     * 创建线程函数定义块的Dom\r\n     * @param {*} thread \r\n     * @param {*} threadProcedureId \r\n     * @param {*} statesDom 所有连接的状态\r\n     */\r\n    createThreadProcedureDom(thread, threadProcedureId, statesDom) {\r\n        console.log('---thread.name---' + thread.name);\r\n        /* <block type=\"procedures_defnoreturn\" id=\"aewyJ+/)D`VHlrJ$BgFT\" x=\"463\" y=\"-113\">\r\n            <field name=\"NAME\">thread_p</field>\r\n            <comment pinned=\"false\" h=\"80\" w=\"160\">Describe this function...</comment>\r\n            <statement name=\"STACK\">\r\n            </statement>\r\n        </block> */\r\n        let threadProcedureDom = this.createEl('block', {\r\n            type: 'procedures_defnoreturn',\r\n            id: threadProcedureId\r\n        });\r\n        let fieldDom = this.createEl('field', {\r\n            name: 'NAME',\r\n\r\n        });\r\n        fieldDom.textContent = thread.name + \"_function\";\r\n        let statementDom = this.createEl('statement', {\r\n            name: 'STACK'\r\n        });\r\n        statementDom.appendChild(statesDom);\r\n        threadProcedureDom.appendChild(fieldDom);\r\n        threadProcedureDom.appendChild(statementDom);\r\n        return threadProcedureDom;\r\n    },\r\n    /**\r\n     * 获取唯一id，同google blockly产生唯一id的方法\r\n     */\r\n    genUid() {\r\n        var length = 20;\r\n        var soupLength = SOUP.length;\r\n        var id = [];\r\n        for (var i = 0; i < length; i++) {\r\n            id[i] = SOUP.charAt(Math.random() * soupLength);\r\n        }\r\n        return id.join('');\r\n    },\r\n    getDomChildren(dom) {\r\n        var ary = [];\r\n        if (dom.children) {\r\n            ary = Array.prototype.slice.call(dom.children);\r\n        }\r\n        return ary;\r\n    },\r\n    toNum(str) {\r\n        return parseInt(str, 10);\r\n    },\r\n    getPrevStateDom(dom) {\r\n        var parent = dom.parentNode;\r\n        if (parent) {\r\n            if (parent.getAttribute('type') === 'state_opr') {\r\n                return parent;\r\n            } else {\r\n                parent = this.getPrevStateDom(parent);\r\n            }\r\n        }\r\n        return parent;\r\n    },\r\n    getStateXY(stateDom, existStates) {\r\n        /**\r\n         * 1.获取这个Dom节点的sx, sy值，如果存在就使用这个值，如果不存在，则获取上一个状态的sx, sy值，然后查看这个stateDom处于上一个状态的outputAry中的第几个元素，假设是第3个，则\r\n         * XY的值为：  x: targetDom.sx + gap_x(水平方向间隔)  y: targetDom.sx + index * gap_y\r\n         */\r\n        const gap_x = 150;\r\n        const gap_y = 100;\r\n        let x = this.toNum(stateDom.getAttribute('sx'));\r\n        let y = this.toNum(stateDom.getAttribute('sy'));\r\n\r\n        function getLineDom(dom) {\r\n            var parent = dom.parentNode;\r\n            if (parent) {\r\n                if (parent.getAttribute && parent.getAttribute('type') === 'state_trigger_event') {\r\n                    return parent;\r\n                } else {\r\n                    parent = getLineDom(parent);\r\n                }\r\n            }\r\n            return parent;\r\n        }\r\n\r\n        let prevLineId = getLineDom(stateDom) && getLineDom(stateDom).getAttribute('id');\r\n        // 正常拼接的情况下这个prevLineId是一定存在的\r\n        if (!x || x === 'undefined') { // x是未定义的则 y也是未定义的\r\n            let prevStateDom = Util.getPrevStateDom(stateDom);\r\n            if (!prevStateDom) {\r\n                return {\r\n                    x: 0,\r\n                    y: 0\r\n                }\r\n            }\r\n            let prevX = this.toNum(prevStateDom.getAttribute('sx'));\r\n            let prevY = this.toNum(prevStateDom.getAttribute('sy'));\r\n            if (!prevX || prevX === 'undefined') {\r\n                prevX = 0;\r\n                prevY = 0;\r\n            }\r\n            x = prevX + gap_x;\r\n            var index = 0;\r\n            var prevState = existStates.find(item => {\r\n                return item.stateId === Util.getEntityStateId(prevStateDom);\r\n            })\r\n\r\n            prevState.outputAry.forEach((item, i) => {\r\n                if (item.lineId === prevLineId) {\r\n                    index = i;\r\n                    return false; // return false 结束forEach\r\n                }\r\n            })\r\n            y = prevY + index * gap_y;\r\n        }\r\n        return {\r\n            x: x,\r\n            y: y\r\n        }\r\n    },\r\n    getEntityStateId(stateDom) {\r\n        return stateDom.children[0].getAttribute('id');\r\n    },\r\n    /**\r\n     * 将所有线程的数据（包括了状态和连线）转为Blockly可识别的xml数据\r\n     * @param {*} threadAry 线程数据\r\n     */\r\n    state2blockly(threadAry) {\r\n        /**\r\n         * 1.找到线程中有开始标记的根状态\r\n         * 2.遍历根状态的output，生成特殊的if-else if 结构，注意：默认不采用else\r\n         *\r\n         */\r\n        let statePageData = threadAry;\r\n\r\n        let blocklyXml = Util.createEl(\"xml\");\r\n        blocklyXml.setAttribute(\r\n            \"xmlns\",\r\n            \"https://developers.google.com/blockly/xml\"\r\n        );\r\n\r\n        statePageData.forEach((thread, index) => {\r\n            let firstState = thread.stateAry[0];\r\n            let listsDom = Util.createEl('block');\r\n            listsDom.setAttribute('type', 'lists_state');\r\n            listsDom.setAttribute('x', 300 + (700 * index));\r\n            listsDom.setAttribute('y', 150);\r\n\r\n            let mutationDom = Util.createEl('mutation');\r\n            mutationDom.setAttribute('items', thread.stateAry.length);\r\n            listsDom.appendChild(mutationDom);\r\n\r\n            thread.stateAry.forEach((state, i) => {\r\n                let stateDefBlock = Util.createStateDefBlock(state, i);\r\n                listsDom.appendChild(stateDefBlock);\r\n                // blocklyXml.appendChild(stateDefBlock);\r\n            })\r\n            var statesDom = Util.state2dom(firstState, thread);\r\n            const procedureDefId = Util.genUid();\r\n            let threadDefDom = Util.createThreadDefDom(thread, procedureDefId);\r\n            let threadProcedureDom = Util.createThreadProcedureDom(thread, procedureDefId, statesDom);\r\n            if (Util.isDefined(thread.x)) {\r\n                threadDefDom.setAttribute('x', thread.x);\r\n            } else {\r\n                threadDefDom.setAttribute('x', index * 700);\r\n            }\r\n            if (Util.isDefined(thread.y)) {\r\n                threadDefDom.setAttribute('y', thread.y);\r\n            } else {\r\n                threadDefDom.setAttribute('y', 10);\r\n            }\r\n            threadProcedureDom.setAttribute('x', index * 700);\r\n            threadProcedureDom.setAttribute('y', 200);\r\n            //这个添加的顺序很重要！！！\r\n            blocklyXml.appendChild(listsDom);\r\n            blocklyXml.appendChild(threadProcedureDom);\r\n            blocklyXml.appendChild(threadDefDom);\r\n        });\r\n\r\n        return blocklyXml.outerHTML;\r\n    },\r\n    /**\r\n     * 将Blockly数据转为状态图可识别的数据\r\n     */\r\n    blockly2state(xmlDom) {\r\n        if (typeof xmlDom === 'string') {\r\n            xmlDom = new DOMParser().parseFromString(xmlDom, 'text/xml');\r\n        }\r\n\r\n        const STATE_BLOCK = 'state_opr';\r\n        let stateAry = []; //所有的状态数据集合\r\n        let lineAry = []; //所有的连线数据集合\r\n        function extractStateAndLine(stateDom) {\r\n            /* <block type=\"state_opr\" id=\"0eRjWo`*LW!O%5)$3!bj\" sx=\"394\" sy=\"201\">\r\n                <field name=\"field_state\" id=\"state-1607658086399\">状态描述0</field>\r\n            </block> */\r\n            if (stateDom.tagName === 'block' && stateDom.getAttribute('type') === STATE_BLOCK) {\r\n                let stateObj = {\r\n                    stateId: Util.getEntityStateId(stateDom), //!!!这里的id不是block.state_opr的 id 哟，而是它下面的field.field_state的id\r\n                    stateType: stateDom.getAttribute('type') === STATE_BLOCK ? 'stateDiv' : 'loopDiv',\r\n                    bx: parseInt(stateDom.getAttribute('x'), 10), // blockly中与此对应的图形块的x\r\n                    by: parseInt(stateDom.getAttribute('y'), 10), // blockly中与此对应的图形块的y\r\n                    x: Util.getStateXY(stateDom, stateAry).x, //stateDom.getAttribute('sx'),\r\n                    y: Util.getStateXY(stateDom, stateAry).y,\r\n                    width: '76px',\r\n                    height: '40px',\r\n                    // virtualHeight: Util.getVirtualHeight(outputAry), //TODO 开始状态为这个stateDom的所有状态高度之和\r\n                    name: stateDom.children[0].textContent,\r\n                    inputAry: [],\r\n                    outputAry: [],\r\n                    children: [],\r\n                    nodeHeight: 0 // 如果该节点有2个分支，且分支是叶子节点，则这个节点的nodeHeight = 2; 总之，nodeHeight = 各分支nodeHeight之和 - 这个参数为自动布局所用\r\n                }\r\n\r\n\r\n\r\n                function dom2State(dom) {\r\n                    let stateId = dom.getAttribute('id');\r\n                    if (dom.getAttribute('type') === STATE_BLOCK) {\r\n                        stateId = Util.getEntityStateId(dom);\r\n                    }\r\n                    return {\r\n                        stateId: stateId,\r\n                        stateType: STATE_BLOCK\r\n                    };\r\n                }\r\n\r\n                function findOutputLinesOfStateDom(stateDom, outputLines) {\r\n                    // 如果stateDom中有next节点 且 next节点的children中有block.state_trigger_event 则将这个block.state_trigger_event push 到 outputLines\r\n                    // 然后将这个block.state_trigger_event作为新的stateDom，查找其包含的block.state_trigger_event 这样遍历查找所有的block.state_trigger_event就找到了outputLines\r\n                    let children = Util.getDomChildren(stateDom);\r\n                    children.forEach(child => {\r\n                        if (child.tagName === 'next') { //所有next节点的children都只有1个\r\n                            if (child.children && child.children[0] && child.children[0].getAttribute('type') === 'state_trigger_event') {\r\n                                let lineDom = child.children[0];\r\n                                let newLine = {\r\n                                    lineId: lineDom.getAttribute('id'),\r\n                                    d: lineDom.getAttribute('d'),\r\n                                    startState: dom2State(stateDom),\r\n                                    endState: dom2State(Util.getEndStateDomOfLine(lineDom)),\r\n                                };\r\n\r\n                                let existLineOfOutputLines = outputLines.find(item => {\r\n                                    return item.lineId === lineDom.getAttribute('id');\r\n                                })\r\n                                if (!existLineOfOutputLines) {\r\n                                    outputLines.push(newLine);\r\n                                }\r\n\r\n                                let existLineOfLineAry = lineAry.find(item => {\r\n                                    return item.lineId === lineDom.getAttribute('id')\r\n                                })\r\n                                if (!existLineOfLineAry) {\r\n                                    lineAry.push(newLine);\r\n                                }\r\n                                findOutputLinesOfStateDom(lineDom, outputLines);\r\n                            }\r\n                        }\r\n                    })\r\n                    return outputLines;\r\n                }\r\n\r\n                function findInputLinesOfStateDom(stateDom, inputLines) {\r\n                    //逐级往上寻找type === 'state_opr'的块即inputLines    //  block.state_trigger_event > statement > block.state_opr\r\n                    let lineDom = stateDom.parentNode && stateDom.parentNode.parentNode;\r\n                    if (lineDom && lineDom.getAttribute('type') === 'state_trigger_event') {\r\n                        let newLine = {\r\n                            lineId: lineDom.getAttribute('id'),\r\n                            d: lineDom.getAttribute('d'),\r\n                            startState: dom2State(Util.getPrevStateDom(lineDom)),\r\n                            endState: dom2State(stateDom)\r\n                        };\r\n\r\n                        let existLineOfInputLines = inputLines.find(item => {\r\n                            return item.lineId === newLine.lineId;\r\n                        })\r\n                        if (!existLineOfInputLines) {\r\n                            inputLines.push(newLine);\r\n                        }\r\n\r\n                        let existLineOfLineAry = lineAry.find(item => {\r\n                            return item.lineId === newLine.lineId;\r\n                        })\r\n                        if (!existLineOfLineAry) {\r\n                            lineAry.push(newLine);\r\n                        }\r\n                    }\r\n                    return inputLines;\r\n                }\r\n\r\n                findOutputLinesOfStateDom(stateDom, stateObj.outputAry);\r\n                findInputLinesOfStateDom(stateDom, stateObj.inputAry);\r\n\r\n                let existStateInStateAry = stateAry.find(state => {\r\n                    return state.stateId === stateObj.stateId;\r\n                })\r\n                if (!existStateInStateAry) {\r\n                    stateAry.push(stateObj);\r\n                }\r\n            }\r\n            if (stateDom.children && stateDom.children.length) {\r\n                for (let j = 0; j < stateDom.children.length; j++) {\r\n                    let child = stateDom.children[j];\r\n                    extractStateAndLine(child);\r\n                }\r\n            }\r\n        }\r\n        extractStateAndLine(xmlDom);\r\n        return {\r\n            stateAry: stateAry,\r\n            lineAry: lineAry\r\n        }\r\n    },\r\n    getEndStateDomOfLine(lineDom){\r\n        let children = Array.prototype.slice.call(lineDom.childNodes);\r\n        let statement = children.find(dom => {\r\n            return dom.nodeName === 'statement'\r\n        })\r\n        let statementChildren = Array.prototype.slice.call(statement.childNodes);\r\n        let endStateDom = statementChildren.find(dom => {\r\n            return dom.nodeName === 'block'\r\n        })\r\n        if (!endStateDom){\r\n            console.error('数据错误：触发事件连线没有连接正确的状态');\r\n        }\r\n        return endStateDom;\r\n    },\r\n    /**\r\n     * 将Blockly数据复制到剪切板 - 调试时用\r\n     * @param {*} blocklyXml \r\n     */\r\n    copyBlocklyXml2Clipboard(blocklyXml) {\r\n        // window.stateDataXml = blocklyXml.outerHTML;\r\n        let hiddenInput = document.createElement(\"input\");\r\n        hiddenInput.setAttribute(\"type\", \"text\");\r\n        hiddenInput.setAttribute(\"value\", blocklyXml);\r\n        hiddenInput.setAttribute(\"style\", \"height: 0; overflow: hidden;\");\r\n        document.body.appendChild(hiddenInput);\r\n        hiddenInput.focus();\r\n        hiddenInput.select();\r\n        document.execCommand(\"copy\");\r\n        document.body.removeChild(hiddenInput);\r\n    },\r\n    workspace2dom() {\r\n        var xmlText = '';\r\n        var iframeDom = document.getElementById('blocklyIframe');\r\n        if (iframeDom) {\r\n            var win = iframeDom.contentWindow;\r\n            var xmlDom = win.Blockly.Xml.workspaceToDom(win.Code.workspace);\r\n            xmlText = win.Blockly.Xml.domToPrettyText(xmlDom);\r\n\r\n        } else {\r\n            console.error('当前页面没有嵌入blockly');\r\n        }\r\n        return xmlText;\r\n    },\r\n    /**\r\n     * 在自动布局前重置所有状态的x,y坐标\r\n     */\r\n    resetAllStateData(thread) {\r\n        if (thread) {\r\n            thread.stateAry.forEach(state => {\r\n                state.x = 0;\r\n                state.y = 0;\r\n            })\r\n        }\r\n    },\r\n    autoLayout(thread) {\r\n        if (thread) {\r\n            let firstState = Util.findFirstState(thread.stateAry);\r\n            thread.stateAry.forEach(state => {\r\n                let prevState; //TODO 当前状态的前一个兄弟节点\r\n                state.virtualHeight = Util.getVirtualHeight(state);\r\n                state.y = prevState.y + prevState.virtualHeight;\r\n            })\r\n        }\r\n    },\r\n    /**\r\n     * 找到“开始状态”\r\n     */\r\n    findFirstState(stateAry) {\r\n        return stateAry[0]; //TODO 后续根据特定标记查找\r\n    },\r\n    getVirtualHeight(state) {\r\n        let outputStates = [];\r\n        state.outputAry.forEach(line => {\r\n            let lineObj = thread.lineAry.find(item => {\r\n                return item.lineId === line.lineId;\r\n            })\r\n            let endStateOfLine = thread.stateAry.find(item => {\r\n                return item.stateId === lineObj.endState.stateId;\r\n            })\r\n            outputStates.push(endStateOfLine);\r\n        })\r\n\r\n        let sum = 0;\r\n        outputStates.forEach(state => {\r\n            if (!state.virtualHeight) {\r\n                state.virtualHeight = Util.getVirtualHeight(state);\r\n                sum += state.virtualHeight;\r\n            }\r\n        })\r\n        return sum;\r\n    },\r\n    getAutoXY(state) {\r\n        //x,y是同时设置的，所以只需判断其中一个即可\r\n        if (state.y) {\r\n            return {\r\n                x: state.x,\r\n                y: state.y\r\n            }\r\n        } else {\r\n            state.y = prevState.y + prevState.virtualHeight;\r\n        }\r\n    },\r\n\r\n\r\n    testLayout(thread) {\r\n        var g = new dagre.graphlib.Graph({\r\n            directed: true,\r\n            compound: true,\r\n            multigraph: true,\r\n           \r\n        });\r\n        g.setGraph({\r\n            rankdir: 'LR'\r\n        });\r\n        g.setDefaultEdgeLabel(function() {\r\n            return {};\r\n        });\r\n\r\n        thread.stateAry.forEach(state => {\r\n            g.setNode(state.stateId, {\r\n                label: state.name,\r\n                // width: state.width || 76,\r\n                // height: state.height || 40\r\n                width: 76,\r\n                height: 40\r\n            });\r\n\r\n            state.outputAry.forEach(line => {\r\n                let lineObj = thread.lineAry.find(item => {\r\n                    return item.lineId === line.lineId;\r\n                })\r\n                let endState = thread.stateAry.find(item => {\r\n                    return item.stateId === lineObj.endState.stateId;\r\n                })\r\n                // g.setEdge(state.stateId, endState.stateId, line.lineId, lineObj.desc); //这种设置方式会报错 可能是dagre对graphlib的封装接口未同步\r\n                g.setEdge(state.stateId, endState.stateId, {\r\n                    label: line.lineId\r\n                });\r\n            })\r\n        })\r\n\r\n        dagre.layout(g);\r\n        g.nodes().forEach(function(nodeId) {\r\n            let node = g.node(nodeId);\r\n            let state = thread.stateAry.find(item => {\r\n                return item.stateId === nodeId;\r\n            });\r\n            if (state){\r\n                state.x = node.x;\r\n                state.y = node.y;\r\n            }\r\n            console.log(\"Node \" + nodeId + \": \" + JSON.stringify(g.node(nodeId)));\r\n        });\r\n        g.edges().forEach(function(line) {\r\n            console.log(\"Edge \" + line.v + \" -> \" + line.w + \": \" + JSON.stringify(g.edge(line)));\r\n        });\r\n    }\r\n}\r\nexport default Util;"]}