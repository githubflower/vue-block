{"version":3,"sources":["util.js"],"names":["NAME_SPACE","Util","createEl","tagName","document","createElementNS","createFieldDom","field","container","setAttribute","name","id","textContent","value","createCommentDom","comment","commentDom","pinned","createStateDefBlock","state","stateDom","stateId","fieldDom","appendChild","createNextStatesDom","thread","nextDom","outputDom","outputAry","length","mutation","forEach","outputItem","index","outputStateDom","lineId","line","lineAry","find","item","stateAry","endState","state2dom","console","error","createNextStatesDom2","triggerEventDom","nextStatesDom","parentDom","triggerEventStatement","desc","genBlockType","type","ret","rootState","threadData","rootEl","log","stateType"],"mappings":"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","sourcesContent":["const NAME_SPACE = \"https://developers.google.com/blockly/xml\";\r\nvar Util = {\r\n    createEl(tagName) {\r\n        return document.createElementNS(NAME_SPACE, tagName);\r\n    },\r\n    createFieldDom(field) {\r\n        let container = this.createEl(\"field\");\r\n        container.setAttribute(\"name\", field.name);\r\n        if (field.id){\r\n            container.setAttribute('id', field.id);\r\n        }\r\n        container.textContent = field.value;\r\n        return container;\r\n    },\r\n\r\n    createCommentDom(comment) {\r\n        let commentDom = this.createEl('comment');\r\n        commentDom.setAttribute('pinned', comment.pinned || false);\r\n        commentDom.textContent = comment.value;\r\n        return commentDom;\r\n    },\r\n\r\n    createStateDefBlock(state) {\r\n        var stateDom = this.createEl('block');\r\n        stateDom.setAttribute('type', 'state_def');\r\n        stateDom.setAttribute('id', state.stateId);\r\n        var fieldDom = this.createFieldDom({\r\n            name: 'NAME',\r\n            value: state.name\r\n        });\r\n        stateDom.appendChild(fieldDom);\r\n        return stateDom;\r\n    },\r\n\r\n    createNextStatesDom(state, thread){\r\n        let nextDom, outputDom;\r\n\r\n        if (state.outputAry.length) {\r\n            nextDom = this.createEl(\"next\");\r\n            outputDom = this.createEl(\"block\");\r\n            outputDom.setAttribute(\"type\", \"controls_if\");\r\n            if (state.outputAry.length > 1) {\r\n                let mutation = this.createEl(\"mutation\");\r\n                mutation.setAttribute(\"elseif\", state.outputAry.length - 1);\r\n                outputDom.appendChild(mutation);\r\n            }\r\n            state.outputAry.forEach((outputItem, index) => {\r\n                let outputStateDom;\r\n                outputStateDom = this.createEl(\"statement\");\r\n                outputStateDom.setAttribute(\"name\", `DO${index}`);\r\n                outputStateDom.setAttribute(\"id\", `${outputItem.lineId}`);\r\n                //outputAry里面只存放了lineId 所以我们需要做以下事情：\r\n                //1 根据lineId找到对应的line数据\r\n                //2 根据line里面的endState的stateId找到对应的state数据\r\n                let line = thread.lineAry.find((item) => {\r\n                    return item.lineId === outputItem.lineId;\r\n                });\r\n                if (line) {\r\n                    let state = thread.stateAry.find((item) => {\r\n                        return item.stateId === line.endState.stateId;\r\n                    });\r\n                    if (state) {\r\n                        outputStateDom.appendChild(Util.state2dom(state, thread));\r\n                    } else {\r\n                        console.error(\"data error -^- \");\r\n                    }\r\n                }\r\n                if (outputStateDom) {\r\n                    outputDom.appendChild(outputStateDom);\r\n                }\r\n            });\r\n            nextDom.appendChild(outputDom);\r\n        }\r\n        return nextDom;\r\n    },\r\n\r\n    // 触发事件描述采用独立的结构\r\n    createNextStatesDom2(state, thread) {\r\n        let triggerEventDom;\r\n        let nextStatesDom;\r\n        if (state.outputAry.length) {\r\n            /* if (state.outputAry.length > 1) {\r\n                let mutation = this.createEl(\"mutation\");\r\n                mutation.setAttribute(\"elseif\", state.outputAry.length - 1);\r\n                triggerEventDom.appendChild(mutation);\r\n            } */\r\n            let parentDom;\r\n            \r\n            state.outputAry.forEach((outputItem, index) => {\r\n                let nextDom = this.createEl(\"next\");\r\n                if (!nextStatesDom){\r\n                    nextStatesDom = nextDom;\r\n                }\r\n                triggerEventDom = this.createEl(\"block\");\r\n                triggerEventDom.setAttribute(\"type\", \"state_trigger_event\");\r\n                triggerEventDom.setAttribute(\"id\", outputItem.lineId);\r\n\r\n                let triggerEventStatement;\r\n                triggerEventStatement = this.createEl(\"statement\");\r\n                triggerEventStatement.setAttribute(\"name\", `DO0`);\r\n                // triggerEventStatement.setAttribute(\"id\", `${outputItem.lineId}`);\r\n                //outputAry里面只存放了lineId 所以我们需要做以下事情：\r\n                //1 根据lineId找到对应的line数据\r\n                //2 根据line里面的endState的stateId找到对应的state数据\r\n                let line = thread.lineAry.find((item) => {\r\n                    return item.lineId === outputItem.lineId;\r\n                });\r\n                if (line) {\r\n                    if (line.desc){\r\n                        let commentDom = this.createCommentDom({\r\n                            value: line.desc\r\n                        });\r\n                        triggerEventDom.appendChild(commentDom);\r\n                    }\r\n                    let state = thread.stateAry.find((item) => {\r\n                        return item.stateId === line.endState.stateId;\r\n                    });\r\n                    if (state) {\r\n                        triggerEventStatement.appendChild(Util.state2dom(state, thread));\r\n                    } else {\r\n                        console.error(\"data error -^- \");\r\n                    }\r\n                }\r\n                if (triggerEventStatement) {\r\n                    triggerEventDom.appendChild(triggerEventStatement);\r\n                }\r\n                nextDom.appendChild(triggerEventDom);\r\n                if (parentDom){\r\n                    parentDom.appendChild(nextDom);\r\n                }\r\n                parentDom = triggerEventDom;\r\n                \r\n            });\r\n        }\r\n        return nextStatesDom;\r\n    },\r\n\r\n    genBlockType(type) {\r\n        let ret = \"state_opr\";\r\n        if (type === \"loopDiv\") {\r\n            ret = \"controls_whileUntil\";\r\n        }\r\n        return ret;\r\n    },\r\n\r\n    state2dom(rootState, threadData){\r\n        let rootEl = this.createEl(\"block\");\r\n        console.log(\r\n            rootState.stateId +\r\n            \" --- \" +\r\n            rootState.name +\r\n            \" --- \" +\r\n            rootState.stateType\r\n        );\r\n        rootEl.setAttribute(\"id\", rootState.stateId);\r\n        // rootEl.setAttribute('type', rootState.type || 'state_run');\r\n        rootEl.setAttribute(\"type\", this.genBlockType(rootState.stateType));\r\n        \r\n        let fieldDom = this.createFieldDom({\r\n            id: rootState.stateId,\r\n            name: \"field_state\",\r\n            value: rootState.name,\r\n        });\r\n        rootEl.appendChild(fieldDom);\r\n\r\n        let nextStatesDom = this.createNextStatesDom2(rootState, threadData);\r\n        if (nextStatesDom) {\r\n            rootEl.appendChild(nextStatesDom);\r\n        }\r\n        return rootEl;\r\n    }\r\n}\r\nexport default Util;"],"file":"util.dev.js"}