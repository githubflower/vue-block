{"version":3,"sources":["util.js"],"names":["NAME_SPACE","SOUP","Util","isDefined","a","createEl","tagName","attrs","dom","document","createElementNS","key","setAttribute","createFieldDom","field","container","name","id","textContent","value","createCommentDom","comment","commentDom","pinned","createStateDefBlock","state","index","valueDom","stateDom","stateId","fieldDom","appendChild","createNextStatesDom","thread","nextDom","outputDom","outputAry","length","mutation","forEach","outputItem","outputStateDom","lineId","line","lineAry","find","item","stateAry","endState","state2dom","console","error","createNextStatesDom2","triggerEventDom","nextStatesDom","parentDom","triggerEventStatement","d","desc","JSON","stringify","genBlockType","type","ret","saveStateXY","el","x","y","saveStateBlockDataInDom","stateType","saveLineData","startState","rootState","threadData","rootEl","log","createThreadDefDom","threadProcedureId","threadDefDom","statementDom","procedureSelectBlockDom","fieldProcedureDom","createThreadProcedureDom","statesDom","threadProcedureDom","genUid","soupLength","i","charAt","Math","random","join","getDomChildren","ary","children","Array","prototype","slice","call","toNum","str","parseInt","translatePX2Num","test","replace","getPrevStateDom","parent","parentNode","getAttribute","getStateXY","existStates","gap_x","gap_y","getLineDom","prevLineId","prevStateDom","prevX","prevY","prevState","getEntityStateId","state2blockly","threadAry","statePageData","blocklyXml","firstState","listsDom","mutationDom","stateDefBlock","procedureDefId","outerHTML","blockly2state","xmlDom","DOMParser","parseFromString","STATE_BLOCK","extractStateAndLine","dom2State","findOutputLinesOfStateDom","outputLines","child","lineDom","newLine","getStartStateDomOfLine","getEndStateDomOfLine","existLineOfOutputLines","push","existLineOfLineAry","findInputLinesOfStateDom","inputLines","existLineOfInputLines","stateObj","bx","by","width","height","inputAry","nodeHeight","existStateInStateAry","j","childNodes","statement","nodeName","statementChildren","endStateDom","copyBlocklyXml2Clipboard","hiddenInput","createElement","body","focus","select","execCommand","removeChild","workspace2dom","xmlText","iframeDom","getElementById","win","contentWindow","Blockly","Xml","workspaceToDom","Code","workspace","domToPrettyText","resetAllStateData","autoLayout","findFirstState","virtualHeight","getVirtualHeight","outputStates","lineObj","endStateOfLine","sum","getAutoXY","getDomByStateId","doms","getElementsByClassName","testLayout","g","dagre","graphlib","Graph","multigraph","setGraph","rankdir","align","edgesep","ranksep","setDefaultEdgeLabel","setNode","label","QBlock","State","getStateWidth","getStateHeight","setEdge","layout","nodes","nodeId","node","setStateXYbyNode","store","stateData","lineMap","refresh","halfStateWidth","halfStateHeight"],"mappings":"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","sourcesContent":["const NAME_SPACE = \"https://developers.google.com/blockly/xml\";\r\nconst SOUP = '!#$%()*+,-./:;=?@[]^_`{|}~ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\nimport dagre from 'dagre'\r\nimport QBlock from './qblock.js'\r\nvar Util = {\r\n    isDefined(a) {\r\n        return !((a === '') || (a === null) || (typeof a === 'undefined'));\r\n    },\r\n    createEl(tagName, attrs) {\r\n        var dom = document.createElementNS(NAME_SPACE, tagName);\r\n        if (typeof attrs === 'object') {\r\n            for (var key in attrs) {\r\n                dom.setAttribute(key, attrs[key]);\r\n            }\r\n        }\r\n        return dom;\r\n    },\r\n    createFieldDom(field) {\r\n        let container = this.createEl(\"field\");\r\n        container.setAttribute(\"name\", field.name);\r\n        if (field.id) {\r\n            container.setAttribute('id', field.id);\r\n        }\r\n        container.textContent = field.value;\r\n        return container;\r\n    },\r\n\r\n    /**\r\n     * 创建注释块Dom\r\n     * @param {*} comment \r\n     */\r\n    createCommentDom(comment) {\r\n        let commentDom = this.createEl('comment');\r\n        commentDom.setAttribute('pinned', comment.pinned || false);\r\n        commentDom.textContent = comment.value;\r\n        return commentDom;\r\n    },\r\n\r\n    /**\r\n     * 创建状态定义块Dom\r\n     * @param {*} state \r\n     * @param {*} index \r\n     */\r\n    createStateDefBlock(state, index) {\r\n        var valueDom = this.createEl('value');\r\n        valueDom.setAttribute('name', 'ADD' + index);\r\n\r\n        var stateDom = this.createEl('block');\r\n        stateDom.setAttribute('type', 'state_def');\r\n        stateDom.setAttribute('id', state.stateId);\r\n        var fieldDom = this.createFieldDom({\r\n            name: 'NAME',\r\n            value: state.name\r\n        });\r\n        stateDom.appendChild(fieldDom);\r\n\r\n        valueDom.appendChild(stateDom);\r\n        return valueDom;\r\n    },\r\n\r\n    /**\r\n     * 创建连线Dom以及其连接的状态块的Dom - 触发事件描述采用通用的if-else结构 controls_if \r\n     * ！此方法没有用到，代码暂时先放着\r\n     * @param {*} state \r\n     * @param {*} thread \r\n     */\r\n    createNextStatesDom(state, thread) {\r\n        let nextDom, outputDom;\r\n\r\n        if (state.outputAry.length) {\r\n            nextDom = this.createEl(\"next\");\r\n            outputDom = this.createEl(\"block\");\r\n            outputDom.setAttribute(\"type\", \"controls_if\");\r\n            if (state.outputAry.length > 1) {\r\n                let mutation = this.createEl(\"mutation\");\r\n                mutation.setAttribute(\"elseif\", state.outputAry.length - 1);\r\n                outputDom.appendChild(mutation);\r\n            }\r\n            state.outputAry.forEach((outputItem, index) => {\r\n                let outputStateDom;\r\n                outputStateDom = this.createEl(\"statement\");\r\n                outputStateDom.setAttribute(\"name\", `DO${index}`);\r\n                outputStateDom.setAttribute(\"id\", `${outputItem.lineId}`);\r\n                //outputAry里面只存放了lineId 所以我们需要做以下事情：\r\n                //1 根据lineId找到对应的line数据\r\n                //2 根据line里面的endState的stateId找到对应的state数据\r\n                let line = thread.lineAry.find((item) => {\r\n                    return item.lineId === outputItem.lineId;\r\n                });\r\n                if (line) {\r\n                    let state = thread.stateAry.find((item) => {\r\n                        return item.stateId === line.endState.stateId;\r\n                    });\r\n                    if (state) {\r\n                        outputStateDom.appendChild(Util.state2dom(state, thread));\r\n                    } else {\r\n                        console.error(\"data error -^- \");\r\n                    }\r\n                }\r\n                if (outputStateDom) {\r\n                    outputDom.appendChild(outputStateDom);\r\n                }\r\n            });\r\n            nextDom.appendChild(outputDom);\r\n        }\r\n        return nextDom;\r\n    },\r\n\r\n    /**\r\n     * 创建连线Dom以及其连接的状态块的Dom - 触发事件描述采用独立的结构 state_trigger_event\r\n     * @param {*} state \r\n     * @param {*} thread \r\n     */\r\n    createNextStatesDom2(state, thread) {\r\n        let triggerEventDom;\r\n        let nextStatesDom;\r\n        if (state.outputAry.length) {\r\n            /* if (state.outputAry.length > 1) {\r\n                let mutation = this.createEl(\"mutation\");\r\n                mutation.setAttribute(\"elseif\", state.outputAry.length - 1);\r\n                triggerEventDom.appendChild(mutation);\r\n            } */\r\n            let parentDom;\r\n\r\n            state.outputAry.forEach((outputItem, index) => {\r\n                let nextDom = this.createEl(\"next\");\r\n                if (!nextStatesDom) {\r\n                    nextStatesDom = nextDom;\r\n                }\r\n                triggerEventDom = this.createEl(\"block\");\r\n                triggerEventDom.setAttribute(\"type\", \"state_trigger_event\");\r\n                triggerEventDom.setAttribute(\"id\", outputItem.lineId);\r\n                // triggerEventDom.setAttribute(\"start_state\", JSON.stringify(state)); // TODO 按需简化存储的start_state数据\r\n\r\n                let triggerEventStatement;\r\n                triggerEventStatement = this.createEl(\"statement\");\r\n                triggerEventStatement.setAttribute(\"name\", `DO0`);\r\n                // triggerEventStatement.setAttribute(\"id\", `${outputItem.lineId}`);\r\n                //outputAry里面只存放了lineId 所以我们需要做以下事情：\r\n                //1 根据lineId找到对应的line数据\r\n                //2 根据line里面的endState的stateId找到对应的state数据\r\n                let line = thread.lineAry.find((item) => {\r\n                    return item.lineId === outputItem.lineId;\r\n                });\r\n                if (line) {\r\n                    triggerEventDom.setAttribute(\"d\", line.d);\r\n                    if (line.desc) {\r\n                        let commentDom = this.createCommentDom({\r\n                            value: line.desc\r\n                        });\r\n                        triggerEventDom.appendChild(commentDom);\r\n                    }\r\n                    let state = thread.stateAry.find((item) => {\r\n                        return item.stateId === line.endState.stateId;\r\n                    });\r\n                    if (state) {\r\n                        triggerEventDom.setAttribute(\"end_state\", JSON.stringify(state)); // TODO 按需简化存储的end_state数据\r\n                        triggerEventStatement.appendChild(Util.state2dom(state, thread));\r\n                    } else {\r\n                        console.error(\"data error -^- \");\r\n                    }\r\n                }\r\n                if (triggerEventStatement) {\r\n                    triggerEventDom.appendChild(triggerEventStatement);\r\n                }\r\n                nextDom.appendChild(triggerEventDom);\r\n                if (parentDom) {\r\n                    parentDom.appendChild(nextDom);\r\n                }\r\n                parentDom = triggerEventDom;\r\n\r\n            });\r\n        }\r\n        return nextStatesDom;\r\n    },\r\n\r\n    genBlockType(type) {\r\n        let ret = \"state_opr\";\r\n        if (type === \"loopDiv\") {\r\n            ret = \"controls_whileUntil\";\r\n        }\r\n        return ret;\r\n    },\r\n    /**\r\n     * 保存状态块的位置信息到Dom中\r\n     * @param {*} el 新建的和状态对应的Dom节点\r\n     * @param {*} state 当前操作的状态\r\n     */\r\n    saveStateXY(el, state) {\r\n        el.setAttribute(\"sx\", state.x);\r\n        el.setAttribute(\"sy\", state.y);\r\n    },\r\n    /**\r\n     * 保存状态块的数据到Dom中\r\n     * @param {*} el 新建的和状态对应的Dom节点\r\n     * @param {*} state 当前操作的状态\r\n     */\r\n    saveStateBlockDataInDom(el, state) {\r\n        switch (state.stateType) {\r\n            case 'stateDiv': //状态执行\r\n                this.saveStateXY(el, state);\r\n                break;\r\n            case 'state_trigger_event': //连线\r\n                this.saveLineData(el, state);\r\n            default:\r\n                break;\r\n        }\r\n    },\r\n    /**\r\n     * 保存连线数据到Dom\r\n     * @param {*} el 新建的和状态对应的Dom节点\r\n     * @param {*} state 当前操作的状态\r\n     */\r\n    saveLineData(el, line) {\r\n        el.setAttribute(\"d\", line.d);\r\n        el.setAttribute(\"start_state\", JSON.stringify(line.startState));\r\n        el.setAttribute(\"end_state\", JSON.stringify(line.startState));\r\n    },\r\n    /**\r\n     * 将一个状态块转为Dom节点\r\n     * @param {*} rootState \r\n     * @param {*} threadData \r\n     */\r\n    state2dom(rootState, threadData) {\r\n        let rootEl = this.createEl(\"block\");\r\n        console.log(\r\n            rootState.stateId +\r\n            \" --- \" +\r\n            rootState.name +\r\n            \" --- \" +\r\n            rootState.stateType\r\n        );\r\n        // rootEl.setAttribute(\"id\", rootState.stateId);\r\n        rootEl.setAttribute(\"type\", this.genBlockType(rootState.stateType));\r\n        this.saveStateBlockDataInDom(rootEl, rootState);\r\n\r\n\r\n        let fieldDom = this.createFieldDom({\r\n            id: rootState.stateId,\r\n            name: \"field_state\",\r\n            value: rootState.name,\r\n        });\r\n        rootEl.appendChild(fieldDom);\r\n\r\n        let nextStatesDom = this.createNextStatesDom2(rootState, threadData);\r\n        if (nextStatesDom) {\r\n            rootEl.appendChild(nextStatesDom);\r\n        }\r\n        return rootEl;\r\n    },\r\n    /**\r\n     * 创建线程定义块的Dom\r\n     * @param {*} thread \r\n     * @param {*} threadProcedureId 线程的函数id\r\n     */\r\n    createThreadDefDom(thread, threadProcedureId) {\r\n        /* <block type=\"thread_def\" id=\"ISJ:}kp8l):hy~wr5{x5\" x=\"-187\" y=\"-87\">\r\n            <field name=\"NAME\">thread</field>\r\n            <statement name=\"CALLBACK\">\r\n                <block type=\"procedure_select\" id=\"IK`|)2n6nVKsvFJ4VlXC\">\r\n                    <field name=\"field_procedure\" id=\"aewyJ+/)D`VHlrJ$BgFT\">thread_p</field>\r\n                </block>\r\n            </statement>\r\n        </block> */\r\n        // const procedureDefId = this.genUid();\r\n        let threadDefDom = this.createEl('block', {\r\n            type: \"thread_def\"\r\n        });\r\n        let fieldDom = this.createEl('field', {\r\n            name: 'NAME',\r\n            textContent: thread.name\r\n        });\r\n        fieldDom.textContent = thread.name;\r\n\r\n        let statementDom = this.createEl('statement', {\r\n            name: 'CALLBACK'\r\n        });\r\n        let procedureSelectBlockDom = this.createEl('block', {\r\n            type: 'procedure_select'\r\n        });\r\n        let fieldProcedureDom = this.createEl('field', {\r\n            name: 'field_procedure',\r\n            id: threadProcedureId,\r\n        });\r\n        fieldProcedureDom.textContent = thread.name + \"_function\";\r\n        procedureSelectBlockDom.appendChild(fieldProcedureDom);\r\n        statementDom.appendChild(procedureSelectBlockDom);\r\n        threadDefDom.appendChild(fieldDom);\r\n        threadDefDom.appendChild(statementDom);\r\n\r\n        return threadDefDom;\r\n    },\r\n    /**\r\n     * 创建线程函数定义块的Dom\r\n     * @param {*} thread \r\n     * @param {*} threadProcedureId \r\n     * @param {*} statesDom 所有连接的状态\r\n     */\r\n    createThreadProcedureDom(thread, threadProcedureId, statesDom) {\r\n        console.log('---thread.name---' + thread.name);\r\n        /* <block type=\"procedures_defnoreturn\" id=\"aewyJ+/)D`VHlrJ$BgFT\" x=\"463\" y=\"-113\">\r\n            <field name=\"NAME\">thread_p</field>\r\n            <comment pinned=\"false\" h=\"80\" w=\"160\">Describe this function...</comment>\r\n            <statement name=\"STACK\">\r\n            </statement>\r\n        </block> */\r\n        let threadProcedureDom = this.createEl('block', {\r\n            type: 'procedures_defnoreturn',\r\n            id: threadProcedureId\r\n        });\r\n        let fieldDom = this.createEl('field', {\r\n            name: 'NAME',\r\n\r\n        });\r\n        fieldDom.textContent = thread.name + \"_function\";\r\n        let statementDom = this.createEl('statement', {\r\n            name: 'STACK'\r\n        });\r\n        statementDom.appendChild(statesDom);\r\n        threadProcedureDom.appendChild(fieldDom);\r\n        threadProcedureDom.appendChild(statementDom);\r\n        return threadProcedureDom;\r\n    },\r\n    /**\r\n     * 获取唯一id，同google blockly产生唯一id的方法\r\n     */\r\n    genUid() {\r\n        var length = 20;\r\n        var soupLength = SOUP.length;\r\n        var id = [];\r\n        for (var i = 0; i < length; i++) {\r\n            id[i] = SOUP.charAt(Math.random() * soupLength);\r\n        }\r\n        return id.join('');\r\n    },\r\n    getDomChildren(dom) {\r\n        var ary = [];\r\n        if (dom.children) {\r\n            ary = Array.prototype.slice.call(dom.children);\r\n        }\r\n        return ary;\r\n    },\r\n    toNum(str) {\r\n        return parseInt(str, 10);\r\n    },\r\n    translatePX2Num(str) {\r\n        if (/px/.test(str)) {\r\n            str = str.replace(\"px\", \"\");\r\n        }\r\n        return +str;\r\n    },\r\n    getPrevStateDom(dom) {\r\n        var parent = dom.parentNode;\r\n        if (parent) {\r\n            if (parent.getAttribute('type') === 'state_opr') {\r\n                return parent;\r\n            } else {\r\n                parent = this.getPrevStateDom(parent);\r\n            }\r\n        }\r\n        return parent;\r\n    },\r\n    getStateXY(stateDom, existStates) {\r\n        /**\r\n         * 1.获取这个Dom节点的sx, sy值，如果存在就使用这个值，如果不存在，则获取上一个状态的sx, sy值，然后查看这个stateDom处于上一个状态的outputAry中的第几个元素，假设是第3个，则\r\n         * XY的值为：  x: targetDom.sx + gap_x(水平方向间隔)  y: targetDom.sx + index * gap_y\r\n         */\r\n        const gap_x = 150;\r\n        const gap_y = 100;\r\n        let x = this.toNum(stateDom.getAttribute('sx'));\r\n        let y = this.toNum(stateDom.getAttribute('sy'));\r\n\r\n        function getLineDom(dom) {\r\n            var parent = dom.parentNode;\r\n            if (parent) {\r\n                if (parent.getAttribute && parent.getAttribute('type') === 'state_trigger_event') {\r\n                    return parent;\r\n                } else {\r\n                    parent = getLineDom(parent);\r\n                }\r\n            }\r\n            return parent;\r\n        }\r\n\r\n        let prevLineId = getLineDom(stateDom) && getLineDom(stateDom).getAttribute('id');\r\n        // 正常拼接的情况下这个prevLineId是一定存在的\r\n        if (!x || x === 'undefined') { // x是未定义的则 y也是未定义的\r\n            let prevStateDom = Util.getPrevStateDom(stateDom);\r\n            if (!prevStateDom) {\r\n                return {\r\n                    x: 0,\r\n                    y: 0\r\n                }\r\n            }\r\n            let prevX = this.toNum(prevStateDom.getAttribute('sx'));\r\n            let prevY = this.toNum(prevStateDom.getAttribute('sy'));\r\n            if (!prevX || prevX === 'undefined') {\r\n                prevX = 0;\r\n                prevY = 0;\r\n            }\r\n            x = prevX + gap_x;\r\n            var index = 0;\r\n            var prevState = existStates.find(item => {\r\n                return item.stateId === Util.getEntityStateId(prevStateDom);\r\n            })\r\n\r\n            prevState.outputAry.forEach((item, i) => {\r\n                if (item.lineId === prevLineId) {\r\n                    index = i;\r\n                    return false; // return false 结束forEach\r\n                }\r\n            })\r\n            y = prevY + index * gap_y;\r\n        }\r\n        return {\r\n            x: x,\r\n            y: y\r\n        }\r\n    },\r\n    getEntityStateId(stateDom) {\r\n        return stateDom.children[0].getAttribute('id');\r\n    },\r\n    /**\r\n     * 将所有线程的数据（包括了状态和连线）转为Blockly可识别的xml数据\r\n     * @param {*} threadAry 线程数据\r\n     */\r\n    state2blockly(threadAry) {\r\n        /**\r\n         * 1.找到线程中有开始标记的根状态\r\n         * 2.遍历根状态的output，生成特殊的if-else if 结构，注意：默认不采用else\r\n         *\r\n         */\r\n        let statePageData = threadAry;\r\n\r\n        let blocklyXml = Util.createEl(\"xml\");\r\n        blocklyXml.setAttribute(\r\n            \"xmlns\",\r\n            \"https://developers.google.com/blockly/xml\"\r\n        );\r\n\r\n        statePageData.forEach((thread, index) => {\r\n            let firstState = thread.stateAry[0];\r\n            let listsDom = Util.createEl('block');\r\n            listsDom.setAttribute('type', 'lists_state');\r\n            listsDom.setAttribute('x', 300 + (700 * index));\r\n            listsDom.setAttribute('y', 150);\r\n\r\n            let mutationDom = Util.createEl('mutation');\r\n            mutationDom.setAttribute('items', thread.stateAry.length);\r\n            listsDom.appendChild(mutationDom);\r\n\r\n            thread.stateAry.forEach((state, i) => {\r\n                let stateDefBlock = Util.createStateDefBlock(state, i);\r\n                listsDom.appendChild(stateDefBlock);\r\n                // blocklyXml.appendChild(stateDefBlock);\r\n            })\r\n            var statesDom = Util.state2dom(firstState, thread);\r\n            const procedureDefId = Util.genUid();\r\n            let threadDefDom = Util.createThreadDefDom(thread, procedureDefId);\r\n            let threadProcedureDom = Util.createThreadProcedureDom(thread, procedureDefId, statesDom);\r\n            if (Util.isDefined(thread.x)) {\r\n                threadDefDom.setAttribute('x', thread.x);\r\n            } else {\r\n                threadDefDom.setAttribute('x', index * 700);\r\n            }\r\n            if (Util.isDefined(thread.y)) {\r\n                threadDefDom.setAttribute('y', thread.y);\r\n            } else {\r\n                threadDefDom.setAttribute('y', 10);\r\n            }\r\n            threadProcedureDom.setAttribute('x', index * 700);\r\n            threadProcedureDom.setAttribute('y', 200);\r\n            //这个添加的顺序很重要！！！\r\n            blocklyXml.appendChild(listsDom);\r\n            blocklyXml.appendChild(threadProcedureDom);\r\n            blocklyXml.appendChild(threadDefDom);\r\n        });\r\n\r\n        return blocklyXml.outerHTML;\r\n    },\r\n    /**\r\n     * 将Blockly数据转为状态图可识别的数据\r\n     */\r\n    blockly2state(xmlDom) {\r\n        if (typeof xmlDom === 'string') {\r\n            xmlDom = new DOMParser().parseFromString(xmlDom, 'text/xml');\r\n        }\r\n\r\n        const STATE_BLOCK = 'state_opr';\r\n        let stateAry = []; //所有的状态数据集合\r\n        let lineAry = []; //所有的连线数据集合\r\n        function extractStateAndLine(stateDom) {\r\n            /* <block type=\"state_opr\" id=\"0eRjWo`*LW!O%5)$3!bj\" sx=\"394\" sy=\"201\">\r\n                <field name=\"field_state\" id=\"state-1607658086399\">状态描述0</field>\r\n            </block> */\r\n            if (stateDom.tagName === 'block' && stateDom.getAttribute('type') === STATE_BLOCK) {\r\n                let stateObj = {\r\n                    stateId: Util.getEntityStateId(stateDom), //!!!这里的id不是block.state_opr的 id 哟，而是它下面的field.field_state的id\r\n                    stateType: stateDom.getAttribute('type') === STATE_BLOCK ? 'stateDiv' : 'loopDiv',\r\n                    bx: parseInt(stateDom.getAttribute('x'), 10), // blockly中与此对应的图形块的x\r\n                    by: parseInt(stateDom.getAttribute('y'), 10), // blockly中与此对应的图形块的y\r\n                    x: Util.getStateXY(stateDom, stateAry).x, //stateDom.getAttribute('sx'),\r\n                    y: Util.getStateXY(stateDom, stateAry).y,\r\n                    width: '76px',\r\n                    height: '40px',\r\n                    // virtualHeight: Util.getVirtualHeight(outputAry), //TODO 开始状态为这个stateDom的所有状态高度之和\r\n                    name: stateDom.children[0].textContent,\r\n                    inputAry: [],\r\n                    outputAry: [],\r\n                    children: [],\r\n                    nodeHeight: 0 // 如果该节点有2个分支，且分支是叶子节点，则这个节点的nodeHeight = 2; 总之，nodeHeight = 各分支nodeHeight之和 - 这个参数为自动布局所用\r\n                }\r\n\r\n\r\n\r\n                function dom2State(dom) {\r\n                    let stateId = dom.getAttribute('id');\r\n                    if (dom.getAttribute('type') === STATE_BLOCK) {\r\n                        stateId = Util.getEntityStateId(dom);\r\n                    }\r\n                    return {\r\n                        stateId: stateId,\r\n                        stateType: STATE_BLOCK\r\n                    };\r\n                }\r\n\r\n                function findOutputLinesOfStateDom(stateDom, outputLines) {\r\n                    // 如果stateDom中有next节点 且 next节点的children中有block.state_trigger_event 则将这个block.state_trigger_event push 到 outputLines\r\n                    // 然后将这个block.state_trigger_event作为新的stateDom，查找其包含的block.state_trigger_event 这样遍历查找所有的block.state_trigger_event就找到了outputLines\r\n                    let children = Util.getDomChildren(stateDom);\r\n                    children.forEach(child => {\r\n                        if (child.tagName === 'next') { //所有next节点的children都只有1个\r\n                            if (child.children && child.children[0] && child.children[0].getAttribute('type') === 'state_trigger_event') {\r\n                                let lineDom = child.children[0];\r\n                                let newLine = {\r\n                                    lineId: lineDom.getAttribute('id'),\r\n                                    d: lineDom.getAttribute('d'),\r\n                                    startState: dom2State(Util.getStartStateDomOfLine(lineDom)),\r\n                                    endState: dom2State(Util.getEndStateDomOfLine(lineDom)),\r\n                                };\r\n\r\n                                let existLineOfOutputLines = outputLines.find(item => {\r\n                                    return item.lineId === lineDom.getAttribute('id');\r\n                                })\r\n                                if (!existLineOfOutputLines) {\r\n                                    outputLines.push(newLine);\r\n                                }\r\n\r\n                                let existLineOfLineAry = lineAry.find(item => {\r\n                                    return item.lineId === lineDom.getAttribute('id')\r\n                                })\r\n                                if (!existLineOfLineAry) {\r\n                                    lineAry.push(newLine);\r\n                                }\r\n                                findOutputLinesOfStateDom(lineDom, outputLines);\r\n                            }\r\n                        }\r\n                    })\r\n                    return outputLines;\r\n                }\r\n\r\n                function findInputLinesOfStateDom(stateDom, inputLines) {\r\n                    //逐级往上寻找type === 'state_opr'的块即inputLines    //  block.state_trigger_event > statement > block.state_opr\r\n                    let lineDom = stateDom.parentNode && stateDom.parentNode.parentNode;\r\n                    if (lineDom && lineDom.getAttribute('type') === 'state_trigger_event') {\r\n                        let newLine = {\r\n                            lineId: lineDom.getAttribute('id'),\r\n                            d: lineDom.getAttribute('d'),\r\n                            startState: dom2State(Util.getPrevStateDom(lineDom)),\r\n                            endState: dom2State(Util.getEndStateDomOfLine(lineDom))\r\n                        };\r\n\r\n                        let existLineOfInputLines = inputLines.find(item => {\r\n                            return item.lineId === newLine.lineId;\r\n                        })\r\n                        if (!existLineOfInputLines) {\r\n                            inputLines.push(newLine);\r\n                        }\r\n\r\n                        let existLineOfLineAry = lineAry.find(item => {\r\n                            return item.lineId === newLine.lineId;\r\n                        })\r\n                        if (!existLineOfLineAry) {\r\n                            lineAry.push(newLine);\r\n                        }\r\n                    }\r\n                    return inputLines;\r\n                }\r\n\r\n                findOutputLinesOfStateDom(stateDom, stateObj.outputAry);\r\n                findInputLinesOfStateDom(stateDom, stateObj.inputAry);\r\n\r\n                let existStateInStateAry = stateAry.find(state => {\r\n                    return state.stateId === stateObj.stateId;\r\n                })\r\n                if (!existStateInStateAry) {\r\n                    stateAry.push(stateObj);\r\n                }\r\n            }\r\n            if (stateDom.children && stateDom.children.length) {\r\n                for (let j = 0; j < stateDom.children.length; j++) {\r\n                    let child = stateDom.children[j];\r\n                    extractStateAndLine(child);\r\n                }\r\n            }\r\n        }\r\n        extractStateAndLine(xmlDom);\r\n        return {\r\n            stateAry: stateAry,\r\n            lineAry: lineAry\r\n        }\r\n    },\r\n    getStartStateDomOfLine(lineDom) {\r\n        return this.getPrevStateDom(lineDom);\r\n    },\r\n    getEndStateDomOfLine(lineDom){\r\n        let children = Array.prototype.slice.call(lineDom.childNodes);\r\n        let statement = children.find(dom => {\r\n            return dom.nodeName === 'statement'\r\n        })\r\n        let statementChildren = Array.prototype.slice.call(statement.childNodes);\r\n        let endStateDom = statementChildren.find(dom => {\r\n            return dom.nodeName === 'block'\r\n        })\r\n        if (!endStateDom){\r\n            console.error('数据错误：触发事件连线没有连接正确的状态');\r\n        }\r\n        return endStateDom;\r\n    },\r\n    /**\r\n     * 将Blockly数据复制到剪切板 - 调试时用\r\n     * @param {*} blocklyXml \r\n     */\r\n    copyBlocklyXml2Clipboard(blocklyXml) {\r\n        // window.stateDataXml = blocklyXml.outerHTML;\r\n        let hiddenInput = document.createElement(\"input\");\r\n        hiddenInput.setAttribute(\"type\", \"text\");\r\n        hiddenInput.setAttribute(\"value\", blocklyXml);\r\n        hiddenInput.setAttribute(\"style\", \"height: 0; overflow: hidden;\");\r\n        document.body.appendChild(hiddenInput);\r\n        hiddenInput.focus();\r\n        hiddenInput.select();\r\n        document.execCommand(\"copy\");\r\n        document.body.removeChild(hiddenInput);\r\n    },\r\n    workspace2dom() {\r\n        var xmlText = '';\r\n        var iframeDom = document.getElementById('blocklyIframe');\r\n        if (iframeDom) {\r\n            var win = iframeDom.contentWindow;\r\n            var xmlDom = win.Blockly.Xml.workspaceToDom(win.Code.workspace);\r\n            xmlText = win.Blockly.Xml.domToPrettyText(xmlDom);\r\n\r\n        } else {\r\n            console.error('当前页面没有嵌入blockly');\r\n        }\r\n        return xmlText;\r\n    },\r\n    /**\r\n     * 在自动布局前重置所有状态的x,y坐标\r\n     */\r\n    resetAllStateData(thread) {\r\n        if (thread) {\r\n            thread.stateAry.forEach(state => {\r\n                state.x = 0;\r\n                state.y = 0;\r\n            })\r\n        }\r\n    },\r\n    autoLayout(thread) {\r\n        if (thread) {\r\n            let firstState = Util.findFirstState(thread.stateAry);\r\n            thread.stateAry.forEach(state => {\r\n                let prevState; //TODO 当前状态的前一个兄弟节点\r\n                state.virtualHeight = Util.getVirtualHeight(state);\r\n                state.y = prevState.y + prevState.virtualHeight;\r\n            })\r\n        }\r\n    },\r\n    /**\r\n     * 找到“开始状态”\r\n     */\r\n    findFirstState(stateAry) {\r\n        return stateAry[0]; //TODO 后续根据特定标记查找\r\n    },\r\n    getVirtualHeight(state) {\r\n        let outputStates = [];\r\n        state.outputAry.forEach(line => {\r\n            let lineObj = thread.lineAry.find(item => {\r\n                return item.lineId === line.lineId;\r\n            })\r\n            let endStateOfLine = thread.stateAry.find(item => {\r\n                return item.stateId === lineObj.endState.stateId;\r\n            })\r\n            outputStates.push(endStateOfLine);\r\n        })\r\n\r\n        let sum = 0;\r\n        outputStates.forEach(state => {\r\n            if (!state.virtualHeight) {\r\n                state.virtualHeight = Util.getVirtualHeight(state);\r\n                sum += state.virtualHeight;\r\n            }\r\n        })\r\n        return sum;\r\n    },\r\n    getAutoXY(state) {\r\n        //x,y是同时设置的，所以只需判断其中一个即可\r\n        if (state.y) {\r\n            return {\r\n                x: state.x,\r\n                y: state.y\r\n            }\r\n        } else {\r\n            state.y = prevState.y + prevState.virtualHeight;\r\n        }\r\n    },\r\n    getDomByStateId(stateId){\r\n        let doms = document.getElementsByClassName('state-wrap');\r\n        return Array.prototype.slice.call(doms).find(item => {\r\n            return item.getAttribute('stateid') === stateId;\r\n        })\r\n    },\r\n\r\n    testLayout(thread) {\r\n        var g = new dagre.graphlib.Graph({\r\n            //directed: true,\r\n            //compound: true,\r\n            multigraph: true,\r\n           \r\n        });\r\n        g.setGraph({\r\n            rankdir: 'LR',\r\n            align:'UL',\r\n            edgesep:0,\r\n            ranksep:70\r\n        });\r\n        g.setDefaultEdgeLabel(function() {\r\n            return {};\r\n        });\r\n\r\n        thread.stateAry.forEach(state => {\r\n            g.setNode(state.stateId, {\r\n                label: state.name,\r\n                // width: state.width || 76,\r\n                // height: state.height || 40\r\n                width: QBlock.State.getStateWidth(state),\r\n                height: QBlock.State.getStateHeight(state)\r\n            });\r\n\r\n            state.outputAry.forEach(line => {\r\n                let lineObj = thread.lineAry.find(item => {\r\n                    return item.lineId === line.lineId;\r\n                })\r\n                let endState = thread.stateAry.find(item => {\r\n                    return item.stateId === lineObj.endState.stateId;\r\n                })\r\n                // g.setEdge(state.stateId, endState.stateId, line.lineId, lineObj.desc); //这种设置方式会报错 可能是dagre对graphlib的封装接口未同步\r\n                g.setEdge(state.stateId, endState.stateId, {\r\n                    label: line.lineId\r\n                });\r\n            })\r\n        })\r\n\r\n        dagre.layout(g);//布局分析\r\n\r\n        g.nodes().forEach(function(nodeId) {\r\n            let node = g.node(nodeId);\r\n            let state = thread.stateAry.find(item => {\r\n                return item.stateId === nodeId;\r\n            });\r\n            if (state){\r\n                Util.setStateXYbyNode(state, node)//重设状态位置信息\r\n                if(state.inputAry && state.inputAry.length){\r\n                    state.inputAry.forEach(item => {\r\n                        store.stateData.lineMap[item.lineId].refresh();\r\n                    })\r\n                }\r\n            }\r\n            console.log(\"Node \" + nodeId + \": \" + JSON.stringify(g.node(nodeId)));\r\n        });\r\n\r\n       /*  thread.lineAry.forEach(item => {\r\n            item.forceRefresh = false;\r\n        }) */\r\n      \r\n        /* setTimeout(() => {\r\n            \r\n            g.edges().forEach(function(line) {\r\n                console.log(\"Edge \" + line.v + \" -> \" + line.w + \": \" + JSON.stringify(g.edge(line)));\r\n                let lineObj = thread.lineAry.find(item => {\r\n                    return item.lineId === g.edge(line).label;\r\n                });\r\n                lineObj.d = '';\r\n            });\r\n        }, 300); */\r\n\r\n    },\r\n    setStateXYbyNode(state, node){\r\n        let halfStateWidth = QBlock.State.getStateWidth(state) / 2\r\n        let halfStateHeight = QBlock.State.getStateHeight(state) / 2\r\n        state.x = node.x - halfStateWidth\r\n        state.y = node.y - halfStateHeight\r\n        return\r\n    }\r\n}\r\nexport default Util;"],"file":"util.dev.js"}