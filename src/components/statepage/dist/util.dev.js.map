{"version":3,"sources":["util.js"],"names":["NAME_SPACE","SOUP","Util","isDefined","a","createEl","tagName","attrs","dom","document","createElementNS","key","setAttribute","createFieldDom","field","container","name","id","textContent","value","createCommentDom","comment","commentDom","pinned","createStateDefBlock","state","index","valueDom","stateDom","stateId","fieldDom","appendChild","createNextStatesDom","thread","nextDom","outputDom","outputAry","length","mutation","forEach","outputItem","outputStateDom","lineId","line","lineAry","find","item","stateAry","endState","state2dom","console","error","createNextStatesDom2","triggerEventDom","nextStatesDom","parentDom","JSON","stringify","triggerEventStatement","d","desc","genBlockType","type","ret","saveStateXY","el","x","y","saveStateBlockDataInDom","stateType","saveLineData","startState","rootState","threadData","rootEl","log","fieldX","createThreadDefDom","threadProcedureId","threadDefDom","statementDom","procedureSelectBlockDom","fieldProcedureDom","createThreadProcedureDom","statesDom","threadProcedureDom","genUid","soupLength","i","charAt","Math","random","join","getDomChildren","ary","children","Array","prototype","slice","call","getStateXY","existStates","gap_x","gap_y","getAttribute","getLineDom","parent","getPrevStateDom","prevLineId","prevStateDom","prevX","prevY","prevState","state2blockly","threadAry","statePageData","blocklyXml","firstState","listsDom","mutationDom","stateDefBlock","procedureDefId","outerHTML","blockly2state","xmlDom","DOMParser","parseFromString","STATE_BLOCK","extractStateAndLine","dom2State","findOutputLinesOfStateDom","outputLines","child","lineDom","newLine","existLineOfOutputLines","push","existLineOfLineAry","findInputLinesOfStateDom","inputLines","existLineOfInputLines","stateObj","bx","parseInt","by","width","height","inputAry","nodeHeight","existStateInStateAry","j","copyBlocklyXml2Clipboard","hiddenInput","createElement","body","focus","select","execCommand","removeChild","workspace2dom","xmlText","iframeDom","getElementById","win","contentWindow","Blockly","Xml","workspaceToDom","Code","workspace","domToPrettyText"],"mappings":"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","sourcesContent":["const NAME_SPACE = \"https://developers.google.com/blockly/xml\";\r\nconst SOUP = '!#$%()*+,-./:;=?@[]^_`{|}~ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\n\r\n\r\nvar Util = {\r\n    isDefined(a) {\r\n        return !((a === '') || (a === null) || (typeof a === 'undefined'));\r\n    },\r\n    createEl(tagName, attrs) {\r\n        var dom = document.createElementNS(NAME_SPACE, tagName);\r\n        if (typeof attrs === 'object') {\r\n            for (var key in attrs) {\r\n                dom.setAttribute(key, attrs[key]);\r\n            }\r\n        }\r\n        return dom;\r\n    },\r\n    createFieldDom(field) {\r\n        let container = this.createEl(\"field\");\r\n        container.setAttribute(\"name\", field.name);\r\n        if (field.id) {\r\n            container.setAttribute('id', field.id);\r\n        }\r\n        container.textContent = field.value;\r\n        return container;\r\n    },\r\n\r\n    /**\r\n     * 创建注释块Dom\r\n     * @param {*} comment \r\n     */\r\n    createCommentDom(comment) {\r\n        let commentDom = this.createEl('comment');\r\n        commentDom.setAttribute('pinned', comment.pinned || false);\r\n        commentDom.textContent = comment.value;\r\n        return commentDom;\r\n    },\r\n\r\n    /**\r\n     * 创建状态定义块Dom\r\n     * @param {*} state \r\n     * @param {*} index \r\n     */\r\n    createStateDefBlock(state, index) {\r\n        var valueDom = this.createEl('value');\r\n        valueDom.setAttribute('name', 'ADD' + index);\r\n\r\n        var stateDom = this.createEl('block');\r\n        stateDom.setAttribute('type', 'state_def');\r\n        stateDom.setAttribute('id', state.stateId);\r\n        var fieldDom = this.createFieldDom({\r\n            name: 'NAME',\r\n            value: state.name\r\n        });\r\n        stateDom.appendChild(fieldDom);\r\n\r\n        valueDom.appendChild(stateDom);\r\n        return valueDom;\r\n    },\r\n\r\n    /**\r\n     * 创建连线Dom以及其连接的状态块的Dom - 触发事件描述采用通用的if-else结构 controls_if \r\n     * ！此方法没有用到，代码暂时先放着\r\n     * @param {*} state \r\n     * @param {*} thread \r\n     */\r\n    createNextStatesDom(state, thread) {\r\n        let nextDom, outputDom;\r\n\r\n        if (state.outputAry.length) {\r\n            nextDom = this.createEl(\"next\");\r\n            outputDom = this.createEl(\"block\");\r\n            outputDom.setAttribute(\"type\", \"controls_if\");\r\n            if (state.outputAry.length > 1) {\r\n                let mutation = this.createEl(\"mutation\");\r\n                mutation.setAttribute(\"elseif\", state.outputAry.length - 1);\r\n                outputDom.appendChild(mutation);\r\n            }\r\n            state.outputAry.forEach((outputItem, index) => {\r\n                let outputStateDom;\r\n                outputStateDom = this.createEl(\"statement\");\r\n                outputStateDom.setAttribute(\"name\", `DO${index}`);\r\n                outputStateDom.setAttribute(\"id\", `${outputItem.lineId}`);\r\n                //outputAry里面只存放了lineId 所以我们需要做以下事情：\r\n                //1 根据lineId找到对应的line数据\r\n                //2 根据line里面的endState的stateId找到对应的state数据\r\n                let line = thread.lineAry.find((item) => {\r\n                    return item.lineId === outputItem.lineId;\r\n                });\r\n                if (line) {\r\n                    let state = thread.stateAry.find((item) => {\r\n                        return item.stateId === line.endState.stateId;\r\n                    });\r\n                    if (state) {\r\n                        outputStateDom.appendChild(Util.state2dom(state, thread));\r\n                    } else {\r\n                        console.error(\"data error -^- \");\r\n                    }\r\n                }\r\n                if (outputStateDom) {\r\n                    outputDom.appendChild(outputStateDom);\r\n                }\r\n            });\r\n            nextDom.appendChild(outputDom);\r\n        }\r\n        return nextDom;\r\n    },\r\n\r\n    /**\r\n     * 创建连线Dom以及其连接的状态块的Dom - 触发事件描述采用独立的结构 state_trigger_event\r\n     * @param {*} state \r\n     * @param {*} thread \r\n     */\r\n    createNextStatesDom2(state, thread) {\r\n        let triggerEventDom;\r\n        let nextStatesDom;\r\n        if (state.outputAry.length) {\r\n            /* if (state.outputAry.length > 1) {\r\n                let mutation = this.createEl(\"mutation\");\r\n                mutation.setAttribute(\"elseif\", state.outputAry.length - 1);\r\n                triggerEventDom.appendChild(mutation);\r\n            } */\r\n            let parentDom;\r\n\r\n            state.outputAry.forEach((outputItem, index) => {\r\n                let nextDom = this.createEl(\"next\");\r\n                if (!nextStatesDom) {\r\n                    nextStatesDom = nextDom;\r\n                }\r\n                triggerEventDom = this.createEl(\"block\");\r\n                triggerEventDom.setAttribute(\"type\", \"state_trigger_event\");\r\n                triggerEventDom.setAttribute(\"id\", outputItem.lineId);\r\n                triggerEventDom.setAttribute(\"start_state\", JSON.stringify(state)); // TODO 按需简化存储的start_state数据\r\n\r\n                let triggerEventStatement;\r\n                triggerEventStatement = this.createEl(\"statement\");\r\n                triggerEventStatement.setAttribute(\"name\", `DO0`);\r\n                // triggerEventStatement.setAttribute(\"id\", `${outputItem.lineId}`);\r\n                //outputAry里面只存放了lineId 所以我们需要做以下事情：\r\n                //1 根据lineId找到对应的line数据\r\n                //2 根据line里面的endState的stateId找到对应的state数据\r\n                let line = thread.lineAry.find((item) => {\r\n                    return item.lineId === outputItem.lineId;\r\n                });\r\n                if (line) {\r\n                    triggerEventDom.setAttribute(\"d\", line.d);\r\n                    if (line.desc) {\r\n                        let commentDom = this.createCommentDom({\r\n                            value: line.desc\r\n                        });\r\n                        triggerEventDom.appendChild(commentDom);\r\n                    }\r\n                    let state = thread.stateAry.find((item) => {\r\n                        return item.stateId === line.endState.stateId;\r\n                    });\r\n                    if (state) {\r\n                        triggerEventDom.setAttribute(\"end_state\", JSON.stringify(state)); // TODO 按需简化存储的end_state数据\r\n                        triggerEventStatement.appendChild(Util.state2dom(state, thread));\r\n                    } else {\r\n                        console.error(\"data error -^- \");\r\n                    }\r\n                }\r\n                if (triggerEventStatement) {\r\n                    triggerEventDom.appendChild(triggerEventStatement);\r\n                }\r\n                nextDom.appendChild(triggerEventDom);\r\n                if (parentDom) {\r\n                    parentDom.appendChild(nextDom);\r\n                }\r\n                parentDom = triggerEventDom;\r\n\r\n            });\r\n        }\r\n        return nextStatesDom;\r\n    },\r\n\r\n    genBlockType(type) {\r\n        let ret = \"state_opr\";\r\n        if (type === \"loopDiv\") {\r\n            ret = \"controls_whileUntil\";\r\n        }\r\n        return ret;\r\n    },\r\n    /**\r\n     * 保存状态块的位置信息到Dom中\r\n     * @param {*} el 新建的和状态对应的Dom节点\r\n     * @param {*} state 当前操作的状态\r\n     */\r\n    saveStateXY(el, state) {\r\n        el.setAttribute(\"sx\", state.x);\r\n        el.setAttribute(\"sy\", state.y);\r\n    },\r\n    /**\r\n     * 保存状态块的数据到Dom中\r\n     * @param {*} el 新建的和状态对应的Dom节点\r\n     * @param {*} state 当前操作的状态\r\n     */\r\n    saveStateBlockDataInDom(el, state) {\r\n        switch (state.stateType) {\r\n            case 'stateDiv': //状态执行\r\n                this.saveStateXY(el, state);\r\n                break;\r\n            case 'state_trigger_event': //连线\r\n                this.saveLineData(el, state);\r\n            default:\r\n                break;\r\n        }\r\n    },\r\n    /**\r\n     * 保存连线数据到Dom\r\n     * @param {*} el 新建的和状态对应的Dom节点\r\n     * @param {*} state 当前操作的状态\r\n     */\r\n    saveLineData(el, state) {\r\n        el.setAttribute(\"d\", state.d);\r\n        el.setAttribute(\"start_state\", JSON.stringify(state.startState));\r\n        el.setAttribute(\"end_state\", JSON.stringify(state.startState));\r\n    },\r\n    /**\r\n     * 将一个状态块转为Dom节点\r\n     * @param {*} rootState \r\n     * @param {*} threadData \r\n     */\r\n    state2dom(rootState, threadData) {\r\n        let rootEl = this.createEl(\"block\");\r\n        console.log(\r\n            rootState.stateId +\r\n            \" --- \" +\r\n            rootState.name +\r\n            \" --- \" +\r\n            rootState.stateType\r\n        );\r\n        rootEl.setAttribute(\"id\", rootState.stateId);\r\n        // rootEl.setAttribute('type', rootState.type || 'state_run');\r\n        rootEl.setAttribute(\"type\", this.genBlockType(rootState.stateType));\r\n        this.saveStateBlockDataInDom(rootEl, rootState);\r\n\r\n\r\n        let fieldDom = this.createFieldDom({\r\n            id: rootState.stateId,\r\n            name: \"field_state\",\r\n            value: rootState.name,\r\n        });\r\n        rootEl.appendChild(fieldDom);\r\n\r\n        let fieldX = this.createFieldDom({\r\n            id: rootState.stateId,\r\n            name: \"SX_FIELD\",\r\n            value: 8888//rootState.x,\r\n        });\r\n        rootEl.appendChild(fieldX);\r\n\r\n        let nextStatesDom = this.createNextStatesDom2(rootState, threadData);\r\n        if (nextStatesDom) {\r\n            rootEl.appendChild(nextStatesDom);\r\n        }\r\n        return rootEl;\r\n    },\r\n    /**\r\n     * 创建线程定义块的Dom\r\n     * @param {*} thread \r\n     * @param {*} threadProcedureId 线程的函数id\r\n     */\r\n    createThreadDefDom(thread, threadProcedureId) {\r\n        /* <block type=\"thread_def\" id=\"ISJ:}kp8l):hy~wr5{x5\" x=\"-187\" y=\"-87\">\r\n            <field name=\"NAME\">thread</field>\r\n            <statement name=\"CALLBACK\">\r\n                <block type=\"procedure_select\" id=\"IK`|)2n6nVKsvFJ4VlXC\">\r\n                    <field name=\"field_procedure\" id=\"aewyJ+/)D`VHlrJ$BgFT\">thread_p</field>\r\n                </block>\r\n            </statement>\r\n        </block> */\r\n        // const procedureDefId = this.genUid();\r\n        let threadDefDom = this.createEl('block', {\r\n            type: \"thread_def\"\r\n        });\r\n        let fieldDom = this.createEl('field', {\r\n            name: 'NAME',\r\n            textContent: thread.name\r\n        });\r\n        fieldDom.textContent = thread.name;\r\n\r\n        let statementDom = this.createEl('statement', {\r\n            name: 'CALLBACK'\r\n        });\r\n        let procedureSelectBlockDom = this.createEl('block', {\r\n            type: 'procedure_select'\r\n        });\r\n        let fieldProcedureDom = this.createEl('field', {\r\n            name: 'field_procedure',\r\n            id: threadProcedureId,\r\n        });\r\n        fieldProcedureDom.textContent = thread.name + \"_function\";\r\n        procedureSelectBlockDom.appendChild(fieldProcedureDom);\r\n        statementDom.appendChild(procedureSelectBlockDom);\r\n        threadDefDom.appendChild(fieldDom);\r\n        threadDefDom.appendChild(statementDom);\r\n\r\n        return threadDefDom;\r\n    },\r\n    /**\r\n     * 创建线程函数定义块的Dom\r\n     * @param {*} thread \r\n     * @param {*} threadProcedureId \r\n     * @param {*} statesDom 所有连接的状态\r\n     */\r\n    createThreadProcedureDom(thread, threadProcedureId, statesDom) {\r\n        console.log('---thread.name---' + thread.name);\r\n        /* <block type=\"procedures_defnoreturn\" id=\"aewyJ+/)D`VHlrJ$BgFT\" x=\"463\" y=\"-113\">\r\n            <field name=\"NAME\">thread_p</field>\r\n            <comment pinned=\"false\" h=\"80\" w=\"160\">Describe this function...</comment>\r\n            <statement name=\"STACK\">\r\n            </statement>\r\n        </block> */\r\n        let threadProcedureDom = this.createEl('block', {\r\n            type: 'procedures_defnoreturn',\r\n            id: threadProcedureId\r\n        });\r\n        let fieldDom = this.createEl('field', {\r\n            name: 'NAME',\r\n\r\n        });\r\n        fieldDom.textContent = thread.name + \"_function\";\r\n        let statementDom = this.createEl('statement', {\r\n            name: 'STACK'\r\n        });\r\n        statementDom.appendChild(statesDom);\r\n        threadProcedureDom.appendChild(fieldDom);\r\n        threadProcedureDom.appendChild(statementDom);\r\n        return threadProcedureDom;\r\n    },\r\n    /**\r\n     * 获取唯一id，同google blockly产生唯一id的方法\r\n     */\r\n    genUid() {\r\n        var length = 20;\r\n        var soupLength = SOUP.length;\r\n        var id = [];\r\n        for (var i = 0; i < length; i++) {\r\n            id[i] = SOUP.charAt(Math.random() * soupLength);\r\n        }\r\n        return id.join('');\r\n    },\r\n    getDomChildren(dom){\r\n        var ary = [];\r\n        if(dom.children){\r\n            ary = Array.prototype.slice.call(dom.children);\r\n        }\r\n        return ary;\r\n    },\r\n    getStateXY(stateDom, existStates){\r\n        /**\r\n         * 1.获取这个Dom节点的sx, sy值，如果存在就使用这个值，如果不存在，则获取上一个状态的sx, sy值，然后查看这个stateDom处于上一个状态的outputAry中的第几个元素，假设是第3个，则\r\n         * XY的值为：  x: targetDom.sx + gap_x(水平方向间隔)  y: targetDom.sx + index * gap_y\r\n         */\r\n        const gap_x = 150;\r\n        const gap_y = 100;\r\n        let x = stateDom.getAttribute('sx');\r\n        let y = stateDom.getAttribute('sy');\r\n        function getLineDom(dom){\r\n            var parent = dom.parent;\r\n            if (parent){\r\n                if (parent.type === 'state_trigger_event'){\r\n                    return parent;\r\n                } else {\r\n                    parent = getLineDom(parent);\r\n                }\r\n            }\r\n            return parent;\r\n        }\r\n        function getPrevStateDom(dom){\r\n            var parent = dom.parent;\r\n            if (parent) {\r\n                if (parent.type === 'state_opr'){\r\n\r\n                    return parent;\r\n                } else {\r\n                    parent = getPrevStateDom(parent);\r\n                }\r\n            }\r\n            return parent;\r\n        }\r\n        let prevLineId = getLineDom(stateDom) && getLineDom(stateDom).getAttribute('id');\r\n        if(!x || x === 'undefined'){ // x是未定义的则 y也是未定义的\r\n            let prevStateDom = getPrevStateDom(stateDom);\r\n            if (!prevStateDom){\r\n                return {\r\n                    x: 0,\r\n                    y: 0\r\n                }\r\n            }\r\n            let prevX = prevStateDom.getAttribute('sx');\r\n            let prevY = prevStateDom.getAttribute('sy');\r\n            if (!prevX || prevX === 'undefined'){\r\n                prevX = 0;\r\n                prevY = 0;\r\n            }\r\n            x = prevX + gap_x;\r\n            var index = 0;\r\n            var prevState = existStates.find(item => {\r\n                return item.stateId === prevStateDom.getAttribute('id')\r\n            })\r\n\r\n            prevState.outputAry.forEach((item, i) => {\r\n                if (item.lineId === prevLineId){\r\n                    index = i;\r\n                    return false; // return false 结束forEach\r\n                }\r\n            })\r\n            y = prevY + index * gap_y;\r\n        }\r\n        return {\r\n            x: x,\r\n            y: y\r\n        }\r\n    },\r\n    /**\r\n     * 将所有线程的数据（包括了状态和连线）转为Blockly可识别的xml数据\r\n     * @param {*} threadAry 线程数据\r\n     */\r\n    state2blockly(threadAry) {\r\n        /**\r\n         * 1.找到线程中有开始标记的根状态\r\n         * 2.遍历根状态的output，生成特殊的if-else if 结构，注意：默认不采用else\r\n         *\r\n         */\r\n        let statePageData = threadAry;\r\n\r\n        let blocklyXml = Util.createEl(\"xml\");\r\n        blocklyXml.setAttribute(\r\n            \"xmlns\",\r\n            \"https://developers.google.com/blockly/xml\"\r\n        );\r\n\r\n        statePageData.forEach((thread, index) => {\r\n            let firstState = thread.stateAry[0];\r\n            let listsDom = Util.createEl('block');\r\n            listsDom.setAttribute('type', 'lists_state');\r\n            listsDom.setAttribute('x', 300 + (700 * index));\r\n            listsDom.setAttribute('y', 150);\r\n\r\n            let mutationDom = Util.createEl('mutation');\r\n            mutationDom.setAttribute('items', thread.stateAry.length);\r\n            listsDom.appendChild(mutationDom);\r\n\r\n            thread.stateAry.forEach((state, i) => {\r\n                let stateDefBlock = Util.createStateDefBlock(state, i);\r\n                listsDom.appendChild(stateDefBlock);\r\n                // blocklyXml.appendChild(stateDefBlock);\r\n            })\r\n            var statesDom = Util.state2dom(firstState, thread);\r\n            const procedureDefId = Util.genUid();\r\n            let threadDefDom = Util.createThreadDefDom(thread, procedureDefId);\r\n            let threadProcedureDom = Util.createThreadProcedureDom(thread, procedureDefId, statesDom);\r\n            if (Util.isDefined(thread.x)) {\r\n                threadDefDom.setAttribute('x', thread.x);\r\n            } else {\r\n                threadDefDom.setAttribute('x', index * 700);\r\n            }\r\n            if (Util.isDefined(thread.y)) {\r\n                threadDefDom.setAttribute('y', thread.y);\r\n            } else {\r\n                threadDefDom.setAttribute('y', 10);\r\n            }\r\n            threadProcedureDom.setAttribute('x', index * 700);\r\n            threadProcedureDom.setAttribute('y', 200);\r\n            //这个添加的顺序很重要！！！\r\n            blocklyXml.appendChild(listsDom);\r\n            blocklyXml.appendChild(threadProcedureDom);\r\n            blocklyXml.appendChild(threadDefDom);\r\n        });\r\n\r\n        return blocklyXml.outerHTML;\r\n    },\r\n    /**\r\n     * 将Blockly数据转为状态图可识别的数据\r\n     */\r\n    blockly2state(xmlDom) {\r\n        if(typeof xmlDom === 'string'){\r\n            xmlDom = new DOMParser().parseFromString(xmlDom, 'text/xml');\r\n        }\r\n\r\n        const STATE_BLOCK = 'state_opr';\r\n        let stateAry = []; //所有的状态数据集合\r\n        let lineAry = []; //所有的连线数据集合\r\n        function extractStateAndLine(stateDom) {\r\n            if (stateDom.tagName === 'block' && stateDom.getAttribute('type') === STATE_BLOCK) {\r\n                let stateObj = {\r\n                    stateId: stateDom.getAttribute('id'),\r\n                    stateType: stateDom.getAttribute('type') === STATE_BLOCK ? 'stateDiv' : 'loopDiv',\r\n                    bx: parseInt(stateDom.getAttribute('x'), 10), // blockly中与此对应的图形块的x\r\n                    by: parseInt(stateDom.getAttribute('y'), 10), // blockly中与此对应的图形块的y\r\n                    x: Util.getStateXY(stateDom).x, //stateDom.getAttribute('sx'),\r\n                    y: Util.getStateXY(stateDom).y,\r\n                    width: '76px',\r\n                    height: '40px',\r\n                    name: stateDom.children[0].textContent,\r\n                    inputAry: [],\r\n                    outputAry: [],\r\n                    children: [],\r\n                    nodeHeight: 0 // 如果该节点有2个分支，且分支是叶子节点，则这个节点的nodeHeight = 2; 总之，nodeHeight = 各分支nodeHeight之和 - 这个参数为自动布局所用\r\n                }\r\n\r\n                function dom2State(dom) {\r\n                    return {\r\n                        stateId: dom.getAttribute('id'),\r\n                        stateType: STATE_BLOCK\r\n                    };\r\n                }\r\n                function findOutputLinesOfStateDom(stateDom, outputLines) {\r\n                    // 如果stateDom中有next节点 且 next节点的children中有block.state_trigger_event 则将这个block.state_trigger_event push 到 outputLines\r\n                    // 然后将这个block.state_trigger_event作为新的stateDom，查找其包含的block.state_trigger_event 这样遍历查找所有的block.state_trigger_event就找到了outputLines\r\n                    let children = Util.getDomChildren(stateDom);\r\n                    children.forEach(child => {\r\n                        if (child.tagName === 'next') { //所有next节点的children都只有1个\r\n                            if (child.children && child.children[0] && child.children[0].getAttribute('type') === 'state_trigger_event') {\r\n                                let lineDom = child.children[0];\r\n                                let newLine = {\r\n                                    lineId: lineDom.getAttribute('id'),\r\n                                    d: lineDom.getAttribute('d'),\r\n                                    startState: dom2State(stateDom),\r\n                                    endState: dom2State(lineDom.children[0].children[0]), //TODO 需保证代码健壮性\r\n                                };\r\n\r\n                                let existLineOfOutputLines = outputLines.find(item => {\r\n                                    return item.lineId === lineDom.getAttribute('id');\r\n                                })\r\n                                if (!existLineOfOutputLines) {\r\n                                    outputLines.push(newLine);\r\n                                }\r\n\r\n                                let existLineOfLineAry = lineAry.find(item => {\r\n                                    return item.lineId === lineDom.getAttribute('id')\r\n                                })\r\n                                if (!existLineOfLineAry) {\r\n                                    lineAry.push(newLine);\r\n                                }\r\n                                findOutputLinesOfStateDom(lineDom.children[0].children[0], outputLines);\r\n                            }\r\n                        }\r\n                    })\r\n                    return outputLines;\r\n                }\r\n\r\n                function findInputLinesOfStateDom(stateDom, inputLines) {\r\n                    //逐级往上寻找type === 'state_opr'的块即inputLines    //  block.state_trigger_event > statement > block.state_opr\r\n                    let parent = stateDom.parent && stateDom.parent.parent;\r\n                    if (parent && parent.getAttribute('type') === 'state_trigger_event') {\r\n                        let newLine = {\r\n                            lineId: lineDom.getAttribute('id'),\r\n                            d: lineDom.getAttribute('d'),\r\n                            startState: dom2State(parent),\r\n                            endState: dom2State(stateDom)\r\n                        };\r\n\r\n                        let existLineOfInputLines = inputLines.find(item => {\r\n                            return item.lineId === newLine.lineId;\r\n                        })\r\n                        if (!existLineOfInputLines) {\r\n                            inputLines.push(newLine);\r\n                        }\r\n\r\n                        let existLineOfLineAry = lineAry.find(item => {\r\n                            return item.lineId === newLine.lineId;\r\n                        })\r\n                        if (!existLineOfLineAry) {\r\n                            lineAry.push(newLine);\r\n                        }\r\n                    }\r\n                    return inputLines;\r\n                }\r\n\r\n                findOutputLinesOfStateDom(stateDom, stateObj.outputAry);\r\n                findInputLinesOfStateDom(stateDom, stateObj.inputAry);\r\n\r\n                let existStateInStateAry = stateAry.find(state => {\r\n                    return state.stateId === stateObj.stateId;\r\n                })\r\n                if (!existStateInStateAry) {\r\n                    stateAry.push(stateObj);\r\n                }\r\n            }\r\n            if (stateDom.children && stateDom.children.length) {\r\n                for (let j = 0; j < stateDom.children.length; j++) {\r\n                    let child = stateDom.children[j];\r\n                    extractStateAndLine(child);\r\n                }\r\n            }\r\n        }\r\n        extractStateAndLine(xmlDom);\r\n        return {\r\n            stateAry: stateAry,\r\n            lineAry: lineAry\r\n        }\r\n    },\r\n    /**\r\n     * 将Blockly数据复制到剪切板 - 调试时用\r\n     * @param {*} blocklyXml \r\n     */\r\n    copyBlocklyXml2Clipboard(blocklyXml) {\r\n        // window.stateDataXml = blocklyXml.outerHTML;\r\n        let hiddenInput = document.createElement(\"input\");\r\n        hiddenInput.setAttribute(\"type\", \"text\");\r\n        hiddenInput.setAttribute(\"value\", blocklyXml);\r\n        hiddenInput.setAttribute(\"style\", \"height: 0; overflow: hidden;\");\r\n        document.body.appendChild(hiddenInput);\r\n        hiddenInput.focus();\r\n        hiddenInput.select();\r\n        document.execCommand(\"copy\");\r\n        document.body.removeChild(hiddenInput);\r\n    },\r\n    workspace2dom(){\r\n        var xmlText = '';\r\n        var iframeDom = document.getElementById('blocklyIframe');\r\n        if (iframeDom) {\r\n            var win = iframeDom.contentWindow;\r\n            var xmlDom = win.Blockly.Xml.workspaceToDom(win.Code.workspace);\r\n            xmlText = win.Blockly.Xml.domToPrettyText(xmlDom);\r\n            \r\n        }else{\r\n            console.error('当前页面没有嵌入blockly');\r\n        }\r\n        return xmlText;\r\n    }\r\n\r\n}\r\nexport default Util;"],"file":"util.dev.js"}