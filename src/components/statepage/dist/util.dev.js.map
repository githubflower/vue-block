{"version":3,"sources":["util.js"],"names":["NAME_SPACE","SOUP","RANKSEP","lineCfg","rankSep","Util","isDefined","a","createEl","tagName","attrs","dom","document","createElementNS","key","setAttribute","createFieldDom","field","container","name","id","textContent","value","createCommentDom","comment","commentDom","pinned","createStateDefBlock","state","index","thread","valueDom","stateDom","stateId","fieldDom","appendChild","children","length","startChild","find","item","inputAry","childrenDom","state2dom","statementDom","createNextStatesDom","nextDom","outputDom","outputAry","mutation","forEach","outputItem","outputStateDom","lineId","line","lineAry","store","getStateImplement","endState","stateAry","console","error","createNextStatesDom2","triggerEventDom","nextStatesDom","parentDom","indexOf","triggerEventStatement","saveLineData","desc","genBlockType","type","ret","saveStateXY","el","x","y","saveStateWidthHeight","width","height","saveStateMode","mode","saveStateBlockDataInDom","log","stateType","rootState","threadData","rootEl","createThreadDefDom","threadProcedureId","threadDefDom","procedureSelectBlockDom","fieldProcedureDom","createThreadProcedureDom","statesDom","threadProcedureDom","genUid","soupLength","i","charAt","Math","random","join","getDomChildren","ary","Array","prototype","slice","call","toNum","str","parseInt","translatePX2Num","test","replace","getPrevStateDom","parent","parentNode","getAttribute","getStateXY","existStates","gap_x","gap_y","getLineDom","prevLineId","prevStateDom","prevX","prevY","prevState","getEntityStateId","state2blockly","threadAry","statePageData","blocklyXml","firstState","listsDom","mutationDom","stateDefBlock","procedureDefId","outerHTML","blockly2state","xmlDom","DOMParser","parseFromString","stateLogicDom","getProceduresDefDom","listStateDom","getListStateDom","extractStateAndLine","updateChildrenOfState","STATE_BLOCK","dom2State","findOutputLinesOfStateDom","outputLines","child","lineDom","newLine","d","startState","getStartStateDomOfLine","getEndStateDomOfLine","existLineOfOutputLines","push","existLineOfLineAry","findInputLinesOfStateDom","inputLines","existLineOfInputLines","existThisStateObj","stateObj","bx","by","nodeHeight","existStateInStateAry","j","childNodes","subStatesDom","element","stateAry2","childrenData","getStateById","ary2","result","statement","nodeName","statementChildren","endStateDom","copyBlocklyXml2Clipboard","hiddenInput","createElement","body","select","execCommand","removeChild","workspace2dom","xmlText","iframeDom","getElementById","win","contentWindow","Blockly","Xml","workspaceToDom","Code","workspace","domToPrettyText","resetAllStateData","autoLayout","findFirstState","virtualHeight","getVirtualHeight","outputStates","lineObj","endStateOfLine","sum","getAutoXY","getDomByStateId","doms","getElementsByClassName","genGraphByLayer","threadIndex","layer","g","dagre","graphlib","Graph","setGraph","rankdir","align","edgesep","ranksep","setDefaultEdgeLabel","stateInCurrentLayer","setNode","label","QBlock","State","getStateWidth","getStateHeight","getState","setEdge","setStateXYbyNode","node","halfStateWidth","halfStateHeight","setStateXYbyLayer","nodes","nodeId","stateData","lineMap","refresh","JSON","stringify","testLayout","layout"],"mappings":"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","sourcesContent":["const NAME_SPACE = \"https://developers.google.com/blockly/xml\";\r\nconst SOUP = '!#$%()*+,-./:;=?@[]^_`{|}~ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\nimport dagre from 'dagre'\r\nimport QBlock from './qblock.js'\r\nimport { lineCfg } from \"./graphCfg.js\";\r\nconst RANKSEP = lineCfg.rankSep\r\nvar Util = {\r\n    isDefined(a) {\r\n        return !((a === '') || (a === null) || (typeof a === 'undefined'));\r\n    },\r\n    createEl(tagName, attrs) {\r\n        var dom = document.createElementNS(NAME_SPACE, tagName);\r\n        if (typeof attrs === 'object') {\r\n            for (var key in attrs) {\r\n                dom.setAttribute(key, attrs[key]);\r\n            }\r\n        }\r\n        return dom;\r\n    },\r\n    createFieldDom(field) {\r\n        let container = this.createEl(\"field\");\r\n        container.setAttribute(\"name\", field.name);\r\n        if (field.id) {\r\n            container.setAttribute('id', field.id);\r\n        }\r\n        container.textContent = field.value;\r\n        return container;\r\n    },\r\n\r\n    /**\r\n     * 创建注释块Dom\r\n     * @param {*} comment \r\n     */\r\n    createCommentDom(comment) {\r\n        let commentDom = this.createEl('comment');\r\n        commentDom.setAttribute('pinned', comment.pinned || false);\r\n        commentDom.textContent = comment.value;\r\n        return commentDom;\r\n    },\r\n\r\n    /**\r\n     * 创建状态定义块Dom\r\n     * @param {*} state \r\n     * @param {Number} index \r\n     * @param {*} thread \r\n     */\r\n    createStateDefBlock(state, index, thread) {\r\n        var valueDom = this.createEl('value');\r\n        valueDom.setAttribute('name', 'ADD' + index);\r\n\r\n        var stateDom = this.createEl('block');\r\n        stateDom.setAttribute('type', 'state_def');\r\n        stateDom.setAttribute('id', state.stateId);\r\n        var fieldDom = this.createFieldDom({\r\n            name: 'NAME',\r\n            value: state.name\r\n        });\r\n        stateDom.appendChild(fieldDom);\r\n\r\n        //如果children不为空则说明是嵌套状态，此时需要将子状态逻辑放到“状态定义块”内部\r\n        if (state.children && state.children.length) {\r\n            //找到第一个子状态（inputAry为空）\r\n            var startChild = state.children.find(item => {\r\n                return (!item.inputAry || item.inputAry.length === 0);\r\n            })\r\n            var childrenDom = Util.state2dom(startChild, thread);\r\n            var statementDom = this.createEl(\"statement\");\r\n            statementDom.setAttribute(\"name\", 'STACK');\r\n            statementDom.appendChild(childrenDom);\r\n            stateDom.appendChild(statementDom);\r\n\r\n            // valueDom.appendChild(childrenDom);\r\n        }\r\n\r\n        valueDom.appendChild(stateDom);\r\n\r\n        return valueDom;\r\n    },\r\n\r\n    /**\r\n     * 创建连线Dom以及其连接的状态块的Dom - 触发事件描述采用通用的if-else结构 controls_if \r\n     * ！此方法没有用到，代码暂时先放着\r\n     * @param {*} state \r\n     * @param {*} thread \r\n     */\r\n    createNextStatesDom(state, thread) {\r\n        let nextDom, outputDom;\r\n\r\n        if (state.outputAry.length) {\r\n            nextDom = this.createEl(\"next\");\r\n            outputDom = this.createEl(\"block\");\r\n            outputDom.setAttribute(\"type\", \"controls_if\");\r\n            if (state.outputAry.length > 1) {\r\n                let mutation = this.createEl(\"mutation\");\r\n                mutation.setAttribute(\"elseif\", state.outputAry.length - 1);\r\n                outputDom.appendChild(mutation);\r\n            }\r\n            state.outputAry.forEach((outputItem, index) => {\r\n                let outputStateDom;\r\n                outputStateDom = this.createEl(\"statement\");\r\n                outputStateDom.setAttribute(\"name\", `DO${index}`);\r\n                outputStateDom.setAttribute(\"id\", `${outputItem.lineId}`);\r\n                //outputAry里面只存放了lineId 所以我们需要做以下事情：\r\n                //1 根据lineId找到对应的line数据\r\n                //2 根据line里面的endState的stateId找到对应的state数据\r\n                let line = thread.lineAry.find((item) => {\r\n                    return item.lineId === outputItem.lineId;\r\n                });\r\n                if (line) {\r\n                    /* let state = thread.stateAry.find((item) => {\r\n                        return item.stateId === line.endState.stateId;\r\n                    }); */\r\n                    let state = store.getStateImplement(line.endState.stateId, thread.stateAry);\r\n                    if (state) {\r\n                        outputStateDom.appendChild(Util.state2dom(state, thread));\r\n                    } else {\r\n                        console.error(\"data error -^- \");\r\n                    }\r\n                }\r\n                if (outputStateDom) {\r\n                    outputDom.appendChild(outputStateDom);\r\n                }\r\n            });\r\n            nextDom.appendChild(outputDom);\r\n        }\r\n        return nextDom;\r\n    },\r\n\r\n    /**\r\n     * 创建连线Dom以及其连接的状态块的Dom - 触发事件描述采用独立的结构 state_trigger_event\r\n     * @param {*} state \r\n     * @param {*} thread \r\n     */\r\n    createNextStatesDom2(state, thread) {\r\n        let triggerEventDom;\r\n        let nextStatesDom;\r\n        if (state.outputAry.length) {\r\n            /* if (state.outputAry.length > 1) {\r\n                let mutation = this.createEl(\"mutation\");\r\n                mutation.setAttribute(\"elseif\", state.outputAry.length - 1);\r\n                triggerEventDom.appendChild(mutation);\r\n            } */\r\n            let parentDom;\r\n\r\n            state.outputAry.forEach((outputItem, index) => {\r\n                let nextDom = this.createEl(\"next\");\r\n                if (!nextStatesDom) {\r\n                    nextStatesDom = nextDom;\r\n                }\r\n                triggerEventDom = this.createEl(\"block\");\r\n                triggerEventDom.setAttribute(\"type\", \"state_trigger_event\");\r\n                triggerEventDom.setAttribute(\"id\", outputItem.lineId);\r\n                if (outputItem.lineId.indexOf('line') !== 0){\r\n                    debugger;\r\n                }\r\n                // triggerEventDom.setAttribute(\"start_state\", JSON.stringify(state)); // TODO 按需简化存储的start_state数据\r\n\r\n                let triggerEventStatement;\r\n                triggerEventStatement = this.createEl(\"statement\");\r\n                triggerEventStatement.setAttribute(\"name\", `DO0`);\r\n                // triggerEventStatement.setAttribute(\"id\", `${outputItem.lineId}`);\r\n                //outputAry里面只存放了lineId 所以我们需要做以下事情：\r\n                //1 根据lineId找到对应的line数据\r\n                //2 根据line里面的endState的stateId找到对应的state数据\r\n                let line = thread.lineAry.find((item) => {\r\n                    return item.lineId === outputItem.lineId;\r\n                });\r\n                if (line) {\r\n                    Util.saveLineData(triggerEventDom, line);\r\n                    if (line.desc) {\r\n                        let commentDom = this.createCommentDom({\r\n                            value: line.desc\r\n                        });\r\n                        triggerEventDom.appendChild(commentDom);\r\n                    }\r\n                    let state = store.getStateImplement(line.endState.stateId, thread.stateAry);\r\n                    if (state) {\r\n                        // triggerEventDom.setAttribute(\"end_state\", JSON.stringify(state)); // TODO 按需简化存储的end_state数据\r\n                        triggerEventStatement.appendChild(Util.state2dom(state, thread));\r\n                    } else {\r\n                        console.error(\"data error -^- \");\r\n                    }\r\n                }\r\n                if (triggerEventStatement) {\r\n                    triggerEventDom.appendChild(triggerEventStatement);\r\n                }\r\n                nextDom.appendChild(triggerEventDom);\r\n                if (parentDom) {\r\n                    parentDom.appendChild(nextDom);\r\n                }\r\n                parentDom = triggerEventDom;\r\n\r\n            });\r\n        }\r\n        return nextStatesDom;\r\n    },\r\n\r\n    genBlockType(type) {\r\n        let ret = \"state_opr\";\r\n        if (type === \"loopDiv\") {\r\n            ret = \"controls_whileUntil\";\r\n        }\r\n        return ret;\r\n    },\r\n    /**\r\n     * 保存状态块的位置信息到Dom中\r\n     * @param {*} el 新建的和状态对应的Dom节点\r\n     * @param {*} state 当前操作的状态\r\n     */\r\n    saveStateXY(el, state) {\r\n        el.setAttribute(\"sx\", state.x);\r\n        el.setAttribute(\"sy\", state.y);\r\n    },\r\n    saveStateWidthHeight(el, state) {\r\n        el.setAttribute(\"s_width\", state.width);\r\n        el.setAttribute(\"s_height\", state.height);\r\n    },\r\n    saveStateMode(el, state) {\r\n        el.setAttribute(\"mode\", state.mode);\r\n    },\r\n    /**\r\n     * 保存状态块的数据到Dom中\r\n     * @param {*} el 新建的和状态对应的Dom节点\r\n     * @param {*} state 当前操作的状态\r\n     */\r\n    saveStateBlockDataInDom(el, state) {\r\n        console.log(state);\r\n        switch (state.stateType) {\r\n            case 'stateDiv': //状态执行\r\n                this.saveStateXY(el, state);\r\n                this.saveStateWidthHeight(el, state);\r\n                this.saveStateMode(el, state);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    },\r\n    /**\r\n     * 保存连线数据到Dom\r\n     * @param {*} el 新建的和状态对应的Dom节点\r\n     * @param {*} state 当前操作的状态\r\n     */\r\n    saveLineData(el, line) {\r\n        el.setAttribute(\"s_type\", line.type);\r\n    },\r\n    /**\r\n     * 将一个状态块转为Dom节点\r\n     * @param {*} rootState \r\n     * @param {*} threadData \r\n     */\r\n    state2dom(rootState, threadData) {\r\n        let rootEl = this.createEl(\"block\");\r\n        // rootEl.setAttribute(\"id\", rootState.stateId);\r\n        rootEl.setAttribute(\"type\", this.genBlockType(rootState.stateType));\r\n        this.saveStateBlockDataInDom(rootEl, rootState);\r\n\r\n\r\n        let fieldDom = this.createFieldDom({\r\n            id: rootState.stateId,\r\n            name: \"field_state\",\r\n            value: rootState.name,\r\n        });\r\n        rootEl.appendChild(fieldDom);\r\n\r\n        let nextStatesDom = this.createNextStatesDom2(rootState, threadData);\r\n        if (nextStatesDom) {\r\n            rootEl.appendChild(nextStatesDom);\r\n        }\r\n        return rootEl;\r\n    },\r\n    /**\r\n     * 创建线程定义块的Dom\r\n     * @param {*} thread \r\n     * @param {*} threadProcedureId 线程的函数id\r\n     */\r\n    createThreadDefDom(thread, threadProcedureId) {\r\n        /* <block type=\"thread_def\" id=\"ISJ:}kp8l):hy~wr5{x5\" x=\"-187\" y=\"-87\">\r\n            <field name=\"NAME\">thread</field>\r\n            <statement name=\"CALLBACK\">\r\n                <block type=\"procedure_select\" id=\"IK`|)2n6nVKsvFJ4VlXC\">\r\n                    <field name=\"field_procedure\" id=\"aewyJ+/)D`VHlrJ$BgFT\">thread_p</field>\r\n                </block>\r\n            </statement>\r\n        </block> */\r\n        // const procedureDefId = this.genUid();\r\n        let threadDefDom = this.createEl('block', {\r\n            type: \"thread_def\"\r\n        });\r\n        let fieldDom = this.createEl('field', {\r\n            name: 'NAME',\r\n            textContent: thread.name\r\n        });\r\n        fieldDom.textContent = thread.name;\r\n\r\n        let statementDom = this.createEl('statement', {\r\n            name: 'CALLBACK'\r\n        });\r\n        let procedureSelectBlockDom = this.createEl('block', {\r\n            type: 'procedure_select'\r\n        });\r\n        let fieldProcedureDom = this.createEl('field', {\r\n            name: 'field_procedure',\r\n            id: threadProcedureId,\r\n        });\r\n        fieldProcedureDom.textContent = thread.name + \"_function\";\r\n        procedureSelectBlockDom.appendChild(fieldProcedureDom);\r\n        statementDom.appendChild(procedureSelectBlockDom);\r\n        threadDefDom.appendChild(fieldDom);\r\n        threadDefDom.appendChild(statementDom);\r\n\r\n        return threadDefDom;\r\n    },\r\n    /**\r\n     * 创建线程函数定义块的Dom\r\n     * @param {*} thread \r\n     * @param {*} threadProcedureId \r\n     * @param {*} statesDom 所有连接的状态\r\n     */\r\n    createThreadProcedureDom(thread, threadProcedureId, statesDom) {\r\n        console.log('---thread.name---' + thread.name);\r\n        /* <block type=\"procedures_defnoreturn\" id=\"aewyJ+/)D`VHlrJ$BgFT\" x=\"463\" y=\"-113\">\r\n            <field name=\"NAME\">thread_p</field>\r\n            <comment pinned=\"false\" h=\"80\" w=\"160\">Describe this function...</comment>\r\n            <statement name=\"STACK\">\r\n            </statement>\r\n        </block> */\r\n        let threadProcedureDom = this.createEl('block', {\r\n            type: 'procedures_defnoreturn',\r\n            id: threadProcedureId\r\n        });\r\n        let fieldDom = this.createEl('field', {\r\n            name: 'NAME',\r\n\r\n        });\r\n        fieldDom.textContent = thread.name + \"_function\";\r\n        let statementDom = this.createEl('statement', {\r\n            name: 'STACK'\r\n        });\r\n        statementDom.appendChild(statesDom);\r\n        threadProcedureDom.appendChild(fieldDom);\r\n        threadProcedureDom.appendChild(statementDom);\r\n        return threadProcedureDom;\r\n    },\r\n    /**\r\n     * 获取唯一id，同google blockly产生唯一id的方法\r\n     */\r\n    genUid() {\r\n        var length = 20;\r\n        var soupLength = SOUP.length;\r\n        var id = [];\r\n        for (var i = 0; i < length; i++) {\r\n            id[i] = SOUP.charAt(Math.random() * soupLength);\r\n        }\r\n        return id.join('');\r\n    },\r\n    getDomChildren(dom) {\r\n        var ary = [];\r\n        if (dom.children) {\r\n            ary = Array.prototype.slice.call(dom.children);\r\n        }\r\n        return ary;\r\n    },\r\n    toNum(str) {\r\n        return parseInt(str, 10);\r\n    },\r\n    translatePX2Num(str) {\r\n        if (/px/.test(str)) {\r\n            str = str.replace(\"px\", \"\");\r\n        }\r\n        return +str;\r\n    },\r\n    getPrevStateDom(dom) {\r\n        var parent = dom.parentNode;\r\n        if (parent) {\r\n            if (parent.getAttribute('type') === 'state_opr') {\r\n                return parent;\r\n            } else {\r\n                parent = this.getPrevStateDom(parent);\r\n            }\r\n        }\r\n        return parent;\r\n    },\r\n    getStateXY(stateDom, existStates) {\r\n        /**\r\n         * 1.获取这个Dom节点的sx, sy值，如果存在就使用这个值，如果不存在，则获取上一个状态的sx, sy值，然后查看这个stateDom处于上一个状态的outputAry中的第几个元素，假设是第3个，则\r\n         * XY的值为：  x: targetDom.sx + gap_x(水平方向间隔)  y: targetDom.sx + index * gap_y\r\n         */\r\n        const gap_x = 150;\r\n        const gap_y = 100;\r\n        let x = this.toNum(stateDom.getAttribute('sx'));\r\n        let y = this.toNum(stateDom.getAttribute('sy'));\r\n\r\n        function getLineDom(dom) {\r\n            var parent = dom.parentNode;\r\n            if (parent) {\r\n                if (parent.getAttribute && parent.getAttribute('type') === 'state_trigger_event') {\r\n                    return parent;\r\n                } else {\r\n                    parent = getLineDom(parent);\r\n                }\r\n            }\r\n            return parent;\r\n        }\r\n\r\n        let prevLineId = getLineDom(stateDom) && getLineDom(stateDom).getAttribute('id');\r\n        // 正常拼接的情况下这个prevLineId是一定存在的\r\n        if (!x || x === 'undefined') { // x是未定义的则 y也是未定义的\r\n            let prevStateDom = Util.getPrevStateDom(stateDom);\r\n            if (!prevStateDom) {\r\n                return {\r\n                    x: 0,\r\n                    y: 0\r\n                }\r\n            }\r\n            let prevX = this.toNum(prevStateDom.getAttribute('sx'));\r\n            let prevY = this.toNum(prevStateDom.getAttribute('sy'));\r\n            if (!prevX || prevX === 'undefined') {\r\n                prevX = 0;\r\n                prevY = 0;\r\n            }\r\n            x = prevX + gap_x;\r\n            var index = 0;\r\n            var prevState = existStates.find(item => {\r\n                return item.stateId === Util.getEntityStateId(prevStateDom);\r\n            })\r\n\r\n            prevState.outputAry.forEach((item, i) => {\r\n                if (item.lineId === prevLineId) {\r\n                    index = i;\r\n                    return false; // return false 结束forEach\r\n                }\r\n            })\r\n            y = prevY + index * gap_y;\r\n        }\r\n        return {\r\n            x: x,\r\n            y: y\r\n        }\r\n    },\r\n    getEntityStateId(stateDom) {\r\n        return stateDom.children[0].getAttribute('id');\r\n    },\r\n    /**\r\n     * 将所有线程的数据（包括了状态和连线）转为Blockly可识别的xml数据\r\n     * @param {*} threadAry 线程数据\r\n     */\r\n    state2blockly(threadAry) {\r\n        /**\r\n         * 1.找到线程中有开始标记的根状态\r\n         * 2.遍历根状态的output，生成特殊的if-else if 结构，注意：默认不采用else\r\n         *\r\n         */\r\n        let statePageData = threadAry;\r\n\r\n        let blocklyXml = Util.createEl(\"xml\");\r\n        blocklyXml.setAttribute(\r\n            \"xmlns\",\r\n            \"https://developers.google.com/blockly/xml\"\r\n        );\r\n\r\n        statePageData.forEach((thread, index) => {\r\n            let firstState = thread.stateAry[0];\r\n            let listsDom = Util.createEl('block');\r\n            listsDom.setAttribute('type', 'lists_state');\r\n            listsDom.setAttribute('x', 300 + (700 * index));\r\n            listsDom.setAttribute('y', 150);\r\n\r\n            let mutationDom = Util.createEl('mutation');\r\n            mutationDom.setAttribute('items', thread.stateAry.length);\r\n            listsDom.appendChild(mutationDom);\r\n\r\n            thread.stateAry.forEach((state, i) => {\r\n                let stateDefBlock = Util.createStateDefBlock(state, i, thread);\r\n                listsDom.appendChild(stateDefBlock);\r\n                // blocklyXml.appendChild(stateDefBlock);\r\n            })\r\n            var statesDom = Util.state2dom(firstState, thread);\r\n            const procedureDefId = Util.genUid();\r\n            let threadDefDom = Util.createThreadDefDom(thread, procedureDefId);\r\n            let threadProcedureDom = Util.createThreadProcedureDom(thread, procedureDefId, statesDom);\r\n            if (Util.isDefined(thread.x)) {\r\n                threadDefDom.setAttribute('x', thread.x);\r\n            } else {\r\n                threadDefDom.setAttribute('x', index * 700);\r\n            }\r\n            if (Util.isDefined(thread.y)) {\r\n                threadDefDom.setAttribute('y', thread.y);\r\n            } else {\r\n                threadDefDom.setAttribute('y', 10);\r\n            }\r\n            threadProcedureDom.setAttribute('x', index * 700);\r\n            threadProcedureDom.setAttribute('y', 200);\r\n            //这个添加的顺序很重要！！！\r\n            blocklyXml.appendChild(listsDom);\r\n            blocklyXml.appendChild(threadProcedureDom);\r\n            blocklyXml.appendChild(threadDefDom);\r\n        });\r\n\r\n        return blocklyXml.outerHTML;\r\n    },\r\n    /**\r\n     * 将Blockly数据转为状态图可识别的数据\r\n     */\r\n    blockly2state(xmlDom) {\r\n        if (typeof xmlDom === 'string') {\r\n            xmlDom = new DOMParser().parseFromString(xmlDom, 'text/xml');\r\n        }\r\n\r\n        var stateLogicDom = Util.getProceduresDefDom(xmlDom);\r\n        var listStateDom = Util.getListStateDom(xmlDom);\r\n\r\n        let stateAry = []; //所有的状态数据集合\r\n        let lineAry = []; //所有的连线数据集合\r\n        Util.extractStateAndLine(stateLogicDom, stateAry, lineAry);\r\n\r\n        Util.updateChildrenOfState(stateAry, listStateDom, lineAry);\r\n        return {\r\n            stateAry: stateAry,\r\n            lineAry: lineAry\r\n        }\r\n    },\r\n    extractStateAndLine(stateDom, stateAry, lineAry) {\r\n        /* <block type=\"state_opr\" id=\"0eRjWo`*LW!O%5)$3!bj\" sx=\"394\" sy=\"201\">\r\n            <field name=\"field_state\" id=\"state-1607658086399\">状态描述0</field>\r\n        </block> */\r\n        const STATE_BLOCK = 'state_opr';\r\n        if (stateDom && stateDom.tagName === 'block' && stateDom.getAttribute('type') === STATE_BLOCK) {\r\n            let stateId = Util.getEntityStateId(stateDom);\r\n            let existThisStateObj = false;\r\n            // 这个stateId有可能已经存在 看一下xml数据就能明白了\r\n            let stateObj = stateAry.find(item => {\r\n                return item.stateId === stateId;\r\n            });\r\n\r\n            if (!stateObj) {\r\n                stateObj = {\r\n                    stateId: Util.getEntityStateId(stateDom), //!!!这里的id不是block.state_opr的 id 哟，而是它下面的field.field_state的id\r\n                    stateType: stateDom.getAttribute('type') === STATE_BLOCK ? 'stateDiv' : 'loopDiv',\r\n                    bx: parseInt(stateDom.getAttribute('x'), 10), // blockly中与此对应的图形块的x\r\n                    by: parseInt(stateDom.getAttribute('y'), 10), // blockly中与此对应的图形块的y\r\n                    x: Util.getStateXY(stateDom, stateAry).x, //stateDom.getAttribute('sx'),\r\n                    y: Util.getStateXY(stateDom, stateAry).y,\r\n                    width: stateDom.getAttribute('s_width') || '76px',\r\n                    height: stateDom.getAttribute('s_height') || '40px',\r\n                    // virtualHeight: Util.getVirtualHeight(outputAry), //TODO 开始状态为这个stateDom的所有状态高度之和\r\n                    name: stateDom.children[0].textContent,\r\n                    mode: stateDom.getAttribute('mode') || 'default',\r\n                    inputAry: [],\r\n                    outputAry: [],\r\n                    children: [],\r\n                    parent: null,\r\n                    nodeHeight: 0 // 如果该节点有2个分支，且分支是叶子节点，则这个节点的nodeHeight = 2; 总之，nodeHeight = 各分支nodeHeight之和 - 这个参数为自动布局所用\r\n                }\r\n                \r\n            }else{\r\n                //如果stateAry里面已经有了这个stateObj且stateObj.outputAry非空  则说明分析过了，不用再调用findOutputLinesOfStateDom进行分析\r\n                /* if (!stateObj.outputAry.length){\r\n                    findOutputLinesOfStateDom(stateDom, stateObj.outputAry);\r\n                }\r\n                if (!stateObj.inputAry.length) {\r\n                    findInputLinesOfStateDom(stateDom, stateObj.inputAry);\r\n                }    */             \r\n                \r\n            }\r\n            findOutputLinesOfStateDom(stateDom, stateObj.outputAry);\r\n            findInputLinesOfStateDom(stateDom, stateObj.inputAry);\r\n\r\n            function dom2State(dom) {\r\n                let stateId = dom.getAttribute('id');\r\n                if (dom.getAttribute('type') === STATE_BLOCK) {\r\n                    stateId = Util.getEntityStateId(dom);\r\n                }\r\n                return {\r\n                    stateId: stateId,\r\n                    stateType: STATE_BLOCK\r\n                };\r\n            }\r\n\r\n            function findOutputLinesOfStateDom(stateDom, outputLines) {\r\n                // 如果stateDom中有next节点 且 next节点的children中有block.state_trigger_event 则将这个block.state_trigger_event push 到 outputLines\r\n                // 然后将这个block.state_trigger_event作为新的stateDom，查找其包含的block.state_trigger_event 这样遍历查找所有的block.state_trigger_event就找到了outputLines\r\n                let children = Util.getDomChildren(stateDom);\r\n                children.forEach(child => {\r\n                    if (child.tagName === 'next') { //所有next节点的children都只有1个\r\n                        if (child.children && child.children[0] && child.children[0].getAttribute('type') === 'state_trigger_event') {\r\n                            let lineDom = child.children[0];\r\n                            if(!lineDom.getAttribute('id').indexOf('line') === 0){\r\n                                debugger;\r\n                            }\r\n                            let newLine = {\r\n                                lineId: lineDom.getAttribute('id'),\r\n                                d: lineDom.getAttribute('d'),\r\n                                type: lineDom.getAttribute('s_type'),\r\n                                startState: dom2State(Util.getStartStateDomOfLine(lineDom)),\r\n                                endState: dom2State(Util.getEndStateDomOfLine(lineDom)),\r\n                            };\r\n                            if (newLine.lineId.indexOf('line') !== 0) {\r\n                                debugger;\r\n                            }\r\n                            let existLineOfOutputLines = outputLines.find(item => {\r\n                                return item.lineId === lineDom.getAttribute('id');\r\n                            })\r\n                            if (!existLineOfOutputLines) {\r\n                                outputLines.push(newLine);\r\n                            }\r\n\r\n                            let existLineOfLineAry = lineAry.find(item => {\r\n                                return (item.lineId === lineDom.getAttribute('id')) || ((item.startState.stateId === newLine.startState.stateId) && (item.endState.stateId === newLine.endState.stateId) )\r\n                            })\r\n                            if (!existLineOfLineAry) {\r\n                                lineAry.push(newLine);\r\n                            }\r\n                            findOutputLinesOfStateDom(lineDom, outputLines);\r\n                        }\r\n                    }\r\n                })\r\n                return outputLines;\r\n            }\r\n\r\n            function findInputLinesOfStateDom(stateDom, inputLines) {\r\n                //逐级往上寻找type === 'state_opr'的块即inputLines    //  block.state_trigger_event > statement > block.state_opr\r\n                let lineDom = stateDom.parentNode && stateDom.parentNode.parentNode;\r\n                if (lineDom && lineDom.getAttribute('type') === 'state_trigger_event') {\r\n                    let newLine = {\r\n                        lineId: lineDom.getAttribute('id'),\r\n                        d: lineDom.getAttribute('d'),\r\n                        type: lineDom.getAttribute('s_type'),\r\n                        startState: dom2State(Util.getPrevStateDom(lineDom)),\r\n                        endState: dom2State(Util.getEndStateDomOfLine(lineDom))\r\n                    };\r\n                    if(newLine.lineId.indexOf('line') !== 0){\r\n                        debugger;\r\n                    }\r\n\r\n                    let existLineOfInputLines = inputLines.find(item => {\r\n                        return item.lineId === newLine.lineId;\r\n                    })\r\n                    if (!existLineOfInputLines) {\r\n                        inputLines.push(newLine);\r\n                    }\r\n\r\n                    let existLineOfLineAry = lineAry.find(item => {\r\n                        return (item.lineId === lineDom.getAttribute('id')) || ((item.startState.stateId === newLine.startState.stateId) && (item.endState.stateId === newLine.endState.stateId))\r\n                    })\r\n                    if (!existLineOfLineAry) {\r\n                        lineAry.push(newLine);\r\n                    }\r\n                }\r\n                return inputLines;\r\n            }\r\n\r\n            let existStateInStateAry = stateAry.find(state => {\r\n                return state.stateId === stateObj.stateId;\r\n            })\r\n            if (!existStateInStateAry) {\r\n                stateAry.push(stateObj);\r\n            }\r\n        }\r\n\r\n        if (stateDom && stateDom.children && stateDom.children.length) {\r\n            for (let j = 0; j < stateDom.children.length; j++) {\r\n                let child = stateDom.children[j];\r\n                Util.extractStateAndLine(child, stateAry, lineAry);\r\n            }\r\n        }\r\n    },\r\n    updateChildrenOfState(stateAry, xmlDom, lineAry) {\r\n        if (xmlDom && xmlDom.tagName === 'block' && xmlDom.getAttribute('type') === 'state_def') {\r\n            if (xmlDom.childNodes) {\r\n                var ary = Array.prototype.slice.call(xmlDom.childNodes);\r\n                var subStatesDom = ary.find(element => {\r\n                    return element.tagName === 'statement'\r\n                });\r\n                if (subStatesDom) {\r\n                    var stateAry2 = [];\r\n                    var childrenData = Util.extractStateAndLine(subStatesDom, stateAry2, lineAry);\r\n                    var state = Util.getStateById(stateAry, xmlDom.getAttribute('id'));\r\n                    if (state) {\r\n                        state.children = stateAry2;\r\n                        stateAry2.forEach(item => {\r\n                            item.parent = state.stateId;\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (xmlDom) {\r\n                var ary2 = Array.prototype.slice.call(xmlDom.childNodes);\r\n                ary2.forEach(item => {\r\n                    Util.updateChildrenOfState(stateAry, item, lineAry);\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n    },\r\n    getProceduresDefDom(dom) {\r\n        var result;\r\n        if (dom.tagName === 'block' && dom.getAttribute('type') === 'procedures_defnoreturn') {\r\n            result = dom;\r\n        } else {\r\n            var children = Array.prototype.slice.call(dom.childNodes);\r\n            for (var i = 0; i < children.length; i++) {\r\n                result = Util.getProceduresDefDom(children[i]);\r\n                if (result) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    },\r\n    getListStateDom(dom) {\r\n        var result;\r\n        if (dom && dom.tagName && dom.tagName === 'block' && dom.getAttribute('type') === 'lists_state') {\r\n            result = dom;\r\n        } else {\r\n            var children = Array.prototype.slice.call(dom.childNodes);\r\n            for (var i = 0; i < children.length; i++) {\r\n                result = Util.getListStateDom(children[i]);\r\n                if (result) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    },\r\n    getStateById(stateAry, stateId) {\r\n        var item, result;\r\n        for (var i = 0; i < stateAry.length; i++) {\r\n            item = stateAry[i];\r\n            if (item.stateId === stateId) {\r\n                return item;\r\n            } else {\r\n                if (item.children && item.children.length) {\r\n                    result = Util.getStateById(item.children, stateId);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    },\r\n    getStartStateDomOfLine(lineDom) {\r\n        return this.getPrevStateDom(lineDom);\r\n    },\r\n    getEndStateDomOfLine(lineDom) {\r\n        let children = Array.prototype.slice.call(lineDom.childNodes);\r\n        let statement = children.find(dom => {\r\n            return dom.nodeName === 'statement'\r\n        })\r\n        let statementChildren = Array.prototype.slice.call(statement.childNodes);\r\n        let endStateDom = statementChildren.find(dom => {\r\n            return dom.nodeName === 'block'\r\n        })\r\n        if (!endStateDom) {\r\n            console.error('数据错误：触发事件连线没有连接正确的状态');\r\n        }\r\n        return endStateDom;\r\n    },\r\n    /**\r\n     * 将Blockly数据复制到剪切板 - 调试时用\r\n     * @param {*} blocklyXml \r\n     */\r\n    copyBlocklyXml2Clipboard(blocklyXml) {\r\n        // window.stateDataXml = blocklyXml.outerHTML;\r\n        let hiddenInput = document.createElement(\"input\");\r\n        hiddenInput.setAttribute(\"type\", \"text\");\r\n        hiddenInput.setAttribute(\"value\", blocklyXml);\r\n        hiddenInput.setAttribute(\"style\", \"height: 0; overflow: hidden;\");\r\n        document.body.appendChild(hiddenInput);\r\n        //hiddenInput.focus();\r\n        hiddenInput.select();\r\n        document.execCommand(\"copy\");\r\n        document.body.removeChild(hiddenInput);\r\n    },\r\n    workspace2dom() {\r\n        var xmlText = '';\r\n        var iframeDom = document.getElementById('blocklyIframe');\r\n        if (iframeDom) {\r\n            var win = iframeDom.contentWindow;\r\n            var xmlDom = win.Blockly.Xml.workspaceToDom(win.Code.workspace);\r\n            xmlText = win.Blockly.Xml.domToPrettyText(xmlDom);\r\n\r\n        } else {\r\n            console.error('当前页面没有嵌入blockly');\r\n        }\r\n        return xmlText;\r\n    },\r\n    /**\r\n     * 在自动布局前重置所有状态的x,y坐标\r\n     */\r\n    resetAllStateData(thread) {\r\n        if (thread) {\r\n            thread.stateAry.forEach(state => {\r\n                state.x = 0;\r\n                state.y = 0;\r\n            })\r\n        }\r\n    },\r\n    autoLayout(thread) {\r\n        if (thread) {\r\n            let firstState = Util.findFirstState(thread.stateAry);\r\n            thread.stateAry.forEach(state => {\r\n                let prevState; //TODO 当前状态的前一个兄弟节点\r\n                state.virtualHeight = Util.getVirtualHeight(state);\r\n                state.y = prevState.y + prevState.virtualHeight;\r\n            })\r\n        }\r\n    },\r\n    /**\r\n     * 找到“开始状态”\r\n     */\r\n    findFirstState(stateAry) {\r\n        return stateAry[0]; //TODO 后续根据特定标记查找\r\n    },\r\n    getVirtualHeight(state) {\r\n        let outputStates = [];\r\n        state.outputAry.forEach(line => {\r\n            let lineObj = thread.lineAry.find(item => {\r\n                return item.lineId === line.lineId;\r\n            })\r\n            let endStateOfLine = thread.stateAry.find(item => {\r\n                return item.stateId === lineObj.endState.stateId;\r\n            })\r\n            outputStates.push(endStateOfLine);\r\n        })\r\n\r\n        let sum = 0;\r\n        outputStates.forEach(state => {\r\n            if (!state.virtualHeight) {\r\n                state.virtualHeight = Util.getVirtualHeight(state);\r\n                sum += state.virtualHeight;\r\n            }\r\n        })\r\n        return sum;\r\n    },\r\n    getAutoXY(state) {\r\n        //x,y是同时设置的，所以只需判断其中一个即可\r\n        if (state.y) {\r\n            return {\r\n                x: state.x,\r\n                y: state.y\r\n            }\r\n        } else {\r\n            state.y = prevState.y + prevState.virtualHeight;\r\n        }\r\n    },\r\n    getDomByStateId(stateId) {\r\n        let doms = document.getElementsByClassName('state-wrap');\r\n        return Array.prototype.slice.call(doms).find(item => {\r\n            return item.getAttribute('stateid') === stateId;\r\n        })\r\n    },\r\n    /**\r\n     * 根据当前所在的层级生成用于自动布局的graphlib图\r\n     * NOTE: 当前寻找state的代码为hardcode，需要讨论如何在statePage内获取当前线程的Index后修改\r\n     * @param {*} layer \r\n     * @param {*} lineAry \r\n     * \r\n     */\r\n    genGraphByLayer(threadIndex, layer, lineAry) {\r\n        var g = new dagre.graphlib.Graph({\r\n            //multigraph: true,\r\n        });\r\n        g.setGraph({\r\n            rankdir: 'LR',\r\n            align: 'UL',\r\n            edgesep: 0,\r\n            ranksep: RANKSEP,\r\n        });\r\n        g.setDefaultEdgeLabel(function () {\r\n            return {};\r\n        });\r\n        let stateInCurrentLayer\r\n        //获取处于当前所在层级内的状态\r\n        if (layer.stateAry) {\r\n            stateInCurrentLayer = layer.stateAry\r\n        } else {\r\n            stateInCurrentLayer = layer.children\r\n        }\r\n        stateInCurrentLayer.forEach(state => {\r\n            g.setNode(state.stateId, {\r\n                label: state.name,\r\n                width: QBlock.State.getStateWidth(state),\r\n                height: QBlock.State.getStateHeight(state)\r\n            });\r\n            /*\r\n            state.inputAry.forEach(line => {\r\n                let lineObj = lineAry.find(item => {\r\n                    return item.lineId === line.lineId\r\n                })\r\n                let startState = store.getState(threadIndex, lineObj.startState.stateId)\r\n                \r\n                //处理可能存在的从循环状态内连接至循环状态外的连线，若存在这种连线，则将连线起始点模拟到与被连入状态处在同一层级的父状态上\r\n                if (startState.parent !== state.parent) {\r\n                    while (startState.parent !== state.parent) {\r\n                        if (startState.parent === null && startState.parent !== state.parent) {\r\n                            return\r\n                        } else {\r\n                            startState = store.getState(threadIndex, startState.parent)\r\n                        }\r\n                    }\r\n                    g.setEdge(startState.stateId, state.stateId, {\r\n                        label: line.lineId\r\n                    })\r\n                }\r\n            })*/\r\n\r\n            state.outputAry.forEach(line => {\r\n                let lineObj = lineAry.find(item => {\r\n                    return item.lineId === line.lineId;\r\n                })\r\n                let endState = store.getState(threadIndex, lineObj.endState.stateId)\r\n                /*\r\n                if (endState.parent !== state.parent) {\r\n                    //处理可能存在的从循环状态外连接至循环状态内的连线，若存在这种连线，则将连线结束点模拟到与被连入状态处在同一层级的父状态上\r\n                    while (endState.parent !== state.parent) {\r\n                        if (endState.parent === null && endState.parent !== state.parent) {\r\n                            return\r\n                        } else {\r\n                            endState = store.getState(threadIndex, endState.parent)\r\n                        }\r\n                    }\r\n                }*/\r\n                // g.setEdge(state.stateId, endState.stateId, line.lineId, lineObj.desc); //这种设置方式会报错 可能是dagre对graphlib的封装接口未同步\r\n                g.setEdge(state.stateId, endState.stateId, {\r\n                    label: line.lineId\r\n                });\r\n            })\r\n        })\r\n        return g\r\n    },\r\n    setStateXYbyNode(state, node) {\r\n        let halfStateWidth = QBlock.State.getStateWidth(state) / 2\r\n        let halfStateHeight = QBlock.State.getStateHeight(state) / 2\r\n        state.x = node.x - halfStateWidth + 20\r\n        state.y = node.y - halfStateHeight + 20\r\n        return\r\n    },\r\n    setStateXYbyLayer(threadIndex, g, layer) {\r\n        let stateInCurrentLayer\r\n        if (layer.stateAry) {\r\n            stateInCurrentLayer = layer.stateAry\r\n        } else {\r\n            stateInCurrentLayer = layer.children\r\n        }\r\n        g.nodes().forEach(function (nodeId) {\r\n            let node = g.node(nodeId);\r\n            let state = store.getState(threadIndex, nodeId)\r\n            if (state) {\r\n                Util.setStateXYbyNode(state, node) //重设状态位置信息\r\n                if (state.inputAry && state.inputAry.length) {\r\n                    state.inputAry.forEach(item => {\r\n                        store.stateData.lineMap[item.lineId].refresh();\r\n                    })\r\n                }\r\n            }\r\n            console.log(\"Node \" + nodeId + \": \" + JSON.stringify(g.node(nodeId)));\r\n        });\r\n    },\r\n    testLayout(threadIndex, thread, lineAry) {\r\n        //处理在自动布局前被用户所调整过的连线\r\n        let g = this.genGraphByLayer(threadIndex, thread, lineAry)\r\n        dagre.layout(g); //布局分析\r\n        this.setStateXYbyLayer(threadIndex, g, thread)\r\n    },\r\n}\r\nexport default Util;"],"file":"util.dev.js"}