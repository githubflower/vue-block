{"version":3,"sources":["qblock.js"],"names":["_util","_interopRequireDefault","require","_graphCfg","LINE_H","lineCfg","line_h","LINE_RADIUS","line_radius","QBlock","store","window","Thread","State","threadPos","document","getElementsByClassName","threadIndex","getBoundingClientRect","Util","getDomByStateId","state","stateId","x","statePos","left","y","top","getStateHeight","getXY2Canvas","translatePX2Num","height","getStateHeightByStateId","getStartPoint","startState","getState","line","xy","startPoint","width","getEndPoint","endState","endPoint","this","drawLine","tempRadius","Line","stateHeight","linepath","Math","d","drawUpperBackConnectLine","doubleRadius","drawUpperConnectLine","drawLowerConnectLine"],"mappings":"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","file":"qblock.min.js","sourcesContent":["import Util from './util.js'\r\nimport { lineCfg } from \"./graphCfg.js\";\r\nconst LINE_H = lineCfg.line_h;\r\nconst LINE_RADIUS = lineCfg.line_radius;\r\nvar QBlock = {\r\n    store: window.store,\r\n    Thread: {\r\n\r\n    },\r\n    State: {\r\n        /**\r\n         * 获取状态相对于线程框的坐标信息\r\n         * @param {*} state\r\n         */\r\n        getXY2Canvas(state, threadIndex){\r\n            let threadPos = document.getElementsByClassName(\"thread\")[threadIndex].getBoundingClientRect();\r\n            let statePos = Util.getDomByStateId(state.stateId).getBoundingClientRect();\r\n            return {\r\n                x: statePos.left - threadPos.left,\r\n                y: statePos.top - threadPos.top\r\n            }\r\n        },\r\n        getStateHeight(state){\r\n            return Util.translatePX2Num(state.height);\r\n        },\r\n        getStateHeightByStateId(threadIndex, stateId){\r\n            let state = store.getState(threadIndex, stateId, false);\r\n            return Util.translatePX2Num(state.height);\r\n        },\r\n        getStateWidth(state){\r\n            return Util.translatePX2Num(state.width);\r\n        }\r\n    },\r\n    Line: {\r\n        getStartPoint(line, threadIndex){\r\n            /* if (\r\n                !line.startPoint ||\r\n                line.startPoint.x === null ||\r\n                typeof line.startPoint.x === \"undefined\" ||\r\n                isNaN(line.startPoint.x)\r\n            ) {\r\n                \r\n            } */\r\n            let startState = store.getState(threadIndex, line.startState.stateId, false/**isThreadId: false */);\r\n            let xy = QBlock.State.getXY2Canvas(startState, threadIndex);\r\n            line.startPoint = {\r\n                x: xy.x + Util.translatePX2Num(startState.width),\r\n                y: xy.y + Util.translatePX2Num(startState.height) / 2,\r\n            };\r\n            return line.startPoint;\r\n        },\r\n        getEndPoint(line, threadIndex) {\r\n            let endState = store.getState(threadIndex, line.endState.stateId, false/**isThreadId: false */);\r\n            let xy = QBlock.State.getXY2Canvas(endState, threadIndex);\r\n            line.endPoint = {\r\n                x: xy.x,\r\n                y: xy.y + Util.translatePX2Num(endState.height) / 2,\r\n            };\r\n            return line.endPoint;\r\n        },\r\n        redrawLine(line, threadIndex){\r\n            this.drawLine(line, line.startState, line.endState, threadIndex);\r\n        },\r\n        drawLine(line, startState, endState, threadIndex) {\r\n            let tempRadius = LINE_RADIUS;\r\n            let startPoint, endPoint, stateHeight, linepath;\r\n            startPoint = QBlock.Line.getStartPoint(line, threadIndex);\r\n            endPoint = QBlock.Line.getEndPoint(line, threadIndex);\r\n            stateHeight = Math.max(\r\n                QBlock.State.getStateHeightByStateId(threadIndex, startState.stateId) / 2,\r\n                QBlock.State.getStateHeightByStateId(threadIndex, endState.stateId) / 2\r\n            );\r\n\r\n            // y坐标相同，绘制直线\r\n            if (\r\n                endPoint.x > startPoint.x + LINE_H + LINE_RADIUS &&\r\n                endPoint.y == startPoint.y\r\n            ) {\r\n                linepath = this.drawStraightConnectLine(\r\n                    startPoint,\r\n                    endPoint,\r\n                    LINE_RADIUS\r\n                );\r\n                line.endPoint = endPoint;\r\n                line.d = linepath;\r\n                return line;\r\n            }\r\n\r\n            // 当结束点的x坐标小于起始点且y坐标相等时或小于起始点时\r\n            else if (\r\n                (endPoint.x - LINE_H - LINE_RADIUS < startPoint.x &&\r\n                    endPoint.y < startPoint.y) ||\r\n                (endPoint.x < startPoint.x && endPoint.y == startPoint.y)\r\n            ) {\r\n                linepath = this.drawUpperBackConnectLine(\r\n                    startPoint,\r\n                    endPoint,\r\n                    LINE_RADIUS,\r\n                    stateHeight\r\n                );\r\n                line.endPoint = endPoint;\r\n                line.d = linepath;\r\n                return line;\r\n            }\r\n            // 当结束点的x坐标小于起始点时且y坐标大于起始点时\r\n            else if (\r\n                endPoint.x - LINE_H - LINE_RADIUS < startPoint.x &&\r\n                endPoint.y > startPoint.y\r\n            ) {\r\n                linepath = this.drawLowerBackConnectLine(\r\n                    startPoint,\r\n                    endPoint,\r\n                    LINE_RADIUS,\r\n                    stateHeight\r\n                );\r\n                line.endPoint = endPoint;\r\n                line.d = linepath;\r\n                return line;\r\n            }\r\n\r\n            // 当结束点的x, y坐标均大于起始点的时候\r\n            else if (\r\n                endPoint.x > startPoint.x + LINE_H + LINE_RADIUS &&\r\n                endPoint.y > startPoint.y\r\n            ) {\r\n                // 当结束点与起始点的y坐标差距小于两个拐角半径时，根据结束点和起始点的y坐标的差动态决定拐角半径\r\n                if (endPoint.y - startPoint.y < 2 * tempRadius) {\r\n                    let doubleRadius = endPoint.y - startPoint.y;\r\n                    tempRadius = doubleRadius / 2;\r\n                    linepath = this.drawLowerConnectLine(\r\n                        startPoint,\r\n                        endPoint,\r\n                        tempRadius\r\n                    );\r\n                    line.endPoint = endPoint;\r\n                    line.d = linepath;\r\n                    return line;\r\n                } else {\r\n                    linepath = this.drawLowerConnectLine(\r\n                        startPoint,\r\n                        endPoint,\r\n                        LINE_RADIUS\r\n                    );\r\n                    line.endPoint = endPoint;\r\n                    line.d = linepath;\r\n                    return line;\r\n                }\r\n            }\r\n            //当结束点的x坐标大于起始点，y坐标小于起始点时\r\n            else if (\r\n                endPoint.x > startPoint.x + LINE_H + LINE_RADIUS &&\r\n                endPoint.y < startPoint.y\r\n            ) {\r\n                // 当结束点与起始点的y坐标差距小于两个拐角半径时，根据结束点和起始点的y坐标的差动态决定拐角半径\r\n                if (startPoint.y - endPoint.y < 2 * tempRadius) {\r\n                    let doubleRadius = startPoint.y - endPoint.y;\r\n                    tempRadius = doubleRadius / 2;\r\n                    (linepath = this.drawUpperConnectLine(\r\n                        startPoint,\r\n                        endPoint,\r\n                        tempRadius\r\n                    )),\r\n                        (line.endPoint = endPoint);\r\n                    line.d = linepath;\r\n                    return line;\r\n                } else {\r\n                    (linepath = this.drawUpperConnectLine(\r\n                        startPoint,\r\n                        endPoint,\r\n                        LINE_RADIUS\r\n                    )),\r\n                        (line.endPoint = endPoint);\r\n                    line.d = linepath;\r\n                    return line;\r\n                }\r\n            }\r\n        },\r\n    }\r\n}\r\nexport default QBlock;"]}