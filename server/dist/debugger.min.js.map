{"version":3,"sources":["debugger.js"],"names":["Debugger","checkPermission","setBreakpoint","req","res","blockId","body","lineNum","getLineInfo","createBpInfoFile","filePath","targetPath","bpStr","stopDebugger","send","sendId","incrementId","code","log","msg","console","cmd","client","getConnWithQRLDebugger","dataStr","write","bpInfo","fs","writeFile","err","step","threadId","updateCurHttpConn","indexOf","listDebugInfo","exec","matchData","parseInt","bp","readFileSync","reg","JSON","parse"],"mappings":"2FACA,IAAMA,SAAW,CACbC,gBADa,aAIbC,cAJa,SAIbC,EAAAC,GAOI,IAAIC,EAAUF,EAAIG,KAAKD,QACnBE,EAAUC,YAAYH,GAAW,EACrCI,iBAAiB,CACbC,SAAUC,WAAa,SACvBC,MAAOD,WAAa,WAAaJ,EAAU,OAJ3CF,EAAAA,KAAO,CACPE,KAAUC,IACdC,IAAAA,WAAiB,WAAAF,EAAA,QAAAM,aAbR,SAaTV,EAAAC,GAIIU,IAAJC,IAASC,YACLC,QADKC,IAAA,0BAELC,IAAKR,EAAAA,IAAAA,OAAUI,EAAVJ,kBAFTS,QAAAF,IAAA,kBAAAG,GAjBS,IAAAC,EAAAC,yBAsBbV,kBAtBaV,EAAAC,EAAAW,EAsBKX,SAAAA,GACVW,EAAMD,KAAKE,CACHC,KAAA,IACLE,IAAAK,MAIHpB,EAASqB,MAAAJ,IA7BJZ,iBAAA,SAAAiB,GA2CTC,GAAGC,UAAUF,EAAOhB,SAAUgB,EAAOd,MAAO,SAACiB,GALjD,GAAAA,EAOY,OAAOT,QAAQF,IAAIW,GAEvBT,QAAQF,IAAI,6BAHZY,KA5CK,WA6CD,IAAAR,EAAOF,uBAAPjB,IAAAC,KACHW,IAAAC,YAOLI,QAAQF,IAAI,6BAA+Ba,SAAW,cAAgBhB,GANlEK,IAAAA,EAAQF,IAAAA,OAAIH,EAAJG,6BAAAA,OAARa,SAAQb,OAJZc,kBAAA7B,IAAAC,IAAAW,EAAA,SAAAS,GA3CS,GAAAJ,QAAAF,IAAAM,IAkDP,EAlDOA,EAkDPS,QAAA,oBAGU,OAFFb,QAAGG,IAAAA,qBAAbR,EAAA,UACUmB,cAAVnB,GAGAiB,GAAAA,EAAkB7B,QAAUY,2BAAqB,CASzC,IAPQkB,EAOE,0DAPME,KAAAX,GACJjB,EAAA,EACZ2B,GAAAA,GAAAE,EAAA,GAAA,CACAL,SAAAK,GAAAA,EAAA,GAUI7B,EAAU8B,SAASD,EAAU,GAAI,IAAM,EAP3C,IAAAE,EAAAX,GAAAY,aAAA5B,WAAA,WAEgB6B,GADNF,EAAAG,KAAAC,MAAAJ,IACed,OAAzBjB,IAKc8B,YAJHjC,IAAXU,KAAA,CAUQG,KAAM,IATDZ,QAAI+B,EACFA,IAAAA,aAAuB/B,EAClC,SAKAD,IAAIC,KAAO,CACPS,KAAK,IACDK,IADCK,MAAAJ,QAATF,IAAA,WAAAG,GAKAC,EAAAG,MAAAJ,cAGCrB","file":"debugger.min.js","sourcesContent":["//调试模块相关的中间件\r\nconst Debugger = {\r\n    checkPermission(req, res, next) {\r\n        //TODO\r\n    },\r\n    /**\r\n    * 设置断点做3件事情：\r\n    * 1.在project目录下创建断点信息文件bp.txt  文件内容是 filePath,lineNum\r\n    * 2.发送宏指令，运行file.ql\r\n    * 3.建立socket连接，等待调试器端返回信息\r\n    * */\r\n    setBreakpoint(req, res){\r\n        let blockId = req.body.blockId;\r\n        let lineNum = getLineInfo(blockId) + 2;\r\n        createBpInfoFile({\r\n            filePath: targetPath + 'bp.txt',\r\n            bpStr: targetPath + 'main.ql,' + lineNum + '\\n'\r\n        });\r\n        res.send({\r\n            code: 200,\r\n            msg: targetPath + 'main.ql,' + lineNum + '\\n'\r\n        });\r\n    },\r\n    stopDebugger(req, res) {\r\n        let sendId = ++incrementId;\r\n        console.log('is stopDebugger ing...');\r\n        let cmd = `<${sendId}>debug$done$\\n`;\r\n        console.log('stopDebugger : ' + cmd);\r\n        var client = getConnWithQRLDebugger();\r\n        updateCurHttpConn(req, res, sendId, (dataStr) => {\r\n            res.send({\r\n                code: 200,\r\n                msg: dataStr\r\n            });\r\n        });\r\n        // client.write(`[${sendId}#System.Login 0]`);\r\n        client.write(cmd);\r\n        // client.write(`[${sendId}#System.Logout]`);\r\n    },\r\n    /**\r\n     * 创建断点文件\r\n     * @param {*} bpInfo \r\n     */\r\n    createBpInfoFile(bpInfo) {\r\n        fs.writeFile(bpInfo.filePath, bpInfo.bpStr, (err) => {\r\n            if (err) {\r\n                return console.log(err)\r\n            }\r\n            console.log(\"创建断点信息文件bp.txt Success\");\r\n        })\r\n    },\r\n    step(){\r\n        var client = getConnWithQRLDebugger(req, res);\r\n        let sendId = ++incrementId;\r\n        console.log('/service/step - threadId: ' + threadId + ' - sendId: ' + sendId);\r\n        let cmd = `<${sendId}>debug$step$tcp{client}: ${threadId}$\\n`;\r\n        updateCurHttpConn(req, res, sendId, (dataStr) => {\r\n            console.log(dataStr);\r\n            if (dataStr.indexOf('[Debug]:ok;step;') > -1) {\r\n                console.log('---listDebugInfo:(' + sendId + ')');\r\n                listDebugInfo(sendId);\r\n                return;\r\n            }\r\n            if (dataStr.indexOf('[Debug]:ok;listdebugee;')) {\r\n                //保存断点处的信息 包括线程id\r\n                let reg = /\\[Debug\\]:ok;listdebugee;([0-9a-zA-Z]*).*\\|(\\d*);(\\n)?$/;\r\n                let matchData = reg.exec(dataStr);\r\n                let lineNum = 0;\r\n                if (matchData && matchData[1]) {\r\n                    threadId = matchData && matchData[1];\r\n                    // lineNumStr = matchData[2];\r\n                    lineNum = parseInt(matchData[2], 10) - 2;\r\n\r\n                    let bp = fs.readFileSync(targetPath + 'bp.json');\r\n                    bp = JSON.parse(bp);\r\n                    let blockId = bp[String(lineNum)];\r\n                    res.send({\r\n                        code: 200,\r\n                        blockId: blockId,\r\n                        msg: '当前程序停留在id是' + blockId + '的块。'\r\n                    })\r\n                    return;\r\n                }\r\n            }\r\n            res.send({\r\n                code: 200,\r\n                msg: dataStr\r\n            });\r\n        });\r\n        console.log('step命令： ' + cmd);\r\n        client.write(cmd);\r\n    }\r\n};\r\n\r\nexport default Debugger;"]}