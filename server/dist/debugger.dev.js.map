{"version":3,"sources":["debugger.js"],"names":["Debugger","checkPermission","req","res","next","setBreakpoint","blockId","body","lineNum","getLineInfo","createBpInfoFile","filePath","targetPath","bpStr","send","code","msg","stopDebugger","sendId","incrementId","console","log","cmd","client","getConnWithQRLDebugger","updateCurHttpConn","dataStr","write","bpInfo","fs","writeFile","err","step","threadId","indexOf","listDebugInfo","reg","matchData","exec","parseInt","bp","readFileSync","JSON","parse","String"],"mappings":"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","sourcesContent":["//调试模块相关的中间件\r\nconst Debugger = {\r\n    checkPermission(req, res, next) {\r\n        //TODO\r\n    },\r\n    /**\r\n    * 设置断点做3件事情：\r\n    * 1.在project目录下创建断点信息文件bp.txt  文件内容是 filePath,lineNum\r\n    * 2.发送宏指令，运行file.ql\r\n    * 3.建立socket连接，等待调试器端返回信息\r\n    * */\r\n    setBreakpoint(req, res){\r\n        let blockId = req.body.blockId;\r\n        let lineNum = getLineInfo(blockId) + 2;\r\n        createBpInfoFile({\r\n            filePath: targetPath + 'bp.txt',\r\n            bpStr: targetPath + 'main.ql,' + lineNum + '\\n'\r\n        });\r\n        res.send({\r\n            code: 200,\r\n            msg: targetPath + 'main.ql,' + lineNum + '\\n'\r\n        });\r\n    },\r\n    stopDebugger(req, res) {\r\n        let sendId = ++incrementId;\r\n        console.log('is stopDebugger ing...');\r\n        let cmd = `<${sendId}>debug$done$\\n`;\r\n        console.log('stopDebugger : ' + cmd);\r\n        var client = getConnWithQRLDebugger();\r\n        updateCurHttpConn(req, res, sendId, (dataStr) => {\r\n            res.send({\r\n                code: 200,\r\n                msg: dataStr\r\n            });\r\n        });\r\n        // client.write(`[${sendId}#System.Login 0]`);\r\n        client.write(cmd);\r\n        // client.write(`[${sendId}#System.Logout]`);\r\n    },\r\n    /**\r\n     * 创建断点文件\r\n     * @param {*} bpInfo \r\n     */\r\n    createBpInfoFile(bpInfo) {\r\n        fs.writeFile(bpInfo.filePath, bpInfo.bpStr, (err) => {\r\n            if (err) {\r\n                return console.log(err)\r\n            }\r\n            console.log(\"创建断点信息文件bp.txt Success\");\r\n        })\r\n    },\r\n    step(){\r\n        var client = getConnWithQRLDebugger(req, res);\r\n        let sendId = ++incrementId;\r\n        console.log('/service/step - threadId: ' + threadId + ' - sendId: ' + sendId);\r\n        let cmd = `<${sendId}>debug$step$tcp{client}: ${threadId}$\\n`;\r\n        updateCurHttpConn(req, res, sendId, (dataStr) => {\r\n            console.log(dataStr);\r\n            if (dataStr.indexOf('[Debug]:ok;step;') > -1) {\r\n                console.log('---listDebugInfo:(' + sendId + ')');\r\n                listDebugInfo(sendId);\r\n                return;\r\n            }\r\n            if (dataStr.indexOf('[Debug]:ok;listdebugee;')) {\r\n                //保存断点处的信息 包括线程id\r\n                let reg = /\\[Debug\\]:ok;listdebugee;([0-9a-zA-Z]*).*\\|(\\d*);(\\n)?$/;\r\n                let matchData = reg.exec(dataStr);\r\n                let lineNum = 0;\r\n                if (matchData && matchData[1]) {\r\n                    threadId = matchData && matchData[1];\r\n                    // lineNumStr = matchData[2];\r\n                    lineNum = parseInt(matchData[2], 10) - 2;\r\n\r\n                    let bp = fs.readFileSync(targetPath + 'bp.json');\r\n                    bp = JSON.parse(bp);\r\n                    let blockId = bp[String(lineNum)];\r\n                    res.send({\r\n                        code: 200,\r\n                        blockId: blockId,\r\n                        msg: '当前程序停留在id是' + blockId + '的块。'\r\n                    })\r\n                    return;\r\n                }\r\n            }\r\n            res.send({\r\n                code: 200,\r\n                msg: dataStr\r\n            });\r\n        });\r\n        console.log('step命令： ' + cmd);\r\n        client.write(cmd);\r\n    }\r\n};\r\n\r\nexport default Debugger;"],"file":"debugger.dev.js"}