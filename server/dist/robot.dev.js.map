{"version":3,"sources":["robot.js"],"names":["targetPath","Robot","test","req","res","next","Project","saveProject","stateData","path","join","__dirname","blocklyData","code","msg","fs","writeFile","body","err","console","log","push","readFileToArr","bpData","JSON","stringify","send","startProject","projectName","client","getConnection","sendId","incrementId","updateCurHttpConn","dataStr","write","stopProject","Net","connect2PrintSocket","net","connect","port","host","localAddress","localPort","_remoteAddress","setEncoding","on","data","toString","parseInt","substr","callback"],"mappings":"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","sourcesContent":["const targetPath = '';\r\n//机器人控制相关的中间件\r\nconst Robot = {\r\n    test(req, res, next) {\r\n        //TODO\r\n    },\r\n\r\n    Project: {\r\n        saveProject(req, res){\r\n            let stateData = path.join(__dirname, '/stateData.json');\r\n            let blocklyData = path.join(__dirname, '/blocklyData.xml');\r\n            // let code = path.join(__dirname, '/main.ql');\r\n            let code = targetPath + 'main.ql';\r\n            let msg = [];\r\n            /* fs.writeFile(stateData, JSON.stringify(req.body.stateData), (err) => {\r\n                if (err) {\r\n                    return console.log(err)\r\n                }\r\n                msg.push(\"create stateData stateData.json Success\");\r\n            }) */\r\n\r\n           /*  fs.writeFile(blocklyData, JSON.stringify(req.body.blocklyData), (err) => {\r\n                if (err) {\r\n                    return console.log(err)\r\n                }\r\n                msg.push(\"create blocklyData blocklyData.xml Success\");\r\n            }) */\r\n\r\n            fs.writeFile(code, req.body.code, (err) => {\r\n                if (err) {\r\n                    return console.log(err)\r\n                }\r\n                msg.push(\"create code code.qrl Success\");\r\n            })\r\n            readFileToArr(targetPath + 'main.ql', (bpData) => {\r\n                fs.writeFile(targetPath + 'bp.json', JSON.stringify(bpData), err => {\r\n                    if (err) {\r\n                        return console.log(err);\r\n                    }\r\n                });\r\n                msg.push(\"create bp.json Success\");\r\n                console.log('create bp.json success!');\r\n            })\r\n\r\n            res.send({\r\n                code: 200,\r\n                msg: msg\r\n            });\r\n        },\r\n        startProject(req, res, projectName){\r\n            projectName = projectName || 'zjie';\r\n            console.log(`is startProject - ${projectName} ing...`);\r\n            var client = getConnection();\r\n            let sendId = ++incrementId;\r\n            updateCurHttpConn(req, res, sendId, (dataStr) => {\r\n                res.send({\r\n                    code: 200,\r\n                    msg: dataStr\r\n                });\r\n            });\r\n            client.write(`[${sendId}#System.Login 0]`);\r\n            client.write(`[${sendId}#System.Load ${projectName}]`);\r\n            client.write(`[${sendId}#System.ModeSwitch 0]`);\r\n            client.write(`[${sendId}#System.Start]`);\r\n            client.write(`[${sendId}#System.Logout]`);\r\n        },\r\n\r\n        stopProject(req, res) {\r\n            console.log('is stopProject ing...');\r\n            var client = getConnection();\r\n            let sendId = ++incrementId;\r\n            updateCurHttpConn(req, res, sendId, (dataStr) => {\r\n                res.send({\r\n                    code: 200,\r\n                    msg: dataStr\r\n                });\r\n            });\r\n            client.write(`[${sendId}#System.Login 0]`);\r\n            client.write(`[${sendId}#System.Abort]`);\r\n            client.write(`[${sendId}#System.Logout]`);\r\n        }\r\n    },\r\n\r\n    Net: {\r\n        connect2PrintSocket(){\r\n            var client = net.connect({ port: 2091, host: '127.0.0.1' }, function () {\r\n                console.log(' Connected');\r\n                console.log(' local= %s:%s', this.localAddress, this.localPort);\r\n                console.log(' remote= %s:%s', this._remoteAddress, this._remoteAddress);\r\n                this.setEncoding('utf8');\r\n                this.on('data', function (data) {\r\n                    console.log(\" From Server:\" + data.toString());\r\n                    if (res) {//判断返回的状态值\r\n                        res.send({\r\n                            code: 200,\r\n                            data: parseInt(data.substr(5, 1), 10),\r\n                            msg: 'getStatus Success'\r\n                        });\r\n                        // this.end();\r\n                    }\r\n                    if (callback) {\r\n                        callback();\r\n                    }\r\n                });\r\n                this.on('end', function () {\r\n                    console.log(' disconnection');\r\n                });\r\n                this.on('error', function (err) {\r\n                    console.log('Socket Error:' + JSON.stringify(err));\r\n                });\r\n                this.on('timeout', function () {\r\n                    console.log('Socket Timed Out');\r\n                });\r\n                this.on('close', function () {\r\n                    console.log('  Closed');\r\n                });\r\n            })\r\n            return client;\r\n        }\r\n    }\r\n};\r\n\r\nexport default Robot;"],"file":"robot.dev.js"}