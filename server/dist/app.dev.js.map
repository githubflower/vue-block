{"version":3,"sources":["app.js"],"names":["devCfg","debugMode","testPath","publicPath","targetPath","options","target","changeOrigin","express","require","path","app","fs","readline","createServer","bodyParser","use","json","urlencoded","extended","join","__dirname","qrlDebugger","robot","permission","checkPermission","test","listen","console","log"],"mappings":";;AAAA,IAAMA,MAAM,GAAG;AACdC,EAAAA,SAAS,EAAE,KADG;AAEdC,EAAAA,QAAQ,EAAE,IAFI;AAGdC,EAAAA,UAAU,EAAE,mDAHE;AAIdC,EAAAA,UAAU,EAAEH,SAAS,GAAGC,QAAH,GAAcC;AAJrB,CAAf;AAOA,IAAME,OAAO,GAAG;AACfC,EAAAA,MAAM,EAAE,qBADO;AAEfC,EAAAA,YAAY,EAAE;AAFC,CAAhB;;AAKA,IAAMC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,IAAME,GAAG,GAAGH,OAAO,EAAnB;;AACA,IAAMI,EAAE,GAAGH,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAMI,QAAQ,GAAGJ,OAAO,CAAC,UAAD,CAAxB,C,CACA;;;AAEA,IAAIT,MAAM,CAACC,SAAX,EAAsB;AACrBa,EAAAA,YAAY;AACZ;;AAGD,IAAIC,UAAU,GAAGN,OAAO,CAAC,aAAD,CAAxB;;AACAE,GAAG,CAACK,GAAJ,CAAQD,UAAU,CAACE,IAAX,EAAR;AACAN,GAAG,CAACK,GAAJ,CAAQD,UAAU,CAACG,UAAX,CAAsB;AAC7BC,EAAAA,QAAQ,EAAE;AADmB,CAAtB,CAAR,E,CAGA;;AAEAR,GAAG,CAACK,GAAJ,CAAQR,OAAO,UAAP,CAAeE,IAAI,CAACU,IAAL,CAAUC,SAAV,EAAqB,KAArB,CAAf,CAAR,E,CAEA;AACA;;AACA,IAAMC,WAAW,GAAGb,OAAO,CAAC,eAAD,CAA3B;;AACA,IAAMc,KAAK,GAAGd,OAAO,CAAC,YAAD,CAArB;;AACA,IAAMe,UAAU,GAAGf,OAAO,CAAC,YAAD,CAA1B;;AACAE,GAAG,CAACK,GAAJ,CAAQ,kBAAR,EAA4BQ,UAAU,CAACC,eAAvC;AACAd,GAAG,CAACK,GAAJ,CAAQ,eAAR,EAAyB,CAACQ,UAAU,CAACC,eAAZ,EAA6BF,KAAK,CAACG,IAAnC,CAAzB,E,CAQA;;AAEAf,GAAG,CAACgB,MAAJ,CAAW,EAAX,EAAe,YAAM;AACpBC,EAAAA,OAAO,CAACC,GAAR;AACA,CAFD","sourcesContent":["const devCfg = {\r\n\tdebugMode: false,\r\n\ttestPath: './',\r\n\tpublicPath: '/media/flash/PallasSolutions/qblock_demo/project/',\r\n\ttargetPath: debugMode ? testPath : publicPath,\r\n};\r\n\r\nconst options = {\r\n\ttarget: 'http://127.0.0.1:80',\r\n\tchangeOrigin: true\r\n}\r\n\r\nconst express = require('express')\r\nconst path = require('path')\r\nconst app = express()\r\nconst fs = require('fs');\r\nconst readline = require('readline');\r\n// const proxy = require('http-proxy-middleware');\r\n\r\nif (devCfg.debugMode) {\r\n\tcreateServer();\r\n}\r\n\r\n\r\nvar bodyParser = require('body-parser');\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({\r\n\textended: false\r\n}));\r\n// app.use(proxy('/service/*', options))\r\n\r\napp.use(express.static(path.join(__dirname, 'www')))\r\n\r\n//======================中间件=======================================================\r\n//使用中间件处理权限 TODO   业务逻辑写到各自的中间件里面\r\nconst qrlDebugger = require('./Debugger.js');\r\nconst robot = require('./robot.js');\r\nconst permission = require('./robot.js');\r\napp.use('/service/setting', permission.checkPermission);\r\napp.use('/service/move', [permission.checkPermission, robot.test]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//所有获取数据尽量使用get请求\r\n\r\napp.listen(80, () => {\r\n\tconsole.log(`App listening at port 80`)\r\n})"],"file":"app.dev.js"}