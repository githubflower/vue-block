{"version":3,"sources":["robot.js"],"names":["targetPath","Robot","test","Project","req","res","next","__dirname","path","join","code","stateData","fs","writeFile","body","err","console","log","readFileToArr","bpData","JSON","stringify","push","send","msg","projectName","concat","client","getConnection","sendId","incrementId","dataStr","write","updateCurHttpConn","Net","connect2PrintSocket","net","connect","port","host","this","localAddress","localPort","_remoteAddress","setEncoding","on","data","toString","substr","callback"],"mappings":"2FAAA,IAAMA,WAAa,GAEbC,MAAQ,CACVC,KADU,aAKVC,QAAS,CALPF,YAKO,SALCG,EAAAC,GACAA,KAAKC,KAAMC,UACjB,mBAFMC,KAAAC,KAAAF,UAAA,oBAAA,IAKDG,EAAAV,WAAA,UAEGW,EAAYH,GAmBhBI,GAAGC,UAAUH,EAAMN,EAAIU,KAAKJ,KAAM,SAACK,GAC/B,GAAIA,EACA,OAAOC,QAAQC,IAAIF,GAFxBF,EAAUH,KAAMN,kCAEXc,cAAeD,WAAf,UAAA,SAAAE,GACHP,GAAAC,UAAAb,WAAA,UAAAoB,KAAAC,UAAAF,GAAA,SAAAJ,GAKG,GAAIA,EAJC,OAAAC,QAAAC,IAAAF,KAGNF,EAAHS,KAAatB,0BACLe,QAAKE,IAAA,6BADbZ,EAAAkB,KAAA,CAKAb,KAAS,IACDO,IAAIO,KAIZd,aAtCH,SAqCQN,EAAAC,EAAAoB,GAEFA,EAAED,GAAAA,OAFTR,QAAAC,IAAA,qBAAAS,OAAAD,EAAA,YArCC,IAAAE,EAAAC,gBAAAC,IAAAC,YA2CDL,kBAAcA,EAAepB,EAAAwB,EAA7B,SAAAE,GACQd,EAARM,KAAA,CACaK,KAAAA,IACAJ,IAAEM,MAGPpB,EADKsB,MACLtB,IAAAA,OADKmB,EACLnB,qBACAc,EAAKO,MAALP,IAAAA,OAAKO,EAALP,iBAAAA,OAAKO,EAALP,MAFJG,EAAAK,MAAA,IAAAN,OAAAG,EAAA,0BADJF,EAAAK,MAAA,IAAAN,OAAAG,EAAA,mBAMMF,EAANK,MAAM,IAAAN,OAANG,EAAM,qBAGNF,YAxDC,SAwDDvB,EAAAC,GACMW,QAANC,IAAA,yBAzDC,IAAAU,EAAAC,gBAAAC,IAAAC,YA6DDd,kBAAYZ,EAAAC,EAAAwB,EAAZ,SAAAE,GACU1B,EAAGuB,KAAAA,CACAlB,KAAEoB,IACfG,IAAkB7B,MAGVoB,EAAKO,MAALP,IAAAA,OAAKO,EAALP,qBAFJG,EAAAK,MAAA,IAAAN,OAAAG,EAAA,mBADJF,EAAAK,MAAA,IAAAN,OAAAG,EAAA,sBASHK,IAAA,CA9EKC,oBA8EL,WA8BO,OA3BPC,IAAAC,QAAA,CAAAC,KAAA,KAAAC,KAAA,aAAA,WACDJ,QADClB,IAAA,cAEaD,QAAOqB,IAAAA,gBAAQG,KAAAC,aAAAD,KAAAE,WAAQ1B,QAARC,IAAA,iBAAAuB,KAAAG,eAAAH,KAAAG,gBAAoBH,KAAAI,YAAA,QAAeJ,KAAYK,GAAA,OAAA,SAAAC,GACxD9B,QAAAC,IAAZ,gBAAA6B,EAAAC,YACY1C,KACAA,IAAAkB,KAAA,CACKb,KAAjB,IACgBoC,KAAUA,SAAMA,EAAAE,OAAA,EAAA,GAAA,IAChBxB,IAAA,sBAECyB,UAAAA,aAKTT,KAAAK,GAAA,MAAA,WACH7B,QAAAC,IAAA,oBACGgC,KAAAA,GAAU,QAAA,SAAAlC,GACFC,QAAAC,IAAA,gBAAAG,KAAAC,UAAAN,MAXhByB,KAAAK,GAAA,UAAA,WAcQ7B,QAAOC,IAAA,sBAAfuB,KAAAK,GAAA,QAAA,WAGQ7B,QAASC,IAAA,4BAMjBhB","file":"robot.min.js","sourcesContent":["const targetPath = '';\r\n//机器人控制相关的中间件\r\nconst Robot = {\r\n    test(req, res, next) {\r\n        //TODO\r\n    },\r\n\r\n    Project: {\r\n        saveProject(req, res){\r\n            let stateData = path.join(__dirname, '/stateData.json');\r\n            let blocklyData = path.join(__dirname, '/blocklyData.xml');\r\n            // let code = path.join(__dirname, '/main.ql');\r\n            let code = targetPath + 'main.ql';\r\n            let msg = [];\r\n            /* fs.writeFile(stateData, JSON.stringify(req.body.stateData), (err) => {\r\n                if (err) {\r\n                    return console.log(err)\r\n                }\r\n                msg.push(\"create stateData stateData.json Success\");\r\n            }) */\r\n\r\n           /*  fs.writeFile(blocklyData, JSON.stringify(req.body.blocklyData), (err) => {\r\n                if (err) {\r\n                    return console.log(err)\r\n                }\r\n                msg.push(\"create blocklyData blocklyData.xml Success\");\r\n            }) */\r\n\r\n            fs.writeFile(code, req.body.code, (err) => {\r\n                if (err) {\r\n                    return console.log(err)\r\n                }\r\n                msg.push(\"create code code.qrl Success\");\r\n            })\r\n            readFileToArr(targetPath + 'main.ql', (bpData) => {\r\n                fs.writeFile(targetPath + 'bp.json', JSON.stringify(bpData), err => {\r\n                    if (err) {\r\n                        return console.log(err);\r\n                    }\r\n                });\r\n                msg.push(\"create bp.json Success\");\r\n                console.log('create bp.json success!');\r\n            })\r\n\r\n            res.send({\r\n                code: 200,\r\n                msg: msg\r\n            });\r\n        },\r\n        startProject(req, res, projectName){\r\n            projectName = projectName || 'zjie';\r\n            console.log(`is startProject - ${projectName} ing...`);\r\n            var client = getConnection();\r\n            let sendId = ++incrementId;\r\n            updateCurHttpConn(req, res, sendId, (dataStr) => {\r\n                res.send({\r\n                    code: 200,\r\n                    msg: dataStr\r\n                });\r\n            });\r\n            client.write(`[${sendId}#System.Login 0]`);\r\n            client.write(`[${sendId}#System.Load ${projectName}]`);\r\n            client.write(`[${sendId}#System.ModeSwitch 0]`);\r\n            client.write(`[${sendId}#System.Start]`);\r\n            client.write(`[${sendId}#System.Logout]`);\r\n        },\r\n\r\n        stopProject(req, res) {\r\n            console.log('is stopProject ing...');\r\n            var client = getConnection();\r\n            let sendId = ++incrementId;\r\n            updateCurHttpConn(req, res, sendId, (dataStr) => {\r\n                res.send({\r\n                    code: 200,\r\n                    msg: dataStr\r\n                });\r\n            });\r\n            client.write(`[${sendId}#System.Login 0]`);\r\n            client.write(`[${sendId}#System.Abort]`);\r\n            client.write(`[${sendId}#System.Logout]`);\r\n        }\r\n    },\r\n\r\n    Net: {\r\n        connect2PrintSocket(){\r\n            var client = net.connect({ port: 2091, host: '127.0.0.1' }, function () {\r\n                console.log(' Connected');\r\n                console.log(' local= %s:%s', this.localAddress, this.localPort);\r\n                console.log(' remote= %s:%s', this._remoteAddress, this._remoteAddress);\r\n                this.setEncoding('utf8');\r\n                this.on('data', function (data) {\r\n                    console.log(\" From Server:\" + data.toString());\r\n                    if (res) {//判断返回的状态值\r\n                        res.send({\r\n                            code: 200,\r\n                            data: parseInt(data.substr(5, 1), 10),\r\n                            msg: 'getStatus Success'\r\n                        });\r\n                        // this.end();\r\n                    }\r\n                    if (callback) {\r\n                        callback();\r\n                    }\r\n                });\r\n                this.on('end', function () {\r\n                    console.log(' disconnection');\r\n                });\r\n                this.on('error', function (err) {\r\n                    console.log('Socket Error:' + JSON.stringify(err));\r\n                });\r\n                this.on('timeout', function () {\r\n                    console.log('Socket Timed Out');\r\n                });\r\n                this.on('close', function () {\r\n                    console.log('  Closed');\r\n                });\r\n            })\r\n            return client;\r\n        }\r\n    }\r\n};\r\n\r\nexport default Robot;"]}